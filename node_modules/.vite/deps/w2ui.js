var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// node_modules/w2ui/w2ui-2.0.es6.min.js
var w2event = class {
  constructor(e, t) {
    Object.assign(this, { type: t.type ?? null, detail: t, owner: e, target: t.target ?? null, phase: t.phase ?? "before", object: t.object ?? null, execute: null, isStopped: false, isCancelled: false, onComplete: null, listeners: [] }), delete t.type, delete t.target, delete t.object, this.complete = new Promise((e2, t2) => {
      this._resolve = e2, this._reject = t2;
    }), this.complete.catch(() => {
    });
  }
  finish(e) {
    e && w2utils.extend(this.detail, e), this.phase = "after", this.owner.trigger.call(this.owner, this);
  }
  done(e) {
    this.listeners.push(e);
  }
  preventDefault() {
    this._reject(), this.isCancelled = true;
  }
  stopPropagation() {
    this.isStopped = true;
  }
};
var w2base = class {
  constructor(e) {
    if (this.activeEvents = [], this.listeners = [], void 0 !== e) {
      if (!w2utils.checkName(e))
        return;
      w2ui[e] = this;
    }
    this.debug = false;
  }
  on(e, r) {
    return (e = "string" == typeof e ? e.split(/[,\s]+/) : [e]).forEach((e2) => {
      var t, i, s, l = "string" == typeof e2 ? e2 : e2.type + ":" + e2.execute + "." + e2.scope;
      "string" == typeof e2 && ([i, t] = e2.split("."), [i, s] = i.replace(":complete", ":after").replace(":done", ":after").split(":"), e2 = { type: i, execute: s ?? "before", scope: t }), (e2 = w2utils.extend({ type: null, execute: "before", onComplete: null }, e2)).type ? r ? (Array.isArray(this.listeners) || (this.listeners = []), this.listeners.push({ name: l, edata: e2, handler: r }), this.debug && console.log("w2base: add event", { name: l, edata: e2, handler: r })) : console.log("ERROR: You must specify event handler function when calling .on() method of " + this.name) : console.log("ERROR: You must specify event type when calling .on() method of " + this.name);
    }), this;
  }
  off(e, r) {
    return (e = "string" == typeof e ? e.split(/[,\s]+/) : [e]).forEach((i) => {
      var e2, t, s, l = "string" == typeof i ? i : i.type + ":" + i.execute + "." + i.scope;
      if ("string" == typeof i && ([t, e2] = i.split("."), [t, s] = t.replace(":complete", ":after").replace(":done", ":after").split(":"), i = { type: t || "*", execute: s || "", scope: e2 || "" }), (i = w2utils.extend({ type: null, execute: null, onComplete: null }, i)).type || i.scope) {
        r = r || null;
        let t2 = 0;
        this.listeners = this.listeners.filter((e3) => "*" !== i.type && i.type !== e3.edata.type || "" !== i.execute && i.execute !== e3.edata.execute || "" !== i.scope && i.scope !== e3.edata.scope || null != i.handler && i.handler !== e3.edata.handler || (t2++, false)), this.debug && console.log(`w2base: remove event (${t2})`, { name: l, edata: i, handler: r });
      } else
        console.log("ERROR: You must specify event type when calling .off() method of " + this.name);
    }), this;
  }
  trigger(e, i) {
    if (1 == arguments.length ? i = e : (i.type = e, i.target = i.target ?? this), w2utils.isPlainObject(i) && "after" == i.phase) {
      if (!(i = this.activeEvents.find((e2) => e2.type == i.type && e2.target == i.target)))
        return void console.log(`ERROR: Cannot find even handler for "${i.type}" on "${i.target}".`);
      console.log(`NOTICE: This syntax "edata.trigger({ phase: 'after' })" is outdated. Use edata.finish() instead.`);
    } else
      i instanceof w2event || (i = new w2event(this, i), this.activeEvents.push(i));
    let s, t, l;
    Array.isArray(this.listeners) || (this.listeners = []), this.debug && console.log(`w2base: trigger "${i.type}:${i.phase}"`, i);
    for (let e2 = this.listeners.length - 1; 0 <= e2; e2--) {
      let t2 = this.listeners[e2];
      if (!(null == t2 || t2.edata.type !== i.type && "*" !== t2.edata.type || t2.edata.target !== i.target && null != t2.edata.target || t2.edata.execute !== i.phase && "*" !== t2.edata.execute && "*" !== t2.edata.phase) && (Object.keys(t2.edata).forEach((e3) => {
        null == i[e3] && null != t2.edata[e3] && (i[e3] = t2.edata[e3]);
      }), s = [], l = new RegExp(/\((.*?)\)/).exec(String(t2.handler).split("=>")[0]), 2 === (s = l ? l[1].split(/\s*,\s*/) : s).length ? (t2.handler.call(this, i.target, i), this.debug && console.log(" - call (old)", t2.handler)) : (t2.handler.call(this, i), this.debug && console.log(" - call", t2.handler)), true === i.isStopped || true === i.stop))
        return i;
    }
    e = "on" + i.type.substr(0, 1).toUpperCase() + i.type.substr(1);
    if (!("before" === i.phase && "function" == typeof this[e] && (t = this[e], s = [], l = new RegExp(/\((.*?)\)/).exec(String(t).split("=>")[0]), 2 === (s = l ? l[1].split(/\s*,\s*/) : s).length ? (t.call(this, i.target, i), this.debug && console.log(" - call: on[Event] (old)", t)) : (t.call(this, i), this.debug && console.log(" - call: on[Event]", t)), true === i.isStopped || true === i.stop) || null != i.object && "before" === i.phase && "function" == typeof i.object[e] && (t = i.object[e], s = [], l = new RegExp(/\((.*?)\)/).exec(String(t).split("=>")[0]), 2 === (s = l ? l[1].split(/\s*,\s*/) : s).length ? (t.call(this, i.target, i), this.debug && console.log(" - call: edata.object (old)", t)) : (t.call(this, i), this.debug && console.log(" - call: edata.object", t)), true === i.isStopped || true === i.stop) || "after" !== i.phase)) {
      "function" == typeof i.onComplete && i.onComplete.call(this, i);
      for (let e2 = 0; e2 < i.listeners.length; e2++)
        "function" == typeof i.listeners[e2] && (i.listeners[e2].call(this, i), this.debug) && console.log(" - call: done", t);
      i._resolve(i), this.debug && console.log(`w2base: trigger "${i.type}:${i.phase}"`, i);
    }
    return i;
  }
};
var w2locale = { locale: "en-US", dateFormat: "m/d/yyyy", timeFormat: "hh:mi pm", datetimeFormat: "m/d/yyyy|hh:mi pm", currencyPrefix: "$", currencySuffix: "", currencyPrecision: 2, groupSymbol: ",", decimalSymbol: ".", shortmonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], fullmonths: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], shortdays: ["M", "T", "W", "T", "F", "S", "S"], fulldays: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], weekStarts: "S", phrases: { "${count} letters or more...": "---", "Add new record": "---", "Add New": "---", "Advanced Search": "---", after: "---", "AJAX error. See console for more details.": "---", "All Fields": "---", All: "---", Any: "---", "Are you sure you want to delete ${count} ${records}?": "---", "Attach files by dragging and dropping or Click to Select": "---", before: "---", "begins with": "---", begins: "---", between: "---", buffered: "---", Cancel: "---", Close: "---", Column: "---", Confirmation: "---", contains: "---", Copied: "---", "Copy to clipboard": "---", "Current Date & Time": "---", "Delete selected records": "---", Delete: "---", 'Do you want to delete search item "${item}"?': "---", "Edit selected record": "---", Edit: "---", "Empty list": "---", "ends with": "---", ends: "---", "Field should be at least ${count} characters.": "---", Hide: "---", in: "---", "is not": "---", is: "---", "less than": "---", "Line #": "---", "Load ${count} more...": "---", "Loading...": "---", "Maximum number of files is ${count}": "---", "Maximum total size is ${count}": "---", Modified: "---", "more than": "---", "Multiple Fields": "---", Name: "---", "No items found": "---", "No matches": "---", No: "---", none: "---", "Not a float": "---", "Not a hex number": "---", "Not a valid date": "---", "Not a valid email": "---", "Not alpha-numeric": "---", "Not an integer": "---", "Not in money format": "---", "not in": "---", Notification: "---", of: "---", Ok: "---", Opacity: "---", "Record ID": "---", record: "---", records: "---", "Refreshing...": "---", "Reload data in the list": "---", Remove: "---", "Remove This Field": "---", "Request aborted.": "---", "Required field": "---", Reset: "---", "Restore Default State": "---", "Returned data is not in valid JSON format.": "---", "Save changed records": "---", "Save Grid State": "---", Save: "---", "Saved Searches": "---", "Saving...": "---", "Search took ${count} seconds": "---", Search: "---", "Select Hour": "---", "Select Minute": "---", selected: "---", "Server Response ${count} seconds": "---", "Show/hide columns": "---", Show: "---", Size: "---", Skip: "---", "Sorting took ${count} seconds": "---", "Type to search...": "---", Type: "---", Yes: "---", Yesterday: "---", "Your remote data source record count has changed, reloading from the first record.": "---" } };
var _Query = class _Query {
  constructor(e, t, i) {
    this.context = t ?? document, this.previous = i ?? null;
    let s = [];
    if (Array.isArray(e))
      s = e;
    else if (e instanceof Node || e instanceof Window)
      s = [e];
    else if (e instanceof _Query)
      s = e.nodes;
    else if ("string" == typeof e) {
      if ("function" != typeof this.context.querySelector)
        throw new Error("Invalid context");
      s = Array.from(this.context.querySelectorAll(e));
    } else if (null == e)
      s = [];
    else {
      t = Array.from(e ?? []);
      if ("object" != typeof e || !Array.isArray(t))
        throw new Error(`Invalid selector "${e}"`);
      s = t;
    }
    this.nodes = s, this.length = s.length, this.each((e2, t2) => {
      this[t2] = e2;
    });
  }
  static _fragment(e) {
    let i = document.createElement("template");
    return i.innerHTML = e, i.content.childNodes.forEach((e2) => {
      var t = _Query._scriptConvert(e2);
      t != e2 && i.content.replaceChild(t, e2);
    }), i.content;
  }
  static _scriptConvert(e) {
    let t = (e2) => {
      var t2 = e2.ownerDocument.createElement("script"), i = (t2.text = e2.text, e2.attributes);
      for (let e3 = 0; e3 < i.length; e3++)
        t2.setAttribute(i[e3].name, i[e3].value);
      return t2;
    };
    return (e = "SCRIPT" == e.tagName ? t(e) : e).querySelectorAll && e.querySelectorAll("script").forEach((e2) => {
      e2.parentNode.replaceChild(t(e2), e2);
    }), e;
  }
  static _fixProp(e) {
    var t = { cellpadding: "cellPadding", cellspacing: "cellSpacing", class: "className", colspan: "colSpan", contenteditable: "contentEditable", for: "htmlFor", frameborder: "frameBorder", maxlength: "maxLength", readonly: "readOnly", rowspan: "rowSpan", tabindex: "tabIndex", usemap: "useMap" };
    return t[e] || e;
  }
  _insert(l, i) {
    let r = [], a = this.length;
    if (!(a < 1)) {
      let e = this;
      if ("string" == typeof i)
        this.each((e2) => {
          var t = _Query._fragment(i);
          r.push(...t.childNodes), e2[l](t);
        });
      else if (i instanceof _Query) {
        let s = 1 == a;
        i.each((i2) => {
          this.each((e2) => {
            var t = s ? i2 : i2.cloneNode(true);
            r.push(t), e2[l](t), _Query._scriptConvert(t);
          });
        }), s || i.remove();
      } else {
        if (!(i instanceof Node))
          throw new Error(`Incorrect argument for "${l}(html)". It expects one string argument.`);
        this.each((e2) => {
          var t = 1 === a ? i : _Query._fragment(i.outerHTML);
          r.push(...1 === a ? [i] : t.childNodes), e2[l](t);
        }), 1 < a && i.remove();
      }
      return e = "replaceWith" == l ? new _Query(r, this.context, this) : e;
    }
  }
  _save(e, t, i) {
    e._mQuery = e._mQuery ?? {}, Array.isArray(i) ? (e._mQuery[t] = e._mQuery[t] ?? [], e._mQuery[t].push(...i)) : null != i ? e._mQuery[t] = i : delete e._mQuery[t];
  }
  get(e) {
    var t = this[e = e < 0 ? this.length + e : e];
    return t || (null != e ? null : this.nodes);
  }
  eq(e) {
    let t = [this[e = e < 0 ? this.length + e : e]];
    return null == t[0] && (t = []), new _Query(t, this.context, this);
  }
  then(e) {
    e = e(this);
    return null != e ? e : this;
  }
  find(t) {
    let i = [];
    return this.each((e) => {
      e = Array.from(e.querySelectorAll(t));
      0 < e.length && i.push(...e);
    }), new _Query(i, this.context, this);
  }
  filter(t) {
    let i = [];
    return this.each((e) => {
      (e === t || "string" == typeof t && e.matches && e.matches(t) || "function" == typeof t && t(e)) && i.push(e);
    }), new _Query(i, this.context, this);
  }
  next() {
    let t = [];
    return this.each((e) => {
      e = e.nextElementSibling;
      e && t.push(e);
    }), new _Query(t, this.context, this);
  }
  prev() {
    let t = [];
    return this.each((e) => {
      e = e.previousElementSibling;
      e && t.push(e);
    }), new _Query(t, this.context, this);
  }
  shadow(e) {
    let t = [];
    this.each((e2) => {
      e2.shadowRoot && t.push(e2.shadowRoot);
    });
    var i = new _Query(t, this.context, this);
    return e ? i.find(e) : i;
  }
  closest(t) {
    let i = [];
    return this.each((e) => {
      e = e.closest(t);
      e && i.push(e);
    }), new _Query(i, this.context, this);
  }
  host(t) {
    let i = [], s = (e) => e.parentNode ? s(e.parentNode) : e, l = (e) => {
      e = s(e);
      i.push(e.host || e), e.host && t && l(e.host);
    };
    return this.each((e) => {
      l(e);
    }), new _Query(i, this.context, this);
  }
  parent(e) {
    return this.parents(e, true);
  }
  parents(e, t) {
    let i = [], s = (e2) => {
      if (-1 == i.indexOf(e2) && i.push(e2), !t && e2.parentNode)
        return s(e2.parentNode);
    };
    this.each((e2) => {
      e2.parentNode && s(e2.parentNode);
    });
    var l = new _Query(i, this.context, this);
    return e ? l.filter(e) : l;
  }
  add(e) {
    e = e instanceof _Query ? e.nodes : Array.isArray(e) ? e : [e];
    return new _Query(this.nodes.concat(e), this.context, this);
  }
  each(i) {
    return this.nodes.forEach((e, t) => {
      i(e, t, this);
    }), this;
  }
  append(e) {
    return this._insert("append", e);
  }
  prepend(e) {
    return this._insert("prepend", e);
  }
  after(e) {
    return this._insert("after", e);
  }
  before(e) {
    return this._insert("before", e);
  }
  replace(e) {
    return this._insert("replaceWith", e);
  }
  remove() {
    return this.each((e) => {
      e.remove();
    }), this;
  }
  css(e, t) {
    let s = e;
    var i, l = arguments.length;
    return 0 === l || 1 === l && "string" == typeof e ? this[0] ? (l = this[0].style, "string" == typeof e ? (i = l.getPropertyPriority(e), l.getPropertyValue(e) + (i ? "!" + i : "")) : Object.fromEntries(this[0].style.cssText.split(";").filter((e2) => !!e2).map((e2) => e2.split(":").map((e3) => e3.trim())))) : void 0 : ("object" != typeof e && ((s = {})[e] = t), this.each((i2, e2) => {
      Object.keys(s).forEach((e3) => {
        var t2 = String(s[e3]).toLowerCase().includes("!important") ? "important" : "";
        i2.style.setProperty(e3, String(s[e3]).replace(/\!important/i, ""), t2);
      });
    }), this);
  }
  addClass(e) {
    return this.toggleClass(e, true), this;
  }
  removeClass(e) {
    return this.toggleClass(e, false), this;
  }
  toggleClass(t, s) {
    return "string" == typeof t && (t = t.split(/[,\s]+/)), this.each((i) => {
      let e = t;
      (e = null == e && false === s ? Array.from(i.classList) : e).forEach((t2) => {
        if ("" !== t2) {
          let e2 = null != s ? s ? "add" : "remove" : "toggle";
          i.classList[e2](t2);
        }
      });
    }), this;
  }
  hasClass(e) {
    if (null == (e = "string" == typeof e ? e.split(/[,\s]+/) : e) && 0 < this.length)
      return Array.from(this[0].classList);
    let i = false;
    return this.each((t) => {
      i = i || e.every((e2) => Array.from(t.classList ?? []).includes(e2));
    }), i;
  }
  on(e, s, l) {
    "function" == typeof s && (l = s, s = void 0);
    let r;
    return (s == null ? void 0 : s.delegate) && (r = s.delegate, delete s.delegate), (e = e.split(/[,\s]+/)).forEach((e2) => {
      let [t, i] = String(e2).toLowerCase().split(".");
      if (r) {
        let i2 = l;
        l = (e3) => {
          var t2 = query(e3.target).parents(r);
          0 < t2.length ? e3.delegate = t2[0] : e3.delegate = e3.target, (e3.target.matches(r) || 0 < t2.length) && i2(e3);
        };
      }
      this.each((e3) => {
        this._save(e3, "events", [{ event: t, scope: i, callback: l, options: s }]), e3.addEventListener(t, l, s);
      });
    }), this;
  }
  off(e, t, r) {
    return "function" == typeof t && (r = t, t = void 0), (e = (e ?? "").split(/[,\s]+/)).forEach((e2) => {
      let [s, l] = String(e2).toLowerCase().split(".");
      this.each((t2) => {
        var _a;
        if (Array.isArray((_a = t2._mQuery) == null ? void 0 : _a.events))
          for (let e3 = t2._mQuery.events.length - 1; 0 <= e3; e3--) {
            var i = t2._mQuery.events[e3];
            null == l || "" === l ? i.event != s && "" !== s || i.callback != r && null != r || (t2.removeEventListener(i.event, i.callback, i.options), t2._mQuery.events.splice(e3, 1)) : i.event != s && "" !== s || i.scope != l || (t2.removeEventListener(i.event, i.callback, i.options), t2._mQuery.events.splice(e3, 1));
          }
      });
    }), this;
  }
  trigger(e, t) {
    let i;
    return i = e instanceof Event || e instanceof CustomEvent ? e : new (["click", "dblclick", "mousedown", "mouseup", "mousemove"].includes(e) ? MouseEvent : ["keydown", "keyup", "keypress"].includes(e) ? KeyboardEvent : Event)(e, t), this.each((e2) => {
      e2.dispatchEvent(i);
    }), this;
  }
  attr(t, i) {
    if (void 0 === i && "string" == typeof t)
      return this[0] ? this[0].getAttribute(t) : void 0;
    {
      let e = {};
      return "object" == typeof t ? e = t : e[t] = i, this.each((i2) => {
        Object.entries(e).forEach(([e2, t2]) => {
          i2.setAttribute(e2, t2);
        });
      }), this;
    }
  }
  removeAttr() {
    return this.each((t) => {
      Array.from(arguments).forEach((e) => {
        t.removeAttribute(e);
      });
    }), this;
  }
  prop(t, i) {
    if (void 0 === i && "string" == typeof t)
      return this[0] ? this[0][t] : void 0;
    {
      let e = {};
      return "object" == typeof t ? e = t : e[t] = i, this.each((i2) => {
        Object.entries(e).forEach(([e2, t2]) => {
          e2 = _Query._fixProp(e2);
          i2[e2] = t2, "innerHTML" == e2 && _Query._scriptConvert(i2);
        });
      }), this;
    }
  }
  removeProp() {
    return this.each((t) => {
      Array.from(arguments).forEach((e) => {
        delete t[_Query._fixProp(e)];
      });
    }), this;
  }
  data(i, t) {
    if (i instanceof Object)
      Object.entries(i).forEach((e) => {
        this.data(e[0], e[1]);
      });
    else {
      if (i && -1 != i.indexOf("-") && console.error(`Key "${i}" contains "-" (dash). Dashes are not allowed in property names. Use camelCase instead.`), !(arguments.length < 2))
        return this.each((e) => {
          null != t ? e.dataset[i] = t instanceof Object ? JSON.stringify(t) : t : delete e.dataset[i];
        }), this;
      if (this[0]) {
        let t2 = Object.assign({}, this[0].dataset);
        return Object.keys(t2).forEach((e) => {
          if (t2[e].startsWith("[") || t2[e].startsWith("{"))
            try {
              t2[e] = JSON.parse(t2[e]);
            } catch (e2) {
            }
        }), i ? t2[i] : t2;
      }
    }
  }
  removeData(e) {
    return "string" == typeof e && (e = e.split(/[,\s]+/)), this.each((t) => {
      e.forEach((e2) => {
        delete t.dataset[e2];
      });
    }), this;
  }
  show() {
    return this.toggle(true);
  }
  hide() {
    return this.toggle(false);
  }
  toggle(r) {
    return this.each((e) => {
      var _a;
      var t, i = e.style.display, s = getComputedStyle(e).display, l = "none" == i || "none" == s;
      !l || null != r && true !== r || (t = e instanceof HTMLTableRowElement ? "table-row" : e instanceof HTMLTableCellElement ? "table-cell" : "block", e.style.display = ((_a = e._mQuery) == null ? void 0 : _a.prevDisplay) ?? (i == s && "none" != s ? "" : t), this._save(e, "prevDisplay", null)), l || null != r && false !== r || ("none" != s && this._save(e, "prevDisplay", s), e.style.setProperty("display", "none"));
    });
  }
  empty() {
    return this.html("");
  }
  html(e) {
    return this.prop("innerHTML", e);
  }
  text(e) {
    return this.prop("textContent", e);
  }
  val(e) {
    return this.prop("value", e);
  }
  change() {
    return this.trigger("change");
  }
  click() {
    return this.trigger("click");
  }
};
__publicField(_Query, "version", 0.7);
var Query = _Query;
var query = function(e, t) {
  if ("function" != typeof e)
    return new Query(e, t);
  "complete" == document.readyState ? e() : window.addEventListener("load", e);
};
var w2ui = (query.html = (e) => {
  e = Query._fragment(e);
  return query(e.children, e);
}, query.version = Query.version, {});
var Utils = class {
  constructor() {
    this.version = "2.0.x", this.tmp = {}, this.settings = this.extend({}, { dataType: "HTTPJSON", dateStartYear: 1950, dateEndYear: 2030, macButtonOrder: false, warnNoPhrase: false }, w2locale, { phrases: null }), this.i18nCompare = Intl.Collator().compare, this.hasLocalStorage = function() {
      var e = "w2ui_test";
      try {
        return localStorage.setItem(e, e), localStorage.removeItem(e), true;
      } catch (e2) {
        return false;
      }
    }(), this.isMac = /Mac/i.test(navigator.platform), this.isMobile = /(iphone|ipod|ipad|mobile|android)/i.test(navigator.userAgent), this.isIOS = /(iphone|ipod|ipad)/i.test(navigator.platform), this.isAndroid = /(android)/i.test(navigator.userAgent), this.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent), this.formatters = { number(e, t) {
      return 20 < parseInt(t) && (t = 20), parseInt(t) < 0 && (t = 0), null == e || "" === e ? "" : w2utils.formatNumber(parseFloat(e), t, true);
    }, float(e, t) {
      return w2utils.formatters.number(e, t);
    }, int(e, t) {
      return w2utils.formatters.number(e, 0);
    }, money(e, t) {
      return null == e || "" === e ? "" : (e = w2utils.formatNumber(Number(e), w2utils.settings.currencyPrecision), (w2utils.settings.currencyPrefix || "") + e + (w2utils.settings.currencySuffix || ""));
    }, currency(e, t) {
      return w2utils.formatters.money(e, t);
    }, percent(e, t) {
      return null == e || "" === e ? "" : w2utils.formatNumber(e, t || 1) + "%";
    }, size(e, t) {
      return null == e || "" === e ? "" : w2utils.formatSize(parseInt(e));
    }, date(e, t) {
      if ("" === t && (t = w2utils.settings.dateFormat), null == e || 0 === e || "" === e)
        return "";
      let i = w2utils.isDateTime(e, t, true);
      return '<span title="' + (i = false === i ? w2utils.isDate(e, t, true) : i) + '">' + w2utils.formatDate(i, t) + "</span>";
    }, datetime(e, t) {
      if ("" === t && (t = w2utils.settings.datetimeFormat), null == e || 0 === e || "" === e)
        return "";
      let i = w2utils.isDateTime(e, t, true);
      return '<span title="' + (i = false === i ? w2utils.isDate(e, t, true) : i) + '">' + w2utils.formatDateTime(i, t) + "</span>";
    }, time(e, t) {
      if ("" === t && (t = w2utils.settings.timeFormat), null == e || 0 === e || "" === e)
        return "";
      let i = w2utils.isDateTime(e, t = "h24" === (t = "h12" === t ? "hh:mi pm" : t) ? "h24:mi" : t, true);
      return '<span title="' + (i = false === i ? w2utils.isDate(e, t, true) : i) + '">' + w2utils.formatTime(e, t) + "</span>";
    }, timestamp(e, t) {
      if ("" === t && (t = w2utils.settings.datetimeFormat), null == e || 0 === e || "" === e)
        return "";
      let i = w2utils.isDateTime(e, t, true);
      return (i = false === i ? w2utils.isDate(e, t, true) : i).toString ? i.toString() : "";
    }, gmt(e, t) {
      if ("" === t && (t = w2utils.settings.datetimeFormat), null == e || 0 === e || "" === e)
        return "";
      let i = w2utils.isDateTime(e, t, true);
      return (i = false === i ? w2utils.isDate(e, t, true) : i).toUTCString ? i.toUTCString() : "";
    }, age(e, t) {
      if (null == e || 0 === e || "" === e)
        return "";
      let i = w2utils.isDateTime(e, null, true);
      return '<span title="' + (i = false === i ? w2utils.isDate(e, null, true) : i) + '">' + w2utils.age(e) + (t ? " " + t : "") + "</span>";
    }, interval(e, t) {
      return null == e || 0 === e || "" === e ? "" : w2utils.interval(e) + (t ? " " + t : "");
    }, toggle(e, t) {
      return e ? "Yes" : "";
    }, password(t, e) {
      let i = "";
      for (let e2 = 0; e2 < t.length; e2++)
        i += "*";
      return i;
    } };
  }
  isBin(e) {
    return /^[0-1]+$/.test(e);
  }
  isInt(e) {
    return /^[-+]?[0-9]+$/.test(e);
  }
  isFloat(e) {
    return ("number" == typeof (e = "string" == typeof e ? e.replace(this.settings.groupSymbol, "").replace(this.settings.decimalSymbol, ".") : e) || "string" == typeof e && "" !== e) && !isNaN(Number(e));
  }
  isMoney(e) {
    var t, i;
    return "object" != typeof e && "" !== e && (!!this.isFloat(e) || (t = this.settings, i = new RegExp("^" + (t.currencyPrefix ? "\\" + t.currencyPrefix + "?" : "") + "[-+]?" + (t.currencyPrefix ? "\\" + t.currencyPrefix + "?" : "") + "[0-9]*[\\" + t.decimalSymbol + "]?[0-9]+" + (t.currencySuffix ? "\\" + t.currencySuffix + "?" : "") + "$", "i"), "string" == typeof e && (e = e.replace(new RegExp(t.groupSymbol, "g"), "")), i.test(e)));
  }
  isHex(e) {
    return /^(0x)?[0-9a-fA-F]+$/.test(e);
  }
  isAlphaNumeric(e) {
    return /^[a-zA-Z0-9_-]+$/.test(e);
  }
  isEmail(e) {
    return /^[a-zA-Z0-9._%\-+]+@[а-яА-Яa-zA-Z0-9.-]+\.[а-яА-Яa-zA-Z]+$/.test(e);
  }
  isIpAddress(e) {
    return new RegExp("^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$").test(e);
  }
  isDate(i, e, t) {
    if (!i)
      return false;
    var s = "Invalid Date";
    let l, r, a;
    if (null == e && (e = this.settings.dateFormat), "function" == typeof i.getFullYear)
      a = i.getFullYear(), l = i.getMonth() + 1, r = i.getDate();
    else if (parseInt(i) == i && 0 < parseInt(i))
      i = new Date(parseInt(i)), a = i.getFullYear(), l = i.getMonth() + 1, r = i.getDate();
    else {
      if (i = String(i), new RegExp("mon", "ig").test(e)) {
        e = e.replace(/month/gi, "m").replace(/mon/gi, "m").replace(/dd/gi, "d").replace(/[, ]/gi, "/").replace(/\/\//g, "/").toLowerCase(), i = i.replace(/[, ]/gi, "/").replace(/\/\//g, "/").toLowerCase();
        for (let e2 = 0, t2 = this.settings.fullmonths.length; e2 < t2; e2++) {
          var n = this.settings.fullmonths[e2];
          i = i.replace(new RegExp(n, "ig"), parseInt(e2) + 1).replace(new RegExp(n.substr(0, 3), "ig"), parseInt(e2) + 1);
        }
      }
      var o = i.replace(/-/g, "/").replace(/\./g, "/").toLowerCase().split("/"), e = e.replace(/-/g, "/").replace(/\./g, "/").toLowerCase();
      "mm/dd/yyyy" === e && (l = o[0], r = o[1], a = o[2]), "m/d/yyyy" === e && (l = o[0], r = o[1], a = o[2]), "dd/mm/yyyy" === e && (l = o[1], r = o[0], a = o[2]), "d/m/yyyy" === e && (l = o[1], r = o[0], a = o[2]), "yyyy/dd/mm" === e && (l = o[2], r = o[1], a = o[0]), "yyyy/d/m" === e && (l = o[2], r = o[1], a = o[0]), "yyyy/mm/dd" === e && (l = o[1], r = o[2], a = o[0]), "yyyy/m/d" === e && (l = o[1], r = o[2], a = o[0]), "mm/dd/yy" === e && (l = o[0], r = o[1], a = o[2]), "m/d/yy" === e && (l = o[0], r = o[1], a = parseInt(o[2]) + 1900), "dd/mm/yy" === e && (l = o[1], r = o[0], a = parseInt(o[2]) + 1900), "d/m/yy" === e && (l = o[1], r = o[0], a = parseInt(o[2]) + 1900), "yy/dd/mm" === e && (l = o[2], r = o[1], a = parseInt(o[0]) + 1900), "yy/d/m" === e && (l = o[2], r = o[1], a = parseInt(o[0]) + 1900), "yy/mm/dd" === e && (l = o[1], r = o[2], a = parseInt(o[0]) + 1900), "yy/m/d" === e && (l = o[1], r = o[2], a = parseInt(o[0]) + 1900);
    }
    return !!this.isInt(a) && !!this.isInt(l) && !!this.isInt(r) && (a = +a, l = +l, r = +r, (s = new Date(a, l - 1, r)).setFullYear(a), null != l) && "Invalid Date" !== String(s) && s.getMonth() + 1 === l && s.getDate() === r && s.getFullYear() === a && (true !== t || s);
  }
  isTime(e, t) {
    if (null == e)
      return false;
    let i, s, l;
    s = 0 <= (e = (e = String(e)).toUpperCase()).indexOf("AM");
    var r = (l = 0 <= e.indexOf("PM")) || s, e = (i = r ? 12 : 24, (e = e.replace("AM", "").replace("PM", "").trim()).split(":"));
    let a = parseInt(e[0] || 0), n = parseInt(e[1] || 0), o = parseInt(e[2] || 0);
    return (r && 1 === e.length || 2 === e.length || 3 === e.length) && !("" === e[0] || a < 0 || a > i || !this.isInt(e[0]) || 2 < e[0].length || 1 < e.length && ("" === e[1] || n < 0 || 59 < n || !this.isInt(e[1]) || 2 !== e[1].length) || 2 < e.length && ("" === e[2] || o < 0 || 59 < o || !this.isInt(e[2]) || 2 !== e[2].length) || !(r || i !== a || 0 === n && 0 === o) || r && 1 === e.length && 0 === a) && (true !== t || (l && 12 !== a && (a += 12), s && 12 === a && (a += 12), { hours: a, minutes: n, seconds: o }));
  }
  isDateTime(e, t, i) {
    var s;
    return "function" == typeof e.getFullYear ? true !== i || e : (s = parseInt(e)) === e ? !(s < 0) && (true !== i || new Date(s)) : (s = String(e).indexOf(" ")) < 0 ? !(String(e).indexOf("T") < 0 || "Invalid Date" == String(new Date(e))) && (true !== i || new Date(e)) : (t = (t = null == t ? this.settings.datetimeFormat : t).split("|"), e = [e.substr(0, s), e.substr(s).trim()], t[0] = t[0].trim(), t[1] && (t[1] = t[1].trim()), s = this.isDate(e[0], t[0], true), t = this.isTime(e[1], true), false !== s && false !== t && (true !== i || (s.setHours(t.hours), s.setMinutes(t.minutes), s.setSeconds(t.seconds), s)));
  }
  age(e) {
    let t;
    if ("" === e || null == e)
      return "";
    if (t = "function" == typeof e.getFullYear ? e : parseInt(e) == e && 0 < parseInt(e) ? new Date(parseInt(e)) : new Date(e), "Invalid Date" === String(t))
      return "";
    e = ((/* @__PURE__ */ new Date()).getTime() - t.getTime()) / 1e3;
    let i = "", s = "";
    return e < 0 ? (i = 0, s = "sec") : e < 60 ? (i = Math.floor(e), s = "sec", e < 0 && (i = 0, s = "sec")) : e < 3600 ? (i = Math.floor(e / 60), s = "min") : e < 86400 ? (i = Math.floor(e / 60 / 60), s = "hour") : e < 2592e3 ? (i = Math.floor(e / 24 / 60 / 60), s = "day") : e < 31536e3 ? (i = Math.floor(e / 30 / 24 / 60 / 60 * 10) / 10, s = "month") : e < 126144e3 ? (i = Math.floor(e / 365 / 24 / 60 / 60 * 10) / 10, s = "year") : 126144e3 <= e && (i = Math.floor(e / 365.25 / 24 / 60 / 60 * 10) / 10, s = "year"), i + " " + s + (1 < i ? "s" : "");
  }
  interval(e) {
    let t = "";
    return t = e < 100 ? "< 0.01 sec" : e < 1e3 ? Math.floor(e / 10) / 100 + " sec" : e < 1e4 ? Math.floor(e / 100) / 10 + " sec" : e < 6e4 ? Math.floor(e / 1e3) + " secs" : e < 36e5 ? Math.floor(e / 6e4) + " mins" : e < 864e5 ? Math.floor(e / 36e5 * 10) / 10 + " hours" : e < 2628e6 ? Math.floor(e / 864e5 * 10) / 10 + " days" : e < 31536e6 ? Math.floor(e / 2628e6 * 10) / 10 + " months" : Math.floor(e / 31536e5) / 10 + " years";
  }
  date(e) {
    if ("" === e || null == e || "object" == typeof e && !e.getMonth)
      return "";
    let t = new Date(e);
    if (this.isInt(e) && (t = new Date(Number(e))), "Invalid Date" === String(t))
      return "";
    var e = this.settings.shortmonths, i = /* @__PURE__ */ new Date(), s = /* @__PURE__ */ new Date(), l = (s.setTime(s.getTime() - 864e5), e[t.getMonth()] + " " + t.getDate() + ", " + t.getFullYear()), i = e[i.getMonth()] + " " + i.getDate() + ", " + i.getFullYear(), e = e[s.getMonth()] + " " + s.getDate() + ", " + s.getFullYear(), s = t.getHours() - (12 < t.getHours() ? 12 : 0) + ":" + (t.getMinutes() < 10 ? "0" : "") + t.getMinutes() + " " + (12 <= t.getHours() ? "pm" : "am");
    let r = l == i ? s : l;
    return '<span title="' + l + " " + (t.getHours() - (12 < t.getHours() ? 12 : 0) + ":" + (t.getMinutes() < 10 ? "0" : "") + t.getMinutes() + ":" + (t.getSeconds() < 10 ? "0" : "") + t.getSeconds() + " " + (12 <= t.getHours() ? "pm" : "am")) + '">' + (r = l == e ? this.lang("Yesterday") : r) + "</span>";
  }
  formatSize(e) {
    var t;
    return this.isFloat(e) && "" !== e ? 0 === (e = parseFloat(e)) ? 0 : (t = parseInt(Math.floor(Math.log(e) / Math.log(1024))), (Math.floor(e / Math.pow(1024, t) * 10) / 10).toFixed(0 === t ? 0 : 1) + " " + (["Bt", "KB", "MB", "GB", "TB", "PB", "EB", "ZB"][t] || "??")) : "";
  }
  formatNumber(e, t, i) {
    return null == e || "" === e || "object" == typeof e ? "" : (i = { minimumFractionDigits: parseInt(t), maximumFractionDigits: parseInt(t), useGrouping: !!i }, (null == t || t < 0) && (i.minimumFractionDigits = 0, i.maximumFractionDigits = 20), parseFloat(e).toLocaleString(this.settings.locale, i));
  }
  formatDate(e, t) {
    if (t = t || this.settings.dateFormat, "" === e || null == e || "object" == typeof e && !e.getMonth)
      return "";
    let i = new Date(e);
    var s, l;
    return this.isInt(e) && (i = new Date(Number(e))), "Invalid Date" === String(i) ? "" : (e = i.getFullYear(), s = i.getMonth(), l = i.getDate(), t.toLowerCase().replace("month", this.settings.fullmonths[s]).replace("mon", this.settings.shortmonths[s]).replace(/yyyy/g, ("000" + e).slice(-4)).replace(/yyy/g, ("000" + e).slice(-4)).replace(/yy/g, ("0" + e).slice(-2)).replace(/(^|[^a-z$])y/g, "$1" + e).replace(/mm/g, ("0" + (s + 1)).slice(-2)).replace(/dd/g, ("0" + l).slice(-2)).replace(/th/g, 1 == l ? "st" : "th").replace(/th/g, 2 == l ? "nd" : "th").replace(/th/g, 3 == l ? "rd" : "th").replace(/(^|[^a-z$])m/g, "$1" + (s + 1)).replace(/(^|[^a-z$])d/g, "$1" + l));
  }
  formatTime(e, t) {
    if (t = t || this.settings.timeFormat, "" === e || null == e || "object" == typeof e && !e.getMonth)
      return "";
    let i = new Date(e);
    if (this.isInt(e) && (i = new Date(Number(e))), this.isTime(e) && (e = this.isTime(e, true), (i = /* @__PURE__ */ new Date()).setHours(e.hours), i.setMinutes(e.minutes)), "Invalid Date" === String(i))
      return "";
    let s = "am", l = i.getHours();
    e = i.getHours();
    let r = i.getMinutes(), a = i.getSeconds();
    return r < 10 && (r = "0" + r), a < 10 && (a = "0" + a), -1 === t.indexOf("am") && -1 === t.indexOf("pm") || (12 <= l && (s = "pm"), 12 < l && (l -= 12), 0 === l && (l = 12)), t.toLowerCase().replace("am", s).replace("pm", s).replace("hhh", l < 10 ? "0" + l : l).replace("hh24", e < 10 ? "0" + e : e).replace("h24", e).replace("hh", l).replace("mm", r).replace("mi", r).replace("ss", a).replace(/(^|[^a-z$])h/g, "$1" + l).replace(/(^|[^a-z$])m/g, "$1" + r).replace(/(^|[^a-z$])s/g, "$1" + a);
  }
  formatDateTime(e, t) {
    let i;
    return "" === e || null == e || "object" == typeof e && !e.getMonth ? "" : ("string" != typeof t ? i = [this.settings.dateFormat, this.settings.timeFormat] : ((i = t.split("|"))[0] = i[0].trim(), i[1] = 1 < i.length ? i[1].trim() : this.settings.timeFormat), "h12" === i[1] && (i[1] = "h:m pm"), "h24" === i[1] && (i[1] = "h24:m"), this.formatDate(e, i[0]) + " " + this.formatTime(e, i[1]));
  }
  stripSpaces(i) {
    if (null != i)
      switch (typeof i) {
        case "number":
          break;
        case "string":
          i = String(i).replace(/(?:\r\n|\r|\n)/g, " ").replace(/\s\s+/g, " ").trim();
          break;
        case "object":
          Array.isArray(i) ? (i = this.extend([], i)).forEach((e, t) => {
            i[t] = this.stripSpaces(e);
          }) : (i = this.extend({}, i), Object.keys(i).forEach((e) => {
            i[e] = this.stripSpaces(i[e]);
          }));
      }
    return i;
  }
  stripTags(i) {
    if (null != i)
      switch (typeof i) {
        case "number":
          break;
        case "string":
          i = String(i).replace(/<(?:[^>=]|='[^']*'|="[^"]*"|=[^'"][^\s>]*)*>/gi, "");
          break;
        case "object":
          Array.isArray(i) ? (i = this.extend([], i)).forEach((e, t) => {
            i[t] = this.stripTags(e);
          }) : (i = this.extend({}, i), Object.keys(i).forEach((e) => {
            i[e] = this.stripTags(i[e]);
          }));
      }
    return i;
  }
  encodeTags(i) {
    if (null != i)
      switch (typeof i) {
        case "number":
          break;
        case "string":
          i = String(i).replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
          break;
        case "object":
          Array.isArray(i) ? (i = this.extend([], i)).forEach((e, t) => {
            i[t] = this.encodeTags(e);
          }) : (i = this.extend({}, i), Object.keys(i).forEach((e) => {
            i[e] = this.encodeTags(i[e]);
          }));
      }
    return i;
  }
  decodeTags(i) {
    if (null != i)
      switch (typeof i) {
        case "number":
          break;
        case "string":
          i = String(i).replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, '"').replace(/&amp;/g, "&");
          break;
        case "object":
          Array.isArray(i) ? (i = this.extend([], i)).forEach((e, t) => {
            i[t] = this.decodeTags(e);
          }) : (i = this.extend({}, i), Object.keys(i).forEach((e) => {
            i[e] = this.decodeTags(i[e]);
          }));
      }
    return i;
  }
  escapeId(e) {
    return "" === e || null == e ? "" : (e + "").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, (e2, t) => t ? "\0" === e2 ? "�" : e2.slice(0, -1) + "\\" + e2.charCodeAt(e2.length - 1).toString(16) + " " : "\\" + e2);
  }
  unescapeId(e) {
    return "" === e || null == e ? "" : e.replace(/\\[\da-fA-F]{1,6}[\x20\t\r\n\f]?|\\([^\r\n\f])/g, (e2, t) => {
      e2 = "0x" + e2.slice(1) - 65536;
      return t || (e2 < 0 ? String.fromCharCode(65536 + e2) : String.fromCharCode(e2 >> 10 | 55296, 1023 & e2 | 56320));
    });
  }
  base64encode(e) {
    return btoa(e);
  }
  base64decode(e) {
    return atob(e);
  }
  async sha256(e) {
    e = new TextEncoder().encode(e);
    return crypto.subtle.digest("SHA-256", e).then((e2) => {
      return Array.from(new Uint8Array(e2)).map((e3) => e3.toString(16).padStart(2, "0")).join("");
    });
  }
  transition(r, a, n, o) {
    return new Promise((e, t) => {
      var i = getComputedStyle(r);
      let s = parseInt(i.width), l = parseInt(i.height);
      if (r && a) {
        switch (r.parentNode.style.cssText += "perspective: 900px; overflow: hidden;", r.style.cssText += "; position: absolute; z-index: 1019; backface-visibility: hidden", a.style.cssText += "; position: absolute; z-index: 1020; backface-visibility: hidden", n) {
          case "slide-left":
            r.style.cssText += "overflow: hidden; transform: translate3d(0, 0, 0)", a.style.cssText += "overflow: hidden; transform: translate3d(" + s + "px, 0, 0)", query(a).show(), setTimeout(() => {
              a.style.cssText += "transition: 0.5s; transform: translate3d(0, 0, 0)", r.style.cssText += "transition: 0.5s; transform: translate3d(-" + s + "px, 0, 0)";
            }, 1);
            break;
          case "slide-right":
            r.style.cssText += "overflow: hidden; transform: translate3d(0, 0, 0)", a.style.cssText += "overflow: hidden; transform: translate3d(-" + s + "px, 0, 0)", query(a).show(), setTimeout(() => {
              a.style.cssText += "transition: 0.5s; transform: translate3d(0px, 0, 0)", r.style.cssText += "transition: 0.5s; transform: translate3d(" + s + "px, 0, 0)";
            }, 1);
            break;
          case "slide-down":
            r.style.cssText += "overflow: hidden; z-index: 1; transform: translate3d(0, 0, 0)", a.style.cssText += "overflow: hidden; z-index: 0; transform: translate3d(0, 0, 0)", query(a).show(), setTimeout(() => {
              a.style.cssText += "transition: 0.5s; transform: translate3d(0, 0, 0)", r.style.cssText += "transition: 0.5s; transform: translate3d(0, " + l + "px, 0)";
            }, 1);
            break;
          case "slide-up":
            r.style.cssText += "overflow: hidden; transform: translate3d(0, 0, 0)", a.style.cssText += "overflow: hidden; transform: translate3d(0, " + l + "px, 0)", query(a).show(), setTimeout(() => {
              a.style.cssText += "transition: 0.5s; transform: translate3d(0, 0, 0)", r.style.cssText += "transition: 0.5s; transform: translate3d(0, 0, 0)";
            }, 1);
            break;
          case "flip-left":
            r.style.cssText += "overflow: hidden; transform: rotateY(0deg)", a.style.cssText += "overflow: hidden; transform: rotateY(-180deg)", query(a).show(), setTimeout(() => {
              a.style.cssText += "transition: 0.5s; transform: rotateY(0deg)", r.style.cssText += "transition: 0.5s; transform: rotateY(180deg)";
            }, 1);
            break;
          case "flip-right":
            r.style.cssText += "overflow: hidden; transform: rotateY(0deg)", a.style.cssText += "overflow: hidden; transform: rotateY(180deg)", query(a).show(), setTimeout(() => {
              a.style.cssText += "transition: 0.5s; transform: rotateY(0deg)", r.style.cssText += "transition: 0.5s; transform: rotateY(-180deg)";
            }, 1);
            break;
          case "flip-down":
            r.style.cssText += "overflow: hidden; transform: rotateX(0deg)", a.style.cssText += "overflow: hidden; transform: rotateX(180deg)", query(a).show(), setTimeout(() => {
              a.style.cssText += "transition: 0.5s; transform: rotateX(0deg)", r.style.cssText += "transition: 0.5s; transform: rotateX(-180deg)";
            }, 1);
            break;
          case "flip-up":
            r.style.cssText += "overflow: hidden; transform: rotateX(0deg)", a.style.cssText += "overflow: hidden; transform: rotateX(-180deg)", query(a).show(), setTimeout(() => {
              a.style.cssText += "transition: 0.5s; transform: rotateX(0deg)", r.style.cssText += "transition: 0.5s; transform: rotateX(180deg)";
            }, 1);
            break;
          case "pop-in":
            r.style.cssText += "overflow: hidden; transform: translate3d(0, 0, 0)", a.style.cssText += "overflow: hidden; transform: translate3d(0, 0, 0); transform: scale(.8); opacity: 0;", query(a).show(), setTimeout(() => {
              a.style.cssText += "transition: 0.5s; transform: scale(1); opacity: 1;", r.style.cssText += "transition: 0.5s;";
            }, 1);
            break;
          case "pop-out":
            r.style.cssText += "overflow: hidden; transform: translate3d(0, 0, 0); transform: scale(1); opacity: 1;", a.style.cssText += "overflow: hidden; transform: translate3d(0, 0, 0); opacity: 0;", query(a).show(), setTimeout(() => {
              a.style.cssText += "transition: 0.5s; opacity: 1;", r.style.cssText += "transition: 0.5s; transform: scale(1.7); opacity: 0;";
            }, 1);
            break;
          default:
            r.style.cssText += "overflow: hidden; transform: translate3d(0, 0, 0)", a.style.cssText += "overflow: hidden; translate3d(0, 0, 0); opacity: 0;", query(a).show(), setTimeout(() => {
              a.style.cssText += "transition: 0.5s; opacity: 1;", r.style.cssText += "transition: 0.5s";
            }, 1);
        }
        setTimeout(() => {
          "slide-down" === n && (query(r).css("z-index", "1019"), query(a).css("z-index", "1020")), a && query(a).css({ opacity: "1" }).css({ transition: "", transform: "" }), r && query(r).css({ opacity: "1" }).css({ transition: "", transform: "" }), "function" == typeof o && o(), e();
        }, 500);
      } else
        console.log("ERROR: Cannot do transition when one of the divs is null");
    });
  }
  lock(l, r = {}) {
    if (null != l) {
      "string" == typeof r && (r = { msg: r }), arguments[2] && (r.spinner = arguments[2]), r = this.extend({ spinner: false }, r), (l == null ? void 0 : l[0]) instanceof Node && (l = Array.isArray(l) ? l : l.get()), r.msg || 0 === r.msg || (r.msg = ""), this.unlock(l);
      var a = query(l).get(0);
      let e = a.scrollWidth, t = a.scrollHeight, i = ("BODY" == a.tagName && (e < innerWidth && (e = innerWidth), t < innerHeight) && (t = innerHeight), query(l).prepend(`<div class="w2ui-lock" style="height: ${t}px; width: ${e}px"></div><div class="w2ui-lock-msg"></div>`), query(l).find(".w2ui-lock"));
      a = query(l).find(".w2ui-lock-msg"), l = (r.msg || a.css({ "background-color": "transparent", "background-image": "none", border: "0px", "box-shadow": "none" }), true === r.spinner && (r.msg = `<div class="w2ui-spinner" ${r.msg ? "" : 'style="width: 35px; height: 35px"'}></div>` + r.msg), r.msg ? a.html(r.msg).css("display", "block") : a.remove(), null != r.opacity && i.css("opacity", r.opacity), i.css({ display: "block" }), r.bgColor && i.css({ "background-color": r.bgColor }), getComputedStyle(i.get(0)));
      let s = l.opacity ?? 0.15;
      i.on("mousedown", function() {
        "function" == typeof r.onClick ? r.onClick() : i.css({ transition: ".2s", opacity: 1.5 * s });
      }).on("mouseup", function() {
        "function" != typeof r.onClick && i.css({ transition: ".2s", opacity: s });
      }).on("mousewheel", function(e2) {
        e2 && (e2.stopPropagation(), e2.preventDefault());
      });
    }
  }
  unlock(e, t) {
    var i;
    null != e && (clearTimeout(e._prevUnlock), (e == null ? void 0 : e[0]) instanceof Node && (e = Array.isArray(e) ? e : e.get()), this.isInt(t) && 0 < t ? (query(e).find(".w2ui-lock").css({ transition: t / 1e3 + "s", opacity: 0 }), i = query(e).get(0), clearTimeout(i._prevUnlock), i._prevUnlock = setTimeout(() => {
      query(e).find(".w2ui-lock").remove();
    }, t)) : query(e).find(".w2ui-lock").remove(), query(e).find(".w2ui-lock-msg").remove());
  }
  message(r, s) {
    var _a, _b;
    let e, t, l;
    var i = () => {
      var _a2;
      var e2 = query(r == null ? void 0 : r.box).find(".w2ui-message");
      0 != e2.length && "function" == typeof ((_a2 = s = e2.get(0)._msg_options || {}) == null ? void 0 : _a2.close) && s.close();
    };
    let a = (e2) => {
      var _a2, _b2;
      var t2, i2 = e2.box._msg_prevFocus;
      query(r.box).find(".w2ui-message").length <= 1 ? r.owner ? r.owner.unlock(r.param, 150) : this.unlock(r.box, 150) : query(r.box).find(`#w2ui-message-${(_a2 = r.owner) == null ? void 0 : _a2.name}-` + (e2.msgIndex - 1)).css("z-index", 1500), i2 ? 0 < (t2 = query(i2).closest(".w2ui-message")).length ? t2.get(0)._msg_options.setFocus(i2) : i2.focus() : "function" == typeof ((_b2 = r.owner) == null ? void 0 : _b2.focus) && r.owner.focus(), query(e2.box).remove(), 0 === e2.msgIndex && (c.css("z-index", e2.tmp.zIndex), query(r.box).css("overflow", e2.tmp.overflow)), e2.trigger && l.finish();
    };
    if ("object" != typeof (s = "string" != typeof s && "number" != typeof s ? s : { width: String(s).length < 300 ? 350 : 550, height: String(s).length < 300 ? 170 : 250, text: String(s) }))
      return void i();
    null != s.text && (s.body = `<div class="w2ui-centered w2ui-msg-text">${s.text}</div>`), null == s.width && (s.width = 350), null == s.height && (s.height = 170), null == s.hideOn && (s.hideOn = ["esc"]), null == s.on && (h = s, s = new w2base(), w2utils.extend(s, h)), s.on("open", (e2) => {
      w2utils.bindEvents(query(s.box).find(".w2ui-eaction"), s), query(e2.detail.box).find("button, input, textarea, [name=hidden-first]").off(".message").on("keydown.message", function(e3) {
        27 == e3.keyCode && s.hideOn.includes("esc") && (s.cancelAction ? s.action(s.cancelAction) : s.close());
      }), setTimeout(() => s.setFocus(s.focus), 300);
    }), s.off(".prom");
    let n = { self: s, action(e2) {
      return s.on("action.prom", e2), n;
    }, close(e2) {
      return s.on("close.prom", e2), n;
    }, open(e2) {
      return s.on("open.prom", e2), n;
    }, then(e2) {
      return s.on("open:after.prom", e2), n;
    } }, o = (null == s.actions && null == s.buttons && null == s.html && (s.actions = { Ok(e2) {
      e2.detail.self.close();
    } }), s.off(".buttons"), null != s.actions && (s.buttons = "", Object.keys(s.actions).forEach((e2) => {
      var t2 = s.actions[e2];
      let i2 = e2;
      "function" == typeof t2 && (s.buttons += `<button class="w2ui-btn w2ui-eaction" data-click='["action","${e2}","event"]' name="${e2}">${e2}</button>`), "object" == typeof t2 && (s.buttons += `<button class="w2ui-btn w2ui-eaction ${t2.class || ""}" name="${e2}" data-click='["action","${e2}","event"]'
                        style="${t2.style ?? ""}" ${t2.attrs ?? ""}>${t2.text || e2}</button>`, i2 = Array.isArray(s.actions) ? t2.text : e2), "string" == typeof t2 && (s.buttons += `<button class="w2ui-btn w2ui-eaction" name="${t2}" data-click='["action","${t2}","event"]'>${t2}</button>`, i2 = t2), "string" == typeof i2 && (i2 = i2[0].toLowerCase() + i2.substr(1).replace(/\s+/g, "")), n[i2] = function(t3) {
        return s.on("action.buttons", (e3) => {
          e3.detail.action[0].toLowerCase() + e3.detail.action.substr(1).replace(/\s+/g, "") == i2 && t3(e3);
        }), n;
      };
    })), Array("html", "body", "buttons").forEach((e2) => {
      s[e2] = String(s[e2] ?? "").trim();
    }), "" === s.body && "" === s.buttons || (s.html = `
                <div class="w2ui-message-body">${s.body || ""}</div>
                <div class="w2ui-message-buttons">${s.buttons || ""}</div>
            `), getComputedStyle(query(r.box).get(0)));
    var h = parseFloat(o.width), d = parseFloat(o.height);
    let u = 0, c = (0 < query(r.after).length && (o = getComputedStyle(query(r.after).get(0)), u = parseInt("none" != o.display ? parseInt(o.height) : 0)), s.width > h && (s.width = h - 10), s.height > d - u && (s.height = d - 10 - u), s.originalWidth = s.width, s.originalHeight = s.height, parseInt(s.width) < 0 && (s.width = h + s.width), parseInt(s.width) < 10 && (s.width = 10), parseInt(s.height) < 0 && (s.height = d + s.height - u), parseInt(s.height) < 10 && (s.height = 10), s.originalHeight < 0 && (s.height = d + s.originalHeight - u), s.originalWidth < 0 && (s.width = h + 2 * s.originalWidth), query(r.box).find(r.after));
    return s.tmp || (s.tmp = { zIndex: c.css("z-index"), overflow: o.overflow }), "" === s.html && "" === s.body && "" === s.buttons ? i() : (s.msgIndex = query(r.box).find(".w2ui-message").length, 0 === s.msgIndex && "function" == typeof this.lock && (query(r.box).css("overflow", "hidden"), r.owner ? r.owner.lock(r.param) : this.lock(r.box)), query(r.box).find(".w2ui-message").css("z-index", 1390), c.css("z-index", 1501), d = `
                <div id="w2ui-message-${(_a = r.owner) == null ? void 0 : _a.name}-${s.msgIndex}" class="w2ui-message" data-mousedown="stop"
                    style="z-index: 1500; left: ${(h - s.width) / 2}px; top: ${u}px;
                        width: ${s.width}px; height: ${s.height}px; transform: translateY(-${s.height}px)"
                    ${s.hideOn.includes("click") ? r.param ? `data-click='["message", "${r.param}"]` : 'data-click="message"' : ""}>
                    <span name="hidden-first" tabindex="0" style="position: absolute; top: 0; outline: none"></span>
                    ${s.html}
                    <span name="hidden-last" tabindex="0" style="position: absolute; top: 0; outline: none"></span>
                </div>`, 0 < query(r.after).length ? query(r.box).find(r.after).after(d) : query(r.box).prepend(d), s.box = query(r.box).find(`#w2ui-message-${(_b = r.owner) == null ? void 0 : _b.name}-` + s.msgIndex)[0], w2utils.bindEvents(s.box, this), query(s.box).addClass("animating"), (s.box._msg_options = s).box._msg_prevFocus = document.activeElement, setTimeout(() => {
      var _a2;
      true === (l = s.trigger("open", { target: this.name, box: s.box, self: s })).isCancelled ? (query(r.box).find(`#w2ui-message-${(_a2 = r.owner) == null ? void 0 : _a2.name}-` + s.msgIndex).remove(), 0 === s.msgIndex && (c.css("z-index", s.tmp.zIndex), query(r.box).css("overflow", s.tmp.overflow))) : query(s.box).css({ transition: "0.3s", transform: "translateY(0px)" });
    }, 0), t = setTimeout(() => {
      var _a2;
      query(r.box).find(`#w2ui-message-${(_a2 = r.owner) == null ? void 0 : _a2.name}-` + s.msgIndex).removeClass("animating").css({ transition: "0s" }), l.finish();
    }, 300)), s.action = (e2, t2) => {
      let i2 = s.actions[e2];
      i2 instanceof Object && i2.onClick && (i2 = i2.onClick);
      e2 = s.trigger("action", { target: this.name, action: e2, self: s, originalEvent: t2, value: s.input ? s.input.value : null });
      true !== e2.isCancelled && ("function" == typeof i2 && i2(e2), e2.finish());
    }, s.close = () => {
      var _a2;
      true !== (l = s.trigger("close", { target: "self", box: s.box, self: s })).isCancelled && (clearTimeout(t), query(s.box).hasClass("animating") ? (clearTimeout(e), a(s)) : (query(s.box).addClass("w2ui-closing animating").css({ transition: "0.15s", transform: "translateY(-" + s.height + "px)" }), 0 !== s.msgIndex && query(r.box).find(`#w2ui-message-${(_a2 = r.owner) == null ? void 0 : _a2.name}-` + (s.msgIndex - 1)).css("z-index", 1499), e = setTimeout(() => {
        a(s);
      }, 150)));
    }, s.setFocus = (e2) => {
      var _a2, _b2;
      var t2 = query(r.box).find(".w2ui-message").length - 1;
      let s2 = query(r.box).find(`#w2ui-message-${(_a2 = r.owner) == null ? void 0 : _a2.name}-` + t2), l2 = "input, button, select, textarea, [contentEditable], .w2ui-input";
      (_b2 = null != e2 ? isNaN(e2) ? s2.find(l2).filter(e2).get(0) : s2.find(l2).get(e2) : s2.find("[name=hidden-first]").get(0)) == null ? void 0 : _b2.focus(), query(r.box).find(".w2ui-message").find(l2 + ",[name=hidden-first],[name=hidden-last]").off(".keep-focus"), query(s2).find(l2 + ",[name=hidden-first],[name=hidden-last]").on("blur.keep-focus", function(e3) {
        setTimeout(() => {
          var _a3, _b3, _c;
          var e4 = document.activeElement, t3 = 0 < query(s2).find(l2).filter(e4).length, i2 = query(e4).attr("name");
          !t3 && e4 && e4 !== document.body && ((_a3 = query(s2).find(l2).get(0)) == null ? void 0 : _a3.focus()), "hidden-last" == i2 && ((_b3 = query(s2).find(l2).get(0)) == null ? void 0 : _b3.focus()), "hidden-first" == i2 && ((_c = query(s2).find(l2).get(-1)) == null ? void 0 : _c.focus());
        }, 1);
      });
    }, n;
  }
  notify(i, s) {
    return new Promise((t) => {
      if ("object" == typeof i && (i = (s = i).text), (s = s || {}).where = s.where ?? document.body, s.timeout = s.timeout ?? 15e3, "function" == typeof this.tmp.notify_resolve && (this.tmp.notify_resolve(), query(this.tmp.notify_where).find("#w2ui-notify").remove()), this.tmp.notify_resolve = t, this.tmp.notify_where = s.where, clearTimeout(this.tmp.notify_timer), i) {
        if ("object" == typeof s.actions) {
          let t2 = {};
          Object.keys(s.actions).forEach((e2) => {
            t2[e2] = `<a class="w2ui-notify-link" value="${e2}">${e2}</a>`;
          }), i = this.execTemplate(i, t2);
        }
        var e = `
                    <div id="w2ui-notify">
                        <div class="${s.class} ${s.error ? "w2ui-notify-error" : ""}">
                            ${i}
                            <span class="w2ui-notify-close w2ui-icon-cross"></span>
                        </div>
                    </div>`;
        query(s.where).append(e), query(s.where).find("#w2ui-notify").find(".w2ui-notify-close").on("click", (e2) => {
          query(s.where).find("#w2ui-notify").remove(), t();
        }), s.actions && query(s.where).find("#w2ui-notify .w2ui-notify-link").on("click", (e2) => {
          e2 = query(e2.target).attr("value");
          s.actions[e2](), query(s.where).find("#w2ui-notify").remove(), t();
        }), 0 < s.timeout && (this.tmp.notify_timer = setTimeout(() => {
          query(s.where).find("#w2ui-notify").remove(), t();
        }, s.timeout));
      }
    });
  }
  confirm(e, t) {
    w2utils.normButtons(t = "string" == typeof t ? { text: t } : t, { yes: "Yes", no: "No" });
    e = w2utils.message(e, t);
    return e && e.action((e2) => {
      e2.detail.self.close();
    }), e;
  }
  normButtons(i, s) {
    i.actions = i.actions ?? {};
    var e = Object.keys(s);
    return e.forEach((t) => {
      var e2 = i["btn_" + t];
      e2 && (s[t] = { text: w2utils.lang(e2.text ?? ""), class: e2.class ?? "", style: e2.style ?? "", attrs: e2.attrs ?? "" }, delete i["btn_" + t]), Array("text", "class", "style", "attrs").forEach((e3) => {
        i[t + "_" + e3] && ("string" == typeof s[t] && (s[t] = { text: s[t] }), s[t][e3] = i[t + "_" + e3], delete i[t + "_" + e3]);
      });
    }), e.includes("yes") && e.includes("no") && (w2utils.settings.macButtonOrder ? w2utils.extend(i.actions, { no: s.no, yes: s.yes }) : w2utils.extend(i.actions, { yes: s.yes, no: s.no })), e.includes("ok") && e.includes("cancel") && (w2utils.settings.macButtonOrder ? w2utils.extend(i.actions, { cancel: s.cancel, ok: s.ok }) : w2utils.extend(i.actions, { ok: s.ok, cancel: s.cancel })), i;
  }
  getSize(e, t) {
    let i = 0;
    if (0 < (e = query(e)).length) {
      e = e[0];
      var s = getComputedStyle(e);
      switch (t) {
        case "width":
          i = parseFloat(s.width), "auto" === s.width && (i = 0);
          break;
        case "height":
          i = parseFloat(s.height), "auto" === s.height && (i = 0);
          break;
        default:
          i = parseFloat(s[t] ?? 0) || 0;
      }
    }
    return i;
  }
  getStrWidth(e, t) {
    query("body").append(`
            <div id="_tmp_width" style="position: absolute; top: -9000px; ${t || ""}">
                ${this.encodeTags(e)}
            </div>`);
    t = query("#_tmp_width")[0].clientWidth;
    return query("#_tmp_width").remove(), t;
  }
  execTemplate(e, i) {
    return "string" == typeof e && i && "object" == typeof i ? e.replace(/\${([^}]+)?}/g, function(e2, t) {
      return i[t] || t;
    }) : e;
  }
  marker(e, s, l = { onlyFirst: false, wholeWord: false }) {
    Array.isArray(s) || (s = null != s && "" !== s ? [s] : []);
    let r = l.wholeWord;
    query(e).each((t) => {
      for (var e2 = t, i = /\<span class=\"w2ui\-marker\"\>((.|\n|\r)*)\<\/span\>/gi; -1 !== e2.innerHTML.indexOf('<span class="w2ui-marker"'); )
        e2.innerHTML = e2.innerHTML.replace(i, "$1");
      s.forEach((e3) => {
        e3 = (e3 = "string" != typeof e3 ? String(e3) : e3).replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&").replace(/&/g, "&amp;").replace(/</g, "&gt;").replace(/>/g, "&lt;");
        e3 = new RegExp((r ? "\\b" : "") + e3 + (r ? "\\b" : "") + "(?!([^<]+)?>)", "i" + (l.onlyFirst ? "" : "g"));
        t.innerHTML = t.innerHTML.replace(e3, (e4) => '<span class="w2ui-marker">' + e4 + "</span>");
      });
    });
  }
  lang(e, t) {
    if (!e || null == this.settings.phrases || "string" != typeof e || "<=>=".includes(e))
      return this.execTemplate(e, t);
    let i = this.settings.phrases[e];
    return null == i ? (i = e, this.settings.warnNoPhrase && (this.settings.missing || (this.settings.missing = {}), this.settings.missing[e] = "---", this.settings.phrases[e] = "---", console.log(`Missing translation for "%c${e}%c", see %c w2utils.settings.phrases %c with value "---"`, "color: orange", "", "color: #999", ""))) : "---" !== i || this.settings.warnNoPhrase || (i = e), "---" === i && (i = `<span ${this.tooltip(e)}>---</span>`), this.execTemplate(i, t);
  }
  locale(l, i, r) {
    return new Promise((s, t) => {
      if (Array.isArray(l)) {
        this.settings.phrases = {};
        let i2 = [], t2 = {};
        l.forEach((e, t3) => {
          5 === e.length && (e = "locale/" + e.toLowerCase() + ".json", l[t3] = e), i2.push(this.locale(e, true, false));
        }), void Promise.allSettled(i2).then((e) => {
          e.forEach((e2) => {
            e2.value && (t2[e2.value.file] = e2.value.data);
          }), l.forEach((e2) => {
            this.settings = this.extend({}, this.settings, t2[e2]);
          }), s();
        });
      } else
        (l = l || "en-us") instanceof Object ? this.settings = this.extend({}, this.settings, w2locale, l) : (5 === l.length && (l = "locale/" + l.toLowerCase() + ".json"), fetch(l, { method: "GET" }).then((e) => e.json()).then((e) => {
          true !== r && (this.settings = i ? this.extend({}, this.settings, e) : this.extend({}, this.settings, w2locale, { phrases: {} }, e)), s({ file: l, data: e });
        }).catch((e) => {
          console.log("ERROR: Cannot load locale " + l), t(e);
        }));
    });
  }
  scrollBarSize() {
    return this.tmp.scrollBarSize || (query("body").append(`
            <div id="_scrollbar_width" style="position: absolute; top: -300px; width: 100px; height: 100px; overflow-y: scroll;">
                <div style="height: 120px">1</div>
            </div>
        `), this.tmp.scrollBarSize = 100 - query("#_scrollbar_width > div")[0].clientWidth, query("#_scrollbar_width").remove()), this.tmp.scrollBarSize;
  }
  checkName(e) {
    return null == e ? (console.log('ERROR: Property "name" is required but not supplied.'), false) : null != w2ui[e] ? (console.log(`ERROR: Object named "${e}" is already registered as w2ui.${e}.`), false) : !!this.isAlphaNumeric(e) || (console.log('ERROR: Property "name" has to be alpha-numeric (a-z, 0-9, dash and underscore).'), false);
  }
  checkUniqueId(t, i, s, l) {
    Array.isArray(i) || (i = [i]);
    let r = true;
    return i.forEach((e) => {
      e.id === t && (console.log(`ERROR: The item id="${t}" is not unique within the ${s} "${l}".`, i), r = false);
    }), r;
  }
  encodeParams(t, i = "") {
    let s = "";
    return Object.keys(t).forEach((e) => {
      "" != s && (s += "&"), "object" == typeof t[e] ? s += this.encodeParams(t[e], i + e + (i ? "]" : "") + "[") : s += "" + i + e + (i ? "]" : "") + "=" + t[e];
    }), s;
  }
  parseRoute(e) {
    let a = [];
    e = e.replace(/\/\(/g, "(?:/").replace(/\+/g, "__plus__").replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?/g, (e2, t, i, s, l, r) => (a.push({ name: s, optional: !!r }), t = t || "", (r ? "" : t) + "(?:" + (r ? t : "") + (i || "") + (l || (i ? "([^/.]+?)" : "([^/]+?)")) + ")" + (r || ""))).replace(/([\/.])/g, "\\$1").replace(/__plus__/g, "(.+)").replace(/\*/g, "(.*)");
    return { path: new RegExp("^" + e + "$", "i"), keys: a };
  }
  getCursorPosition(e) {
    if (null == e)
      return null;
    let t = 0;
    var i, s = e.ownerDocument || e.document, l = s.defaultView || s.parentWindow;
    let r;
    return ["INPUT", "TEXTAREA"].includes(e.tagName) ? t = e.selectionStart : l.getSelection ? 0 < (r = l.getSelection()).rangeCount && ((i = (l = r.getRangeAt(0)).cloneRange()).selectNodeContents(e), i.setEnd(l.endContainer, l.endOffset), t = i.toString().length) : (r = s.selection) && "Control" !== r.type && (l = r.createRange(), (i = s.body.createTextRange()).moveToElementText(e), i.setEndPoint("EndToEnd", l), t = i.text.length), t;
  }
  setCursorPosition(s, l, t) {
    if (null != s) {
      var r = document.createRange();
      let i, e = window.getSelection();
      if (["INPUT", "TEXTAREA"].includes(s.tagName))
        s.setSelectionRange(l, t ?? l);
      else {
        for (let t2 = 0; t2 < s.childNodes.length; t2++) {
          let e2 = query(s.childNodes[t2]).text();
          if (l <= (e2 = s.childNodes[t2].tagName ? (e2 = query(s.childNodes[t2]).html()).replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&").replace(/&quot;/g, '"').replace(/&nbsp;/g, " ") : e2).length) {
            (i = (i = s.childNodes[t2]).childNodes && 0 < i.childNodes.length ? i.childNodes[0] : i).childNodes && 0 < i.childNodes.length && (i = i.childNodes[0]);
            break;
          }
          l -= e2.length;
        }
        null != i && (l > i.length && (l = i.length), r.setStart(i, l), t ? r.setEnd(i, t) : r.collapse(true), e.removeAllRanges(), e.addRange(r));
      }
    }
  }
  parseColor(e) {
    if ("string" != typeof e)
      return null;
    let t = {};
    if (3 === (e = "#" === (e = e.trim().toUpperCase())[0] ? e.substr(1) : e).length)
      t = { r: parseInt(e[0] + e[0], 16), g: parseInt(e[1] + e[1], 16), b: parseInt(e[2] + e[2], 16), a: 1 };
    else if (6 === e.length)
      t = { r: parseInt(e.substr(0, 2), 16), g: parseInt(e.substr(2, 2), 16), b: parseInt(e.substr(4, 2), 16), a: 1 };
    else if (8 === e.length)
      t = { r: parseInt(e.substr(0, 2), 16), g: parseInt(e.substr(2, 2), 16), b: parseInt(e.substr(4, 2), 16), a: Math.round(parseInt(e.substr(6, 2), 16) / 255 * 100) / 100 };
    else if (4 < e.length && "RGB(" === e.substr(0, 4)) {
      var i = e.replace("RGB", "").replace(/\(/g, "").replace(/\)/g, "").split(",");
      t = { r: parseInt(i[0], 10), g: parseInt(i[1], 10), b: parseInt(i[2], 10), a: 1 };
    } else {
      if (!(5 < e.length && "RGBA(" === e.substr(0, 5)))
        return null;
      i = e.replace("RGBA", "").replace(/\(/g, "").replace(/\)/g, "").split(",");
      t = { r: parseInt(i[0], 10), g: parseInt(i[1], 10), b: parseInt(i[2], 10), a: parseFloat(i[3]) };
    }
    return t;
  }
  hsv2rgb(e, t, i, s) {
    let l, r, a, n, o, h, d, u;
    switch (1 === arguments.length && (t = e.s, i = e.v, s = e.a, e = e.h), h = (i /= 100) * (1 - (t /= 100)), d = i * (1 - (o = 6 * (e /= 360) - (n = Math.floor(6 * e))) * t), u = i * (1 - (1 - o) * t), n % 6) {
      case 0:
        l = i, r = u, a = h;
        break;
      case 1:
        l = d, r = i, a = h;
        break;
      case 2:
        l = h, r = i, a = u;
        break;
      case 3:
        l = h, r = d, a = i;
        break;
      case 4:
        l = u, r = h, a = i;
        break;
      case 5:
        l = i, r = h, a = d;
    }
    return { r: Math.round(255 * l), g: Math.round(255 * r), b: Math.round(255 * a), a: null != s ? s : 1 };
  }
  rgb2hsv(e, t, i, s) {
    1 === arguments.length && (t = e.g, i = e.b, s = e.a, e = e.r);
    let l = Math.max(e, t, i), r = Math.min(e, t, i), a = l - r, n, o = 0 === l ? 0 : a / l, h = l / 255;
    switch (l) {
      case r:
        n = 0;
        break;
      case e:
        n = t - i + a * (t < i ? 6 : 0), n /= 6 * a;
        break;
      case t:
        n = i - e + 2 * a, n /= 6 * a;
        break;
      case i:
        n = e - t + 4 * a, n /= 6 * a;
    }
    return { h: Math.round(360 * n), s: Math.round(100 * o), v: Math.round(100 * h), a: null != s ? s : 1 };
  }
  tooltip(e, t) {
    let i = "mouseenter", s = "mouseleave";
    return t = (t = "object" == typeof e ? e : t) || {}, "string" == typeof e && (t.html = e), t.showOn && (i = t.showOn, delete t.showOn), t.hideOn && (s = t.hideOn, delete t.hideOn), t.name || (t.name = "no-name"), ` on${i}="w2tooltip.show(this, JSON.parse(w2utils.base64decode('${this.base64encode(JSON.stringify(t))}')))" on${s}="w2tooltip.hide('${t.name}')"`;
  }
  isPlainObject(e) {
    return null != e && "[object Object]" === Object.prototype.toString.call(e) && (void 0 === e.constructor || null === (e = Object.getPrototypeOf(e)) || e === Object.prototype);
  }
  clone(e, i) {
    let s;
    return i = Object.assign({ functions: true, elements: true, events: true, exclude: [] }, i ?? {}), Array.isArray(e) ? (s = Array.from(e)).forEach((e2, t) => {
      s[t] = this.clone(e2, i);
    }) : this.isPlainObject(e) ? (s = {}, Object.assign(s, e), i.exclude && i.exclude.forEach((e2) => {
      delete s[e2];
    }), Object.keys(s).forEach((e2) => {
      s[e2] = this.clone(s[e2], i), void 0 === s[e2] && delete s[e2];
    })) : e instanceof Function && !i.functions || e instanceof Node && !i.elements || e instanceof Event && !i.events || (s = e), s;
  }
  extend(i, s) {
    if (Array.isArray(i)) {
      if (!Array.isArray(s))
        throw new Error("Arrays can be extended with arrays only");
      i.splice(0, i.length), s.forEach((e) => {
        i.push(this.clone(e));
      });
    } else {
      if (i instanceof Node || i instanceof Event)
        throw new Error("HTML elmenents and events cannot be extended");
      if (i && "object" == typeof i && null != s) {
        if ("object" != typeof s)
          throw new Error("Object can be extended with other objects only.");
        Object.keys(s).forEach((e) => {
          var t;
          null != i[e] && "object" == typeof i[e] && null != s[e] && "object" == typeof s[e] ? (t = this.clone(s[e]), i[e] instanceof Node || i[e] instanceof Event ? i[e] = t : (Array.isArray(i[e]) && this.isPlainObject(t) && (i[e] = {}), this.extend(i[e], t))) : i[e] = this.clone(s[e]);
        });
      } else if (null != s)
        throw new Error("Object is not extendable, only {} or [] can be extended.");
    }
    if (2 < arguments.length)
      for (let e = 2; e < arguments.length; e++)
        this.extend(i, arguments[e]);
    return i;
  }
  naturalCompare(e, t) {
    let s, i, l = 1, r = 0, a = 0, n = String.alphabet;
    function o(e2, t2, i2) {
      if (i2) {
        for (s = t2; (i2 = o(e2, s)) < 76 && 65 < i2; )
          ++s;
        return +e2.slice(t2 - 1, s);
      }
      return -1 < (i2 = n && n.indexOf(e2.charAt(t2))) ? i2 + 76 : (i2 = e2.charCodeAt(t2) || 0) < 45 || 127 < i2 ? i2 : i2 < 46 ? 65 : i2 < 48 ? i2 - 1 : i2 < 58 ? i2 + 18 : i2 < 65 ? i2 - 11 : i2 < 91 ? i2 + 11 : i2 < 97 ? i2 - 37 : i2 < 123 ? i2 + 5 : i2 - 63;
    }
    if ((e += "") != (t += "")) {
      for (; l; )
        if (i = o(e, r++), l = o(t, a++), i < 76 && l < 76 && 66 < i && 66 < l && (i = o(e, r, r), l = o(t, a, r = s), a = s), i != l)
          return i < l ? -1 : 1;
    }
    return 0;
  }
  normMenu(i, e) {
    return Array.isArray(i) ? (i.forEach((e2, t) => {
      "string" == typeof e2 || "number" == typeof e2 ? i[t] = { id: e2, text: String(e2) } : null != e2 ? (null != e2.caption && null == e2.text && (e2.text = e2.caption), null != e2.text && null == e2.id && (e2.id = e2.text), null == e2.text && null != e2.id && (e2.text = e2.id)) : i[t] = { id: null, text: "null" };
    }), i) : "function" == typeof i ? (e = i.call(this, i, e), w2utils.normMenu.call(this, e)) : "object" == typeof i ? Object.keys(i).map((e2) => ({ id: e2, text: i[e2] })) : void 0;
  }
  prepareParams(i, e, t) {
    t = t ?? w2utils.settings.dataType;
    let s = e.body;
    switch (t) {
      case "HTTPJSON":
        s = { request: s }, ["PUT", "DELETE"].includes(e.method) && (e.method = "POST"), l();
        break;
      case "HTTP":
        ["PUT", "DELETE"].includes(e.method) && (e.method = "POST"), l();
        break;
      case "RESTFULL":
        ["PUT", "DELETE"].includes(e.method) ? e.headers["Content-Type"] = "application/json" : l();
        break;
      case "JSON":
        "GET" == e.method ? (s = { request: s }, l()) : (e.headers["Content-Type"] = "application/json", e.method = "POST");
    }
    return e.body = "string" == typeof e.body ? e.body : JSON.stringify(e.body), e;
    function l() {
      Object.keys(s).forEach((e2) => {
        let t2 = s[e2];
        "object" == typeof t2 && (t2 = JSON.stringify(t2)), i.searchParams.append(e2, t2);
      }), delete e.body;
    }
  }
  bindEvents(e, r) {
    0 != e.length && ((e == null ? void 0 : e[0]) instanceof Node && (e = Array.isArray(e) ? e : e.get()), query(e).each((s) => {
      let l = query(s).data();
      Object.keys(l).forEach((i) => {
        if (-1 != ["click", "dblclick", "mouseenter", "mouseleave", "mouseover", "mouseout", "mousedown", "mousemove", "mouseup", "contextmenu", "focus", "focusin", "focusout", "blur", "input", "change", "keydown", "keyup", "keypress"].indexOf(String(i).toLowerCase())) {
          let e2 = l[i], t = (e2 = "string" == typeof e2 ? e2.split("|").map((e3) => {
            "null" === (e3 = "undefined" === (e3 = "false" === (e3 = "true" === e3 ? true : e3) ? false : e3) ? void 0 : e3) && (e3 = null);
            var t2 = ["'", '"', "`"];
            return e3 = "string" == typeof (e3 = parseFloat(e3) == e3 ? parseFloat(e3) : e3) && t2.includes(e3[0]) && t2.includes(e3[e3.length - 1]) ? e3.substring(1, e3.length - 1) : e3;
          }) : e2)[0];
          e2 = e2.slice(1), query(s).off(i + ".w2utils-bind").on(i + ".w2utils-bind", function(i2) {
            switch (t) {
              case "alert":
                alert(e2[0]);
                break;
              case "stop":
                i2.stopPropagation();
                break;
              case "prevent":
                i2.preventDefault();
                break;
              case "stopPrevent":
                return i2.stopPropagation(), i2.preventDefault(), false;
              default:
                if (null == r[t])
                  throw new Error(`Cannot dispatch event as the method "${t}" does not exist.`);
                r[t].apply(r, e2.map((e3, t2) => {
                  switch (String(e3).toLowerCase()) {
                    case "event":
                      return i2;
                    case "this":
                      return this;
                    default:
                      return e3;
                  }
                }));
            }
          });
        }
      });
    }));
  }
  debounce(t, i = 250) {
    let s;
    return (...e) => {
      clearTimeout(s), s = setTimeout(() => {
        t(...e);
      }, i);
    };
  }
};
var w2utils = new Utils();
var Dialog = class extends w2base {
  constructor() {
    super(), this.defaults = { title: "", text: "", body: "", buttons: "", width: 450, height: 250, focus: null, actions: null, style: "", speed: 0.3, modal: false, maximized: false, keyboard: true, showClose: true, showMax: false, transition: null, openMaximized: false, moved: false }, this.name = "popup", this.status = "closed", this.onOpen = null, this.onClose = null, this.onMax = null, this.onMin = null, this.onToggle = null, this.onKeydown = null, this.onAction = null, this.onMove = null, this.tmp = {}, this.handleResize = (e) => {
      this.options.moved || this.center(void 0, void 0, true);
    };
  }
  open(s) {
    let l = this;
    "closing" != this.status && !query("#w2ui-popup").hasClass("animating") || this.close(true);
    var e = this.options;
    null != (s = ["string", "number"].includes(typeof s) ? w2utils.extend({ title: "Notification", body: `<div class="w2ui-centered">${s}</div>`, actions: { Ok() {
      l.close();
    } }, cancelAction: "ok" }, arguments[1] ?? {}) : s).text && (s.body = `<div class="w2ui-centered w2ui-msg-text">${s.text}</div>`), s = Object.assign({}, this.defaults, e, { title: "", body: "" }, s, { maximized: false }), this.options = s, 0 === query("#w2ui-popup").length && (this.off("*"), Object.keys(this).forEach((e2) => {
      e2.startsWith("on") && "on" != e2 && (this[e2] = null);
    })), Object.keys(s).forEach((e2) => {
      e2.startsWith("on") && "on" != e2 && s[e2] && (this[e2] = s[e2]);
    }), s.width = parseInt(s.width), s.height = parseInt(s.height);
    let r, t, i;
    var { top: a, left: n } = this.center();
    let o = { self: this, action(e2) {
      return l.on("action.prom", e2), o;
    }, close(e2) {
      return l.on("close.prom", e2), o;
    }, then(e2) {
      return l.on("open:after.prom", e2), o;
    } };
    if (null == s.actions || s.buttons || (s.buttons = "", Object.keys(s.actions).forEach((e2) => {
      var t2 = s.actions[e2];
      let i2 = e2;
      "function" == typeof t2 && (s.buttons += `<button class="w2ui-btn w2ui-eaction" data-click='["action","${e2}","event"]'>${e2}</button>`), "object" == typeof t2 && (s.buttons += `<button class="w2ui-btn w2ui-eaction ${t2.class || ""}" name="${e2}" data-click='["action","${e2}","event"]'
                        style="${t2.style}" ${t2.attrs}>${t2.text || e2}</button>`, i2 = Array.isArray(s.actions) ? t2.text : e2), "string" == typeof t2 && (s.buttons += `<button class="w2ui-btn w2ui-eaction" data-click='["action","${t2}","event"]'>${t2}</button>`, i2 = t2), "string" == typeof i2 && (i2 = i2[0].toLowerCase() + i2.substr(1).replace(/\s+/g, "")), o[i2] = function(t3) {
        return l.on("action.buttons", (e3) => {
          e3.detail.action[0].toLowerCase() + e3.detail.action.substr(1).replace(/\s+/g, "") == i2 && t3(e3);
        }), o;
      };
    })), 0 === query("#w2ui-popup").length) {
      if (true === (r = this.trigger("open", { target: "popup", present: false })).isCancelled)
        return;
      this.status = "opening", w2utils.lock(document.body, { opacity: 0.3, onClick: s.modal ? null : () => {
        this.close();
      } });
      let e2 = "";
      s.showClose && (e2 += `<div class="w2ui-popup-button w2ui-popup-close">
                            <span class="w2ui-icon w2ui-icon-cross w2ui-eaction" data-mousedown="stop" data-click="close"></span>
                        </div>`), s.showMax && (e2 += `<div class="w2ui-popup-button w2ui-popup-max">
                            <span class="w2ui-icon w2ui-icon-box w2ui-eaction" data-mousedown="stop" data-click="toggle"></span>
                        </div>`);
      n = `
                left: ${n}px;
                top: ${a}px;
                width: ${parseInt(s.width)}px;
                height: ${parseInt(s.height)}px;
                transition: ${s.speed}s
            `;
      t = `<div id="w2ui-popup" class="w2ui-popup w2ui-anim-open animating" style="${w2utils.stripSpaces(n)}"></div>`, query("body").append(t), query("#w2ui-popup")[0]._w2popup = { self: this, created: new Promise((e3) => {
        this._promCreated = e3;
      }), opened: new Promise((e3) => {
        this._promOpened = e3;
      }), closing: new Promise((e3) => {
        this._promClosing = e3;
      }), closed: new Promise((e3) => {
        this._promClosed = e3;
      }) }, n = `${s.title ? "" : "top: 0px !important;"} ` + (s.buttons ? "" : "bottom: 0px !important;"), t = `
                <span name="hidden-first" tabindex="0" style="position: absolute; top: -100px"></span>
                <div class="w2ui-popup-title-btns">${e2}</div>
                <div class="w2ui-popup-title" style="${s.title ? "" : "display: none"}"></div>
                <div class="w2ui-box" style="${n}">
                    <div class="w2ui-popup-body ${!s.title || " w2ui-popup-no-title"}
                        ${!s.buttons || " w2ui-popup-no-buttons"}" style="${s.style}">
                    </div>
                </div>
                <div class="w2ui-popup-buttons" style="${s.buttons ? "" : "display: none"}"></div>
                <span name="hidden-last" tabindex="0" style="position: absolute; top: -100px"></span>
            `, query("#w2ui-popup").html(t), s.title && query("#w2ui-popup .w2ui-popup-title").append(w2utils.lang(s.title)), s.buttons && query("#w2ui-popup .w2ui-popup-buttons").append(s.buttons), s.body && query("#w2ui-popup .w2ui-popup-body").append(s.body), setTimeout(() => {
        query("#w2ui-popup").css("transition", s.speed + "s").removeClass("w2ui-anim-open"), w2utils.bindEvents("#w2ui-popup .w2ui-eaction", this), query("#w2ui-popup").find(".w2ui-popup-body").show(), this._promCreated();
      }, 1), clearTimeout(this._timer), this._timer = setTimeout(() => {
        this.status = "open", l.setFocus(s.focus), r.finish(), this._promOpened(), query("#w2ui-popup").removeClass("animating");
      }, 1e3 * s.speed);
    } else {
      if (true === (r = this.trigger("open", { target: "popup", present: true })).isCancelled)
        return;
      this.status = "opening", null != e && (e.maximized || e.width == s.width && e.height == s.height || this.resize(s.width, s.height), s.prevSize = s.width + "px:" + s.height + "px", s.maximized = e.maximized);
      a = query("#w2ui-popup .w2ui-box").get(0).cloneNode(true);
      query(a).removeClass("w2ui-box").addClass("w2ui-box-temp").find(".w2ui-popup-body").empty().append(s.body), query("#w2ui-popup .w2ui-box").after(a), s.buttons ? (query("#w2ui-popup .w2ui-popup-buttons").show().html("").append(s.buttons), query("#w2ui-popup .w2ui-popup-body").removeClass("w2ui-popup-no-buttons"), query("#w2ui-popup .w2ui-box, #w2ui-popup .w2ui-box-temp").css("bottom", "")) : (query("#w2ui-popup .w2ui-popup-buttons").hide().html(""), query("#w2ui-popup .w2ui-popup-body").addClass("w2ui-popup-no-buttons"), query("#w2ui-popup .w2ui-box, #w2ui-popup .w2ui-box-temp").css("bottom", "0px")), s.title ? (query("#w2ui-popup .w2ui-popup-title").show().html((s.showClose ? `<div class="w2ui-popup-button w2ui-popup-close">
                                <span class="w2ui-icon w2ui-icon-cross w2ui-eaction" data-mousedown="stop" data-click="close"></span>
                            </div>` : "") + (s.showMax ? `<div class="w2ui-popup-button w2ui-popup-max">
                                <span class="w2ui-icon w2ui-icon-box w2ui-eaction" data-mousedown="stop" data-click="toggle"></span>
                            </div>` : "")).append(s.title), query("#w2ui-popup .w2ui-popup-body").removeClass("w2ui-popup-no-title"), query("#w2ui-popup .w2ui-box, #w2ui-popup .w2ui-box-temp").css("top", "")) : (query("#w2ui-popup .w2ui-popup-title").hide().html(""), query("#w2ui-popup .w2ui-popup-body").addClass("w2ui-popup-no-title"), query("#w2ui-popup .w2ui-box, #w2ui-popup .w2ui-box-temp").css("top", "0px"));
      let t2 = query("#w2ui-popup .w2ui-box")[0], i2 = query("#w2ui-popup .w2ui-box-temp")[0];
      query("#w2ui-popup").addClass("animating"), w2utils.transition(t2, i2, s.transition, () => {
        query(t2).remove(), query(i2).removeClass("w2ui-box-temp").addClass("w2ui-box");
        var e2 = query(i2).find(".w2ui-popup-body");
        1 == e2.length && (e2[0].style.cssText = s.style, e2.show()), l.setFocus(s.focus), query("#w2ui-popup").removeClass("animating");
      }), this.status = "open", r.finish(), w2utils.bindEvents("#w2ui-popup .w2ui-eaction", this), query("#w2ui-popup").find(".w2ui-popup-body").show();
    }
    return s.openMaximized && this.max(), s._last_focus = document.activeElement, s.keyboard && query(document.body).on("keydown", (e2) => {
      this.keydown(e2);
    }), query(window).on("resize", this.handleResize), i = { resizing: false, mvMove: function(e2) {
      1 == i.resizing && (e2 = e2 || window.event, i.div_x = e2.screenX - i.x, i.div_y = e2.screenY - i.y, true !== (e2 = l.trigger("move", { target: "popup", div_x: i.div_x, div_y: i.div_y, originalEvent: e2 })).isCancelled) && (query("#w2ui-popup").css({ transition: "none", transform: "translate3d(" + i.div_x + "px, " + i.div_y + "px, 0px)" }), l.options.moved = true, e2.finish());
    }, mvStop: function(e2) {
      1 != i.resizing || (e2 = e2 || window.event, l.status = "open", i.div_x = e2.screenX - i.x, i.div_y = e2.screenY - i.y, query("#w2ui-popup").css({ left: i.pos_x + i.div_x + "px", top: i.pos_y + i.div_y + "px" }).css({ transition: "none", transform: "translate3d(0px, 0px, 0px)" }), i.resizing = false, query(document.body).off(".w2ui-popup"), i.isLocked) || l.unlock();
    } }, query("#w2ui-popup .w2ui-popup-title").on("mousedown", function(e2) {
      var t2;
      l.options.maximized || (e2 = (e2 = e2) || window.event, l.status = "moving", t2 = query("#w2ui-popup").get(0).getBoundingClientRect(), Object.assign(i, { resizing: true, isLocked: 1 == query("#w2ui-popup > .w2ui-lock").length, x: e2.screenX, y: e2.screenY, pos_x: t2.x, pos_y: t2.y }), i.isLocked || l.lock({ opacity: 0 }), query(document.body).on("mousemove.w2ui-popup", i.mvMove).on("mouseup.w2ui-popup", i.mvStop), e2.stopPropagation ? e2.stopPropagation() : e2.cancelBubble = true, e2.preventDefault && e2.preventDefault());
    }), o;
  }
  load(s) {
    return new Promise((i, e) => {
      if (null == (s = "string" == typeof s ? { url: s } : s).url)
        console.log("ERROR: The url is not defined."), e("The url is not defined");
      else {
        this.status = "loading";
        let [e2, t] = String(s.url).split("#");
        e2 && fetch(e2).then((e3) => e3.text()).then((e3) => {
          i(this.template(e3, t, s));
        });
      }
    });
  }
  template(t, e, i = {}) {
    let s;
    try {
      s = query(t);
    } catch (e2) {
      s = query.html(t);
    }
    return e && (s = s.filter("#" + e)), Object.assign(i, { width: parseInt(query(s).css("width")), height: parseInt(query(s).css("height")), title: query(s).find("[rel=title]").html(), body: query(s).find("[rel=body]").html(), buttons: query(s).find("[rel=buttons]").html(), style: query(s).find("[rel=body]").get(0).style.cssText }), this.open(i);
  }
  action(e, t) {
    let i = this.options.actions[e];
    i instanceof Object && i.onClick && (i = i.onClick);
    e = this.trigger("action", { action: e, target: "popup", self: this, originalEvent: t, value: this.input ? this.input.value : null });
    true !== e.isCancelled && ("function" == typeof i && i.call(this, t), e.finish());
  }
  keydown(e) {
    var t;
    this.options && !this.options.keyboard || true !== (t = this.trigger("keydown", { target: "popup", originalEvent: e })).isCancelled && (27 === e.keyCode && (e.preventDefault(), 0 == query("#w2ui-popup .w2ui-message").length) && (this.options.cancelAction ? this.action(this.options.cancelAction) : this.close()), t.finish());
  }
  close(e) {
    let t = this.trigger("close", { target: "popup" });
    var i;
    true !== t.isCancelled && (i = () => {
      query("#w2ui-popup").remove(), this.options._last_focus && 0 < this.options._last_focus.length && this.options._last_focus.focus(), this.status = "closed", this.options = {}, t.finish(), this._promClosed();
    }, 0 !== query("#w2ui-popup").length) && "closed" != this.status && ("opening" == this.status && (e = true), "closing" == this.status && true === e ? (i(), clearTimeout(this.tmp.closingTimer), w2utils.unlock(document.body, 0)) : (this.status = "closing", query("#w2ui-popup").css("transition", this.options.speed + "s").addClass("w2ui-anim-close animating"), w2utils.unlock(document.body, 300), this._promClosing(), e ? i() : this.tmp.closingTimer = setTimeout(i, 1e3 * this.options.speed), this.options.keyboard && query(document.body).off("keydown", this.keydown), query(window).off("resize", this.handleResize)));
  }
  toggle() {
    let e = this.trigger("toggle", { target: "popup" });
    true !== e.isCancelled && (true === this.options.maximized ? this.min() : this.max(), setTimeout(() => {
      e.finish();
    }, 1e3 * this.options.speed + 50));
  }
  max() {
    if (true !== this.options.maximized) {
      let e = this.trigger("max", { target: "popup" });
      var t;
      true !== e.isCancelled && (this.status = "resizing", t = query("#w2ui-popup").get(0).getBoundingClientRect(), this.options.prevSize = t.width + ":" + t.height, this.resize(1e4, 1e4, () => {
        this.status = "open", this.options.maximized = true, e.finish();
      }));
    }
  }
  min() {
    if (true === this.options.maximized) {
      var t = this.options.prevSize.split(":");
      let e = this.trigger("min", { target: "popup" });
      true !== e.isCancelled && (this.status = "resizing", this.options.maximized = false, this.resize(parseInt(t[0]), parseInt(t[1]), () => {
        this.status = "open", this.options.prevSize = null, e.finish();
      }));
    }
  }
  clear() {
    query("#w2ui-popup .w2ui-popup-title").html(""), query("#w2ui-popup .w2ui-popup-body").html(""), query("#w2ui-popup .w2ui-popup-buttons").html("");
  }
  reset() {
    this.open(this.defaults);
  }
  message(e) {
    return w2utils.message({ owner: this, box: query("#w2ui-popup").get(0), after: ".w2ui-popup-title" }, e);
  }
  confirm(e) {
    return w2utils.confirm({ owner: this, box: query("#w2ui-popup"), after: ".w2ui-popup-title" }, e);
  }
  setFocus(e) {
    var _a;
    let s = query("#w2ui-popup"), l = "input, button, select, textarea, [contentEditable], .w2ui-input";
    null != e ? (_a = isNaN(e) ? s.find(l).filter(e).get(0) : s.find(l).get(e)) == null ? void 0 : _a.focus() : (e = s.find("[name=hidden-first]").get(0)) && e.focus(), query(s).find(l + ",[name=hidden-first],[name=hidden-last]").off(".keep-focus").on("blur.keep-focus", function(e2) {
      setTimeout(() => {
        var _a2, _b, _c;
        var e3 = document.activeElement, t = 0 < query(s).find(l).filter(e3).length, i = query(e3).attr("name");
        !t && e3 && e3 !== document.body && ((_a2 = query(s).find(l).get(0)) == null ? void 0 : _a2.focus()), "hidden-last" == i && ((_b = query(s).find(l).get(0)) == null ? void 0 : _b.focus()), "hidden-first" == i && ((_c = query(s).find(l).get(-1)) == null ? void 0 : _c.focus());
      }, 1);
    });
  }
  lock(e, t) {
    var i = Array.from(arguments);
    i.unshift(query("#w2ui-popup")), w2utils.lock(...i);
  }
  unlock(e) {
    w2utils.unlock(query("#w2ui-popup"), e);
  }
  center(e, t, i) {
    let s, l;
    l = null == window.innerHeight ? (s = parseInt(document.documentElement.offsetWidth), parseInt(document.documentElement.offsetHeight)) : (s = parseInt(window.innerWidth), parseInt(window.innerHeight)), e = parseInt(e ?? this.options.width), t = parseInt(t ?? this.options.height), true === this.options.maximized && (e = s, t = l), s - 10 < e && (e = s - 10), l - 10 < t && (t = l - 10);
    var r = (l - t) / 2, a = (s - e) / 2;
    return i && (query("#w2ui-popup").css({ transition: "none", top: r + "px", left: a + "px", width: e + "px", height: t + "px" }), this.resizeMessages()), { top: r, left: a, width: e, height: t };
  }
  resize(e, t, i) {
    let s = this;
    null == this.options.speed && (this.options.speed = 0);
    var { top: e, left: t, width: l, height: r } = this.center(e, t), a = this.options.speed;
    query("#w2ui-popup").css({ transition: a + `s width, ${a}s height, ${a}s left, ${a}s top`, top: e + "px", left: t + "px", width: l + "px", height: r + "px" });
    let n = setInterval(() => {
      s.resizeMessages();
    }, 10);
    setTimeout(() => {
      clearInterval(n), s.resizeMessages(), "function" == typeof i && i();
    }, 1e3 * this.options.speed + 50);
  }
  resizeMessages() {
    query("#w2ui-popup .w2ui-message").each((e) => {
      var t = e._msg_options, i = query("#w2ui-popup"), s = (parseInt(t.width) < 10 && (t.width = 10), parseInt(t.height) < 10 && (t.height = 10), i[0].getBoundingClientRect()), i = parseInt(i.find(".w2ui-popup-title")[0].clientHeight), l = parseInt(s.width), s = parseInt(s.height);
      t.width = t.originalWidth, t.width > l - 10 && (t.width = l - 10), t.height = t.originalHeight, t.height > s - i - 5 && (t.height = s - i - 5), t.originalHeight < 0 && (t.height = s + t.originalHeight - i), t.originalWidth < 0 && (t.width = l + 2 * t.originalWidth), query(e).css({ left: (l - t.width) / 2 + "px", width: t.width + "px", height: t.height + "px" });
    });
  }
};
function w2alert(e, t, i) {
  let s;
  t = { title: w2utils.lang(t ?? "Notification"), body: `<div class="w2ui-centered w2ui-msg-text">${e}</div>`, showClose: false, actions: ["Ok"], cancelAction: "ok" };
  return (s = 0 < query("#w2ui-popup").length && "closing" != w2popup.status ? w2popup.message(t) : w2popup.open(t)).ok((e2) => {
    var _a;
    "function" == typeof ((_a = e2.detail.self) == null ? void 0 : _a.close) && e2.detail.self.close(), "function" == typeof i && i();
  }), s;
}
function w2confirm(e, t, i) {
  let s, l = e;
  return (l = ["string", "number"].includes(typeof l) ? { msg: l } : l).msg && (l.body = `<div class="w2ui-centered w2ui-msg-text">${l.msg}</div>`, delete l.msg), w2utils.extend(l, { title: w2utils.lang(t ?? "Confirmation"), showClose: false, modal: true, cancelAction: "no" }), w2utils.normButtons(l, { yes: "Yes", no: "No" }), (s = 0 < query("#w2ui-popup").length && "closing" != w2popup.status ? w2popup.message(l) : w2popup.open(l)).self.off(".confirm").on("action:after.confirm", (e2) => {
    var _a;
    "function" == typeof ((_a = e2.detail.self) == null ? void 0 : _a.close) && e2.detail.self.close(), "function" == typeof i && i(e2.detail.action);
  }), s;
}
function w2prompt(e, t, i) {
  let s, l = e;
  return (l = ["string", "number"].includes(typeof l) ? { label: l } : l).label && (l.focus = 0, l.body = l.textarea ? `<div class="w2ui-prompt textarea">
                 <div>${l.label}</div>
                 <textarea id="w2prompt" class="w2ui-input" ${l.attrs ?? ""}
                    data-keydown="keydown|event" data-keyup="change|event">${l.value ?? ""}</textarea>
               </div>` : `<div class="w2ui-prompt w2ui-centered">
                 <label>${l.label}</label>
                 <input id="w2prompt" class="w2ui-input" ${l.attrs ?? ""}
                    data-keydown="keydown|event" data-keyup="change|event" value="${l.value ?? ""}">
               </div>`), w2utils.extend(l, { title: w2utils.lang(t ?? "Notification"), showClose: false, modal: true, cancelAction: "cancel" }), w2utils.normButtons(l, { ok: "Ok", cancel: "Cancel" }), (s = 0 < query("#w2ui-popup").length && "closing" != w2popup.status ? w2popup.message(l) : w2popup.open(l)).self.box ? s.self.input = query(s.self.box).find("#w2prompt").get(0) : s.self.input = query("#w2ui-popup .w2ui-popup-body #w2prompt").get(0), null !== l.value && s.self.input.select(), s.change = function(e2) {
    return s.self.on("change", e2), this;
  }, s.self.off(".prompt").on("open:after.prompt", (e2) => {
    e2 = e2.detail.box || query("#w2ui-popup .w2ui-popup-body").get(0);
    w2utils.bindEvents(query(e2).find("#w2prompt"), { keydown(e3) {
      27 == e3.keyCode && e3.stopPropagation();
    }, change(e3) {
      var t2 = s.self.trigger("change", { target: "prompt", originalEvent: e3 });
      true !== t2.isCancelled && (13 == e3.keyCode && e3.ctrlKey && s.self.action("Ok", e3), 27 == e3.keyCode && s.self.action("Cancel", e3), t2.finish());
    } }), query(e2).find(".w2ui-eaction").trigger("keyup");
  }).on("action:after.prompt", (e2) => {
    var _a;
    "function" == typeof ((_a = e2.detail.self) == null ? void 0 : _a.close) && e2.detail.self.close(), "function" == typeof i && i(e2.detail.action);
  }), s;
}
var w2popup = new Dialog();
var _Tooltip = class _Tooltip {
  constructor() {
    this.defaults = { name: null, html: "", style: "", class: "", position: "top|bottom", align: "", anchor: null, anchorClass: "", anchorStyle: "", autoShow: false, autoShowOn: null, autoHideOn: null, arrowSize: 8, margin: 0, margin: 1, screenMargin: 2, autoResize: true, offsetX: 0, offsetY: 0, maxWidth: null, maxHeight: null, watchScroll: null, watchResize: null, hideOn: null, onThen: null, onShow: null, onHide: null, onUpdate: null, onMove: null };
  }
  trigger(e, t) {
    var i;
    if (2 == arguments.length && (i = e, (e = t).type = i), e.overlay)
      return e.overlay.trigger(e);
    console.log("ERROR: cannot find overlay where to trigger events");
  }
  get(e) {
    return 0 == arguments.length ? Object.keys(_Tooltip.active) : true === e ? _Tooltip.active : _Tooltip.active[e.replace(/[\s\.#]/g, "_")];
  }
  attach(t, s) {
    let l, r, a = this;
    if (0 != arguments.length) {
      1 == arguments.length && t.anchor ? t = (l = t).anchor : 2 === arguments.length && "string" == typeof s ? s = (l = { anchor: t, html: s }).html : 2 === arguments.length && null != s && "object" == typeof s && (s = (l = s).html), l = w2utils.extend({}, this.defaults, l || {}), !(s = !s && l.text ? l.text : s) && l.html && (s = l.html), delete l.anchor;
      let e = l.name || t.id;
      t != document && t != document.body || (t = document.body, e = "context-menu"), e || (e = "noname-" + Object.keys(_Tooltip.active).length, console.log("NOTICE: name property is not defined for tooltip, could lead to too many instances")), e = e.replace(/[\s\.#]/g, "_"), _Tooltip.active[e] ? ((r = _Tooltip.active[e]).prevOptions = r.options, r.options = l, r.anchor = t, r.prevOptions.html == r.options.html && r.prevOptions.class == r.options.class && r.prevOptions.style == r.options.style || (r.needsUpdate = true), l = r.options) : (r = new w2base(), Object.assign(r, { id: "w2overlay-" + e, name: e, options: l, anchor: t, displayed: false, tmp: { observeResize: new ResizeObserver(() => {
        this.resize(r.name);
      }) }, hide() {
        a.hide(e);
      } }), _Tooltip.active[e] = r), Object.keys(r.options).forEach((e2) => {
        var t2 = r.options[e2];
        e2.startsWith("on") && "function" == typeof t2 && (r[e2] = t2, delete r.options[e2]);
      }), true === l.autoShow && (l.autoShowOn = l.autoShowOn ?? "mouseenter", l.autoHideOn = l.autoHideOn ?? "mouseleave", l.autoShow = false), l.autoShowOn && (s = "autoShow-" + r.name, query(t).off("." + s).on(l.autoShowOn + "." + s, (e2) => {
        a.show(r.name), e2.stopPropagation();
      }), delete l.autoShowOn), l.autoHideOn && (s = "autoHide-" + r.name, query(t).off("." + s).on(l.autoHideOn + "." + s, (e2) => {
        a.hide(r.name), e2.stopPropagation();
      }), delete l.autoHideOn), r.off(".attach");
      let i = { overlay: r, then: (t2) => (r.on("show:after.attach", (e2) => {
        t2(e2);
      }), i), show: (t2) => (r.on("show.attach", (e2) => {
        t2(e2);
      }), i), hide: (t2) => (r.on("hide.attach", (e2) => {
        t2(e2);
      }), i), update: (t2) => (r.on("update.attach", (e2) => {
        t2(e2);
      }), i), move: (t2) => (r.on("move.attach", (e2) => {
        t2(e2);
      }), i) };
      return i;
    }
  }
  update(e, t) {
    var i = _Tooltip.active[e];
    i ? (i.needsUpdate = true, i.options.html = t, this.show(e)) : console.log(`Tooltip "${e}" is not displayed. Cannot update it.`);
  }
  show(i) {
    if (i instanceof HTMLElement || i instanceof Object) {
      let e = i, t2 = (i instanceof HTMLElement && ((e = arguments[1] || {}).anchor = i), this.attach(e));
      return query(t2.overlay.anchor).off(".autoShow-" + t2.overlay.name).off(".autoHide-" + t2.overlay.name), setTimeout(() => {
        this.show(t2.overlay.name), this.initControls && this.initControls(t2.overlay);
      }, 1), t2;
    }
    let t, r = this, a = _Tooltip.active[i.replace(/[\s\.#]/g, "_")];
    if (a) {
      let l = a.options;
      if (!a || a.displayed && !a.needsUpdate)
        this.resize(a == null ? void 0 : a.name);
      else {
        var s = l.position.split("|"), s = ["top", "bottom"].includes(s[0]);
        let e = "both" == l.align && s ? "" : "white-space: nowrap;";
        if (l.maxWidth && w2utils.getStrWidth(l.html, "") > l.maxWidth && (e = "width: " + l.maxWidth + "px; white-space: inherit; overflow: auto;"), e += " max-height: " + (l.maxHeight || window.innerHeight - 40) + "px;", "" !== l.html && null != l.html) {
          if (a.box) {
            if (true === (t = this.trigger("update", { target: i, overlay: a })).isCancelled)
              return void (a.prevOptions && (a.options = a.prevOptions, delete a.prevOptions));
            query(a.box).find(".w2ui-overlay-body").attr("style", (l.style || "") + "; " + e).removeClass().addClass("w2ui-overlay-body " + l.class).html(l.html);
          } else {
            if (true === (t = this.trigger("show", { target: i, overlay: a })).isCancelled)
              return;
            query("body").append(`<div id="${a.id}" name="${i}" style="display: none; pointer-events: none" class="w2ui-overlay"
                        data-click="stop" data-focusin="stop">
                    <style></style>
                    <div class="w2ui-overlay-body ${l.class}" style="${l.style || ""}; ${e}">
                        ${l.html}
                    </div>
                </div>`), a.box = query("#" + w2utils.escapeId(a.id))[0], a.displayed = true;
            s = query(a.anchor).data("tooltipName") ?? [];
            s.push(i), query(a.anchor).data("tooltipName", s), w2utils.bindEvents(a.box, {}), a.tmp.originalCSS = "", 0 < query(a.anchor).length && (a.tmp.originalCSS = query(a.anchor)[0].style.cssText);
          }
          this.resize(a.name), l.anchorStyle && (a.anchor.style.cssText += ";" + l.anchorStyle), !l.anchorClass || "w2ui-focus" == l.anchorClass && a.anchor == document.body || query(a.anchor).addClass(l.anchorClass), "string" == typeof l.hideOn && (l.hideOn = [l.hideOn]), Array.isArray(l.hideOn) || (l.hideOn = []), Object.assign(a.tmp, { scrollLeft: document.body.scrollLeft, scrollTop: document.body.scrollTop });
          {
            let t2 = (e2) => {
              r.hide(a.name);
            }, i2 = query(a.anchor), s2 = "tooltip-" + a.name;
            query("body").off("." + s2), l.hideOn.includes("doc-click") && (["INPUT", "TEXTAREA"].includes(a.anchor.tagName) && i2.off(`.${s2}-doc`).on(`click.${s2}-doc`, (e2) => {
              e2.stopPropagation();
            }), query("body").on("click." + s2, t2));
            l.hideOn.includes("focus-change") && query("body").on("focusin." + s2, (e2) => {
              document.activeElement != a.anchor && r.hide(a.name);
            });
            ["INPUT", "TEXTAREA"].includes(a.anchor.tagName) && (i2.off("." + s2), l.hideOn.forEach((e2) => {
              -1 == ["doc-click", "focus-change"].indexOf(e2) && i2.on(e2 + "." + s2, { once: true }, t2);
            }));
          }
          {
            var n = document.body;
            let e2 = "tooltip-" + a.name, t2 = n;
            "BODY" == n.tagName && (t2 = n.ownerDocument);
            query(t2).off("." + e2).on("scroll." + e2, (e3) => {
              Object.assign(a.tmp, { scrollLeft: n.scrollLeft, scrollTop: n.scrollTop }), r.resize(a.name);
            });
          }
          return query(a.box).show(), a.tmp.observeResize.observe(a.box), _Tooltip.observeRemove.observe(document.body, { subtree: true, childList: true }), query(a.box).css("opacity", 1).find(".w2ui-overlay-body").html(l.html), setTimeout(() => {
            query(a.box).css({ "pointer-events": "auto" }).data("ready", "yes");
          }, 100), delete a.needsUpdate, a.box.overlay = a, t && t.finish(), { overlay: a };
        }
        r.hide(i);
      }
    }
  }
  hide(e) {
    var _a;
    let i;
    if (0 == arguments.length)
      Object.keys(_Tooltip.active).forEach((e2) => {
        this.hide(e2);
      });
    else if (e instanceof HTMLElement)
      (query(e).data("tooltipName") ?? []).forEach((e2) => {
        this.hide(e2);
      });
    else if ("string" == typeof e && (e = e.replace(/[\s\.#]/g, "_"), i = _Tooltip.active[e]), i && i.box) {
      delete _Tooltip.active[e];
      e = this.trigger("hide", { target: e, overlay: i });
      if (true !== e.isCancelled) {
        var s = "tooltip-" + i.name;
        (_a = i.tmp.observeResize) == null ? void 0 : _a.disconnect(), i.options.watchScroll && query(i.options.watchScroll).off(".w2scroll-" + i.name);
        let t = 0;
        Object.keys(_Tooltip.active).forEach((e2) => {
          _Tooltip.active[e2].displayed && t++;
        }), 0 == t && _Tooltip.observeRemove.disconnect(), query("body").off("." + s), query(document).off("." + s), i.box.remove(), i.box = null, i.displayed = false;
        var l = query(i.anchor).data("tooltipName") ?? [];
        -1 != l.indexOf(i.name) && l.splice(l.indexOf(i.name), 1), 0 == l.length ? query(i.anchor).removeData("tooltipName") : query(i.anchor).data("tooltipName", l), i.anchor.style.cssText = i.tmp.originalCSS, query(i.anchor).off("." + s).removeClass(i.options.anchorClass), e.finish();
      }
    }
  }
  resize(i) {
    if (0 == arguments.length)
      Object.keys(_Tooltip.active).forEach((e) => {
        e = _Tooltip.active[e];
        e.displayed && this.resize(e.name);
      });
    else {
      var s = _Tooltip.active[i.replace(/[\s\.#]/g, "_")];
      let t = this.getPosition(s.name);
      var l = t.left + "x" + t.top;
      let e;
      s.tmp.lastPos != l && (e = this.trigger("move", { target: i, overlay: s, pos: t })), query(s.box).css({ left: t.left + "px", top: t.top + "px" }).then((e2) => {
        null != t.width && e2.css("width", t.width + "px").find(".w2ui-overlay-body").css("width", "100%"), null != t.height && e2.css("height", t.height + "px").find(".w2ui-overlay-body").css("height", "100%");
      }).find(".w2ui-overlay-body").removeClass("w2ui-arrow-right w2ui-arrow-left w2ui-arrow-top w2ui-arrow-bottom").addClass(t.arrow.class).closest(".w2ui-overlay").find("style").text(t.arrow.style), s.tmp.lastPos != l && e && (s.tmp.lastPos = l, e.finish());
    }
  }
  getPosition(e) {
    let g = _Tooltip.active[e.replace(/[\s\.#]/g, "_")];
    if (g && g.box) {
      let t = g.options;
      (g.tmp.resizedY || g.tmp.resizedX) && query(g.box).css({ width: "", height: "", scroll: "auto" });
      var e = w2utils.scrollBarSize(), y = !(document.body.scrollWidth == document.body.clientWidth), w = !(document.body.scrollHeight == document.body.clientHeight);
      let i = { width: window.innerWidth - (w ? e : 0), height: window.innerHeight - (y ? e : 0) };
      var b, v = ("auto" == t.position ? "top|bottom|right|left" : t.position).split("|");
      let s = ["top", "bottom"].includes(v[0]), l = g.box.getBoundingClientRect(), r = g.anchor.getBoundingClientRect(), a = (g.anchor == document.body && ({ x, y: _, width: q, height: C } = t.originalEvent, r = { left: x - 2, top: _ - 4, width: q, height: C, arrow: "none" }), t.arrowSize), n = ("none" == r.arrow && (a = 0), { top: r.top, bottom: i.height - (r.top + r.height) - +(y ? e : 0), left: r.left, right: i.width - (r.left + r.width) + (w ? e : 0) });
      l.width < 22 && (l.width = 22), l.height < 14 && (l.height = 14);
      let o, h, d, u, c = "", p = { offset: 0, class: "", style: `#${g.id} { --tip-size: ${a}px; }` }, f = { left: 0, top: 0 }, m = { posX: "", x: 0, posY: "", y: 0 };
      v.forEach((e2) => {
        ["top", "bottom"].includes(e2) && (!c && l.height + a / 1.893 < n[e2] && (c = e2), n[e2] > m.y) && Object.assign(m, { posY: e2, y: n[e2] }), ["left", "right"].includes(e2) && (!c && l.width + a / 1.893 < n[e2] && (c = e2), n[e2] > m.x) && Object.assign(m, { posX: e2, x: n[e2] });
      }), c = c || (s ? m.posY : m.posX), t.autoResize && (["top", "bottom"].includes(c) && (l.height > n[c] ? (u = n[c], g.tmp.resizedY = true) : g.tmp.resizedY = false), ["left", "right"].includes(c)) && (l.width > n[c] ? (d = n[c], g.tmp.resizedX = true) : g.tmp.resizedX = false);
      var x = c;
      switch (p.class = r.arrow || "w2ui-arrow-" + x, x) {
        case "top":
          o = r.left + (r.width - (d ?? l.width)) / 2, h = r.top - (u ?? l.height) - a / 1.5 + 1;
          break;
        case "bottom":
          o = r.left + (r.width - (d ?? l.width)) / 2, h = r.top + r.height + a / 1.25 + 1;
          break;
        case "left":
          o = r.left - (d ?? l.width) - a / 1.2 - 1, h = r.top + (r.height - (u ?? l.height)) / 2;
          break;
        case "right":
          o = r.left + r.width + a / 1.2 + 1, h = r.top + (r.height - (u ?? l.height)) / 2;
      }
      if (s)
        "left" == t.align && (f.left = r.left - o, o = r.left), "right" == t.align && (f.left = r.left + r.width - (d ?? l.width) - o, o = r.left + r.width - (d ?? l.width)), ["top", "bottom"].includes(c) && t.align.startsWith("both") && (b = t.align.split(":")[1] ?? 50, r.width >= b) && (o = r.left, d = r.width), "top" == t.align && (f.top = r.top - h, h = r.top), "bottom" == t.align && (f.top = r.top + r.height - (u ?? l.height) - h, h = r.top + r.height - (u ?? l.height)), ["left", "right"].includes(c) && t.align.startsWith("both") && (b = t.align.split(":")[1] ?? 50, r.height >= b) && (h = r.top, u = r.height);
      {
        let e2;
        (["left", "right"].includes(t.align) && r.width < (d ?? l.width) || ["top", "bottom"].includes(t.align) && r.height < (u ?? l.height)) && (e2 = true);
        var _ = "right" == c ? a : t.screenMargin, q = "bottom" == c ? a : t.screenMargin, C = i.width - (d ?? l.width) - ("left" == c ? a : t.screenMargin), y = i.height - (u ?? l.height) - ("top" == c ? a : t.screenMargin) + 3;
        (["top", "bottom"].includes(c) || t.autoResize) && (o < _ && (e2 = true, f.left -= o, o = _), o > C) && (e2 = true, f.left -= o - C, o += C - o);
        (["left", "right"].includes(c) || t.autoResize) && (h < q && (e2 = true, f.top -= h, h = q), h > y) && (e2 = true, f.top -= h - y, h += y - h);
        e2 && (_ = s ? "left" : "top", C = s ? "width" : "height", p.offset = -f[_], q = l[C] / 2 - a, Math.abs(p.offset) > q + a && (p.class = ""), Math.abs(p.offset) > q && (p.offset = p.offset < 0 ? -q : q), p.style = w2utils.stripSpaces(`#${g.id} .w2ui-overlay-body:after,
                            #${g.id} .w2ui-overlay-body:before {
                                --tip-size: ${a}px;
                                margin-${_}: ${p.offset}px;
                            }`));
      }
      w = "top" == c ? -t.margin : "bottom" == c ? t.margin : 0, e = "left" == c ? -t.margin : "right" == c ? t.margin : 0;
      return h = Math.floor(100 * (h + parseFloat(t.offsetY) + parseFloat(w))) / 100, { left: o = Math.floor(100 * (o + parseFloat(t.offsetX) + parseFloat(e))) / 100, top: h, arrow: p, adjust: f, width: d, height: u, pos: c };
    }
  }
};
__publicField(_Tooltip, "active", {});
__publicField(_Tooltip, "observeRemove", new MutationObserver((e) => {
  let t = 0;
  Object.keys(_Tooltip.active).forEach((e2) => {
    e2 = _Tooltip.active[e2];
    e2.displayed && (e2.anchor && e2.anchor.isConnected ? t++ : e2.hide());
  }), 0 === t && _Tooltip.observeRemove.disconnect();
}));
var Tooltip = _Tooltip;
var ColorTooltip = class extends Tooltip {
  constructor() {
    super(), this.palette = [["000000", "333333", "555555", "777777", "888888", "999999", "AAAAAA", "CCCCCC", "DDDDDD", "EEEEEE", "F7F7F7", "FFFFFF"], ["FF011B", "FF9838", "FFC300", "FFFD59", "86FF14", "14FF7A", "2EFFFC", "2693FF", "006CE7", "9B24F4", "FF21F5", "FF0099"], ["FFEAEA", "FCEFE1", "FCF4DC", "FFFECF", "EBFFD9", "D9FFE9", "E0FFFF", "E8F4FF", "ECF4FC", "EAE6F4", "FFF5FE", "FCF0F7"], ["F4CCCC", "FCE5CD", "FFF1C2", "FFFDA1", "D5FCB1", "B5F7D0", "BFFFFF", "D6ECFF", "CFE2F3", "D9D1E9", "FFE3FD", "FFD9F0"], ["EA9899", "F9CB9C", "FFE48C", "F7F56F", "B9F77E", "84F0B1", "83F7F7", "B5DAFF", "9FC5E8", "B4A7D6", "FAB9F6", "FFADDE"], ["E06666", "F6B26B", "DEB737", "E0DE51", "8FDB48", "52D189", "4EDEDB", "76ACE3", "6FA8DC", "8E7CC3", "E07EDA", "F26DBD"], ["CC0814", "E69138", "AB8816", "B5B20E", "6BAB30", "27A85F", "1BA8A6", "3C81C7", "3D85C6", "674EA7", "A14F9D", "BF4990"], ["99050C", "B45F17", "80650E", "737103", "395E14", "10783D", "13615E", "094785", "0A5394", "351C75", "780172", "782C5A"]], this.defaults = w2utils.extend({}, this.defaults, { advanced: false, transparent: true, position: "top|bottom", class: "w2ui-white", color: "", liveUpdate: true, arrowSize: 12, autoResize: false, anchorClass: "w2ui-focus", autoShowOn: "focus", hideOn: ["doc-click", "focus-change"], onSelect: null, onLiveUpdate: null });
  }
  attach(e, t) {
    let i;
    1 == arguments.length && e.anchor ? e = (i = e).anchor : 2 === arguments.length && null != t && "object" == typeof t && ((i = t).anchor = e);
    t = i.hideOn;
    i = w2utils.extend({}, this.defaults, i || {}), t && (i.hideOn = t), i.style += "; padding: 0;", i.transparent && "333333" == this.palette[0][1] && (this.palette[0].splice(1, 1), this.palette[0].push("")), i.transparent || "333333" == this.palette[0][1] || (this.palette[0].splice(1, 0, "333333"), this.palette[0].pop()), i.color && (i.color = String(i.color).toUpperCase()), "string" == typeof i.color && "#" === i.color.substr(0, 1) && (i.color = i.color.substr(1)), this.index = [-1, -1];
    let s = super.attach(i), l = s.overlay;
    return l.options.html = this.getColorHTML(l.name, i), l.on("show.attach", (e2) => {
      var e2 = e2.detail.overlay, t2 = e2.anchor, i2 = e2.options;
      ["INPUT", "TEXTAREA"].includes(t2.tagName) && !i2.color && t2.value && (e2.tmp.initColor = t2.value), delete e2.newColor;
    }), l.on("show:after.attach", (e2) => {
      var _a;
      var t2;
      ((_a = s.overlay) == null ? void 0 : _a.box) && (t2 = query(s.overlay.box).find(".w2ui-eaction"), w2utils.bindEvents(t2, this), this.initControls(s.overlay));
    }), l.on("update:after.attach", (e2) => {
      var _a;
      var t2;
      ((_a = s.overlay) == null ? void 0 : _a.box) && (t2 = query(s.overlay.box).find(".w2ui-eaction"), w2utils.bindEvents(t2, this), this.initControls(s.overlay));
    }), l.on("hide.attach", (e2) => {
      var e2 = e2.detail.overlay, t2 = e2.anchor, i2 = e2.newColor ?? e2.options.color ?? "", t2 = (["INPUT", "TEXTAREA"].includes(t2.tagName) && t2.value != i2 && (t2.value = i2), this.trigger("select", { color: i2, target: e2.name, overlay: e2 }));
      true !== t2.isCancelled && t2.finish();
    }), s.liveUpdate = (t2) => (l.on("liveUpdate.attach", (e2) => {
      t2(e2);
    }), s), s.select = (t2) => (l.on("select.attach", (e2) => {
      t2(e2);
    }), s), s;
  }
  select(e, t) {
    let i;
    this.index = [-1, -1], "string" != typeof t && (i = t.target, this.index = query(i).attr("index").split(":"), t = query(i).closest(".w2ui-overlay").attr("name"));
    var s = this.get(t), t = this.trigger("liveUpdate", { color: e, target: t, overlay: s, param: arguments[1] });
    true !== t.isCancelled && (["INPUT", "TEXTAREA"].includes(s.anchor.tagName) && s.options.liveUpdate && query(s.anchor).val(e), s.newColor = e, query(s.box).find(".w2ui-selected").removeClass("w2ui-selected"), i && query(i).addClass("w2ui-selected"), t.finish());
  }
  nextColor(e) {
    var t = this.palette;
    switch (e) {
      case "up":
        this.index[0]--;
        break;
      case "down":
        this.index[0]++;
        break;
      case "right":
        this.index[1]++;
        break;
      case "left":
        this.index[1]--;
    }
    return this.index[0] < 0 && (this.index[0] = 0), this.index[0] > t.length - 2 && (this.index[0] = t.length - 2), this.index[1] < 0 && (this.index[1] = 0), this.index[1] > t[0].length - 1 && (this.index[1] = t[0].length - 1), t[this.index[0]][this.index[1]];
  }
  tabClick(e, t) {
    "string" != typeof t && (t = query(t.target).closest(".w2ui-overlay").attr("name"));
    var t = this.get(t), i = query(t.box).find(`.w2ui-color-tab:nth-child(${e})`);
    query(t.box).find(".w2ui-color-tab").removeClass("w2ui-selected"), query(i).addClass("w2ui-selected"), query(t.box).find(".w2ui-tab-content").hide().closest(".w2ui-colors").find(".tab-" + e).show();
  }
  getColorHTML(s, l) {
    let r = `
            <div class="w2ui-colors">
                <div class="w2ui-tab-content tab-1">`;
    for (let i = 0; i < this.palette.length; i++) {
      r += '<div class="w2ui-color-row">';
      for (let t = 0; t < this.palette[i].length; t++) {
        var a = this.palette[i][t];
        let e = "FFFFFF" === a ? "; border: 1px solid #efefef" : "";
        r += `
                    <div class="w2ui-color w2ui-eaction ${"" === a ? "w2ui-no-color" : ""} ${l.color == a ? "w2ui-selected" : ""}"
                        style="background-color: #${a + e};" name="${a}" index="${i}:${t}"
                        data-mousedown="select|'${a}'|event" data-mouseup="hide|${s}">&nbsp;
                    </div>`;
      }
      r += "</div>", i < 2 && (r += '<div style="height: 8px"></div>');
    }
    return r = (r = (r += "</div>") + `
            <div class="w2ui-tab-content tab-2" style="display: none">
                <div class="color-info">
                    <div class="color-preview-bg"><div class="color-preview"></div><div class="color-original"></div></div>
                    <div class="color-part">
                        <span>H</span> <input class="w2ui-input" name="h" maxlength="3" max="360" tabindex="101">
                        <span>R</span> <input class="w2ui-input" name="r" maxlength="3" max="255" tabindex="104">
                    </div>
                    <div class="color-part">
                        <span>S</span> <input class="w2ui-input" name="s" maxlength="3" max="100" tabindex="102">
                        <span>G</span> <input class="w2ui-input" name="g" maxlength="3" max="255" tabindex="105">
                    </div>
                    <div class="color-part">
                        <span>V</span> <input class="w2ui-input" name="v" maxlength="3" max="100" tabindex="103">
                        <span>B</span> <input class="w2ui-input" name="b" maxlength="3" max="255" tabindex="106">
                    </div>
                    <div class="color-part opacity">
                        <span>${w2utils.lang("Opacity")}</span>
                        <input class="w2ui-input" name="a" maxlength="5" max="1" tabindex="107">
                    </div>
                </div>
                <div class="palette" name="palette">
                    <div class="palette-bg"></div>
                    <div class="value1 move-x move-y"></div>
                </div>
                <div class="rainbow" name="rainbow">
                    <div class="value2 move-x"></div>
                </div>
                <div class="alpha" name="alpha">
                    <div class="alpha-bg"></div>
                    <div class="value2 move-x"></div>
                </div>
            </div>`) + `
            <div class="w2ui-color-tabs">
                <div class="w2ui-color-tab selected w2ui-eaction" data-click="tabClick|1|event|this"><span class="w2ui-icon w2ui-icon-colors"></span></div>
                <div class="w2ui-color-tab w2ui-eaction" data-click="tabClick|2|event|this"><span class="w2ui-icon w2ui-icon-settings"></span></div>
                <div style="padding: 5px; width: 100%; text-align: right;">
                    ${"string" == typeof l.html ? l.html : ""}
                </div>
            </div>`;
  }
  initControls(n) {
    let a, o = this;
    var e = n.options;
    let h = w2utils.parseColor(e.color || n.tmp.initColor), d = (null == h && (h = { r: 140, g: 150, b: 160, a: 1 }), w2utils.rgb2hsv(h));
    true === e.advanced && this.tabClick(2, n.name), u(d, true, true), query(n.box).find("input").off(".w2color").on("change.w2color", (e2) => {
      e2 = query(e2.target);
      let t = parseFloat(e2.val());
      var i = parseFloat(e2.attr("max")), i = (isNaN(t) && (t = 0, e2.val(0)), 1 < i && (t = parseInt(t)), 0 < i && t > i && (e2.val(i), t = i), t < 0 && (e2.val(0), t = 0), e2.attr("name")), e2 = {};
      -1 !== ["r", "g", "b", "a"].indexOf(i) ? (h[i] = t, d = w2utils.rgb2hsv(h)) : -1 !== ["h", "s", "v"].indexOf(i) && (e2[i] = t), u(e2, true);
    }), query(n.box).find(".color-original").off(".w2color").on("click.w2color", (e2) => {
      e2 = w2utils.parseColor(query(e2.target).css("background-color"));
      null != e2 && (h = e2, u(d = w2utils.rgb2hsv(h), true));
    });
    e = `${w2utils.isIOS ? "touchstart" : "mousedown"}.w2color`;
    let s = `${w2utils.isIOS ? "touchend" : "mouseup"}.w2color`, l = `${w2utils.isIOS ? "touchmove" : "mousemove"}.w2color`;
    function u(e2, t, i) {
      var _a;
      null != e2.h && (d.h = e2.h), null != e2.s && (d.s = e2.s), null != e2.v && (d.v = e2.v), null != e2.a && (h.a = e2.a, d.a = e2.a);
      let s2 = "rgba(" + (h = w2utils.hsv2rgb(d)).r + "," + h.g + "," + h.b + "," + h.a + ")", l2 = [Number(h.r).toString(16).toUpperCase(), Number(h.g).toString(16).toUpperCase(), Number(h.b).toString(16).toUpperCase(), Math.round(255 * Number(h.a)).toString(16).toUpperCase()];
      var r2, a2;
      l2.forEach((e3, t2) => {
        1 === e3.length && (l2[t2] = "0" + e3);
      }), s2 = l2[0] + l2[1] + l2[2] + l2[3], 1 === h.a && (s2 = l2[0] + l2[1] + l2[2]), query(n.box).find(".color-preview").css("background-color", "#" + s2), query(n.box).find("input").each((e3) => {
        e3.name && (null != h[e3.name] && (e3.value = h[e3.name]), null != d[e3.name] && (e3.value = d[e3.name]), "a" === e3.name) && (e3.value = h.a);
      }), i ? (e2 = ((_a = n.tmp) == null ? void 0 : _a.initColor) || s2, query(n.box).find(".color-original").css("background-color", "#" + e2), query(n.box).find(".w2ui-colors .w2ui-selected").removeClass("w2ui-selected"), query(n.box).find(`.w2ui-colors [name="${e2}"]`).addClass("w2ui-selected"), 8 == s2.length && o.tabClick(2, n.name)) : o.select(s2, n.name), t && (i = query(n.box).find(".palette .value1"), e2 = query(n.box).find(".rainbow .value2"), t = query(n.box).find(".alpha .value2"), r2 = parseInt(i[0].clientWidth) / 2, a2 = parseInt(e2[0].clientWidth) / 2, i.css({ left: 150 * d.s / 100 - r2 + "px", top: 125 * (100 - d.v) / 100 - r2 + "px" }), e2.css("left", d.h / 2.4 - a2 + "px"), t.css("left", 150 * h.a - a2 + "px"), c());
    }
    function c() {
      var e2 = w2utils.hsv2rgb(d.h, 100, 100), e2 = `${e2.r},${e2.g},` + e2.b;
      query(n.box).find(".palette").css("background-image", `linear-gradient(90deg, rgba(${e2},0) 0%, rgba(${e2},1) 100%)`);
    }
    function r(e2) {
      query("body").off(".w2color");
    }
    function p(e2) {
      var t = a.el, i = e2.pageX - a.x, e2 = e2.pageY - a.y;
      let s2 = a.left + i, l2 = a.top + e2;
      var i = parseInt(t.prop("clientWidth")) / 2, e2 = (s2 < -i && (s2 = -i), l2 < -i && (l2 = -i), s2 > a.width - i && (s2 = a.width - i), l2 > a.height - i && (l2 = a.height - i), t.hasClass("move-x") && t.css({ left: s2 + "px" }), t.hasClass("move-y") && t.css({ top: l2 + "px" }), query(t.get(0).parentNode).attr("name")), r2 = parseInt(t.css("left")) + i, t = parseInt(t.css("top")) + i;
      "palette" === e2 && u({ s: Math.round(r2 / a.width * 100), v: Math.round(100 - t / a.height * 100) }), "rainbow" === e2 && (u({ h: Math.round(2.4 * r2) }), c()), "alpha" === e2 && u({ a: parseFloat(Number(r2 / 150).toFixed(2)) });
    }
    query(n.box).find(".palette, .rainbow, .alpha").off(".w2color").on(e + ".w2color", function(e2) {
      var t = query(this).find(".value1, .value2"), i = parseInt(t.prop("clientWidth")) / 2;
      t.hasClass("move-x") && t.css({ left: e2.offsetX - i + "px" });
      t.hasClass("move-y") && t.css({ top: e2.offsetY - i + "px" });
      a = { el: t, x: e2.pageX, y: e2.pageY, width: t.prop("parentNode").clientWidth, height: t.prop("parentNode").clientHeight, left: parseInt(t.css("left")), top: parseInt(t.css("top")) }, p(e2), query("body").off(".w2color").on(l, p).on(s, r);
    });
  }
};
var MenuTooltip = class extends Tooltip {
  constructor() {
    super(), this.defaults = w2utils.extend({}, this.defaults, { type: "normal", items: [], index: null, render: null, spinner: false, msgNoItems: w2utils.lang("No items found"), topHTML: "", menuStyle: "", filter: false, markSearch: false, match: "contains", search: false, altRows: false, arrowSize: 10, align: "left", position: "bottom|top", class: "w2ui-white", anchorClass: "w2ui-focus", autoShowOn: "focus", hideOn: ["doc-click", "focus-change", "select"], onSelect: null, onSubMenu: null, onRemove: null });
  }
  attach(e, t) {
    let i;
    1 == arguments.length && e.anchor ? e = (i = e).anchor : 2 === arguments.length && null != t && "object" == typeof t && ((i = t).anchor = e);
    t = i.hideOn;
    i = w2utils.extend({}, this.defaults, i || {}), t && (i.hideOn = t), i.style += "; padding: 0;", null == i.items && (i.items = []), i.html = this.getMenuHTML(i);
    let s = super.attach(i), l = s.overlay;
    return l.on("show:after.attach, update:after.attach", (e2) => {
      var _a;
      if ((_a = s.overlay) == null ? void 0 : _a.box) {
        let e3 = "";
        l.selected = null, l.options.items = w2utils.normMenu(l.options.items), ["INPUT", "TEXTAREA"].includes(l.anchor.tagName) && (e3 = l.anchor.value, l.selected = l.anchor.dataset.selectedIndex);
        var t2 = query(s.overlay.box).find(".w2ui-eaction");
        w2utils.bindEvents(t2, this), this.applyFilter(l.name, null, e3).then((e4) => {
          l.tmp.searchCount = e4.count, l.tmp.search = e4.search, this.refreshSearch(l.name), this.initControls(s.overlay), this.refreshIndex(l.name);
        });
      }
    }), l.on("hide:after.attach", (e2) => {
      w2tooltip.hide(l.name + "-tooltip");
    }), s.select = (t2) => (l.on("select.attach", (e2) => {
      t2(e2);
    }), s), s.remove = (t2) => (l.on("remove.attach", (e2) => {
      t2(e2);
    }), s), s.subMenu = (t2) => (l.on("subMenu.attach", (e2) => {
      t2(e2);
    }), s), s;
  }
  update(e, t) {
    var i, s = Tooltip.active[e];
    s ? ((i = s.options).items != t && (i.items = t), t = this.getMenuHTML(i), i.html != t && (i.html = t, s.needsUpdate = true, this.show(e))) : console.log(`Tooltip "${e}" is not displayed. Cannot update it.`);
  }
  initControls(i) {
    query(i.box).find(".w2ui-menu:not(.w2ui-sub-menu)").off(".w2menu").on("mouseDown.w2menu", { delegate: ".w2ui-menu-item" }, (e) => {
      var t = e.delegate.dataset;
      this.menuDown(i, e, t.index, t.parents);
    }).on((w2utils.isIOS ? "touchStart" : "click") + ".w2menu", { delegate: ".w2ui-menu-item" }, (e) => {
      var t = e.delegate.dataset;
      this.menuClick(i, e, parseInt(t.index), t.parents);
    }).find(".w2ui-menu-item").off(".w2menu").on("mouseEnter.w2menu", (e) => {
      var _a;
      var t = e.target.dataset, t = (_a = i.options.items[t.index]) == null ? void 0 : _a.tooltip;
      t && w2tooltip.show({ name: i.name + "-tooltip", anchor: e.target, html: t, position: "right|left", hideOn: ["doc-click"] });
    }).on("mouseLeave.w2menu", (e) => {
      w2tooltip.hide(i.name + "-tooltip");
    }), ["INPUT", "TEXTAREA"].includes(i.anchor.tagName) && query(i.anchor).off(".w2menu").on("input.w2menu", (e) => {
    }).on("keyup.w2menu", (e) => {
      e._searchType = "filter", this.keyUp(i, e);
    }), i.options.search && query(i.box).find("#menu-search").off(".w2menu").on("keyup.w2menu", (e) => {
      e._searchType = "search", this.keyUp(i, e);
    });
  }
  getCurrent(e, t) {
    var e = Tooltip.active[e.replace(/[\s\.#]/g, "_")], i = e.options;
    let s = (t || (e.selected ?? "")).split("-");
    var t = s.length - 1, e = s[t], l = s.slice(0, s.length - 1).join("-"), e = w2utils.isInt(e) ? parseInt(e) : 0;
    let r = i.items;
    return s.forEach((e2, t2) => {
      t2 < s.length - 1 && (r = r[e2].items);
    }), { last: t, index: e, items: r, item: r[e], parents: l };
  }
  getMenuHTML(h, e, d, u) {
    if (h.spinner)
      return `
            <div class="w2ui-menu">
                <div class="w2ui-no-items">
                    <div class="w2ui-spinner"></div>
                    ${w2utils.lang("Loading...")}
                </div>
            </div>`;
    u = u || [], null == e && (e = h.items), Array.isArray(e) || (e = []);
    let c = 0, t = null, i = "", p = (!d && h.search && (i += `
                <div class="w2ui-menu-search">
                    <span class="w2ui-icon w2ui-icon-search"></span>
                    <input id="menu-search" class="w2ui-input" type="text"/>
                </div>`, e.forEach((e2) => e2.hidden = false)), !d && h.topHTML && (i += `<div class="w2ui-menu-top">${h.topHTML}</div>`), `
            ${i}
            <div class="w2ui-menu ${d ? "w2ui-sub-menu" : ""}" ${d ? "" : `style="${h.menuStyle}"`}
                data-parent="${u}">
        `);
    return e.forEach((r, a) => {
      t = r.icon;
      var n = (0 < u.length ? u.join("-") + "-" : "") + a;
      if (null == t && (t = null), -1 == ["radio", "check"].indexOf(h.type) || Array.isArray(r.items) || false === r.group || (t = true === r.checked ? "w2ui-icon-check" : "w2ui-icon-empty"), true !== r.hidden) {
        let i2 = r.text, s = "", l = "";
        if ("function" == typeof (i2 = "function" == typeof h.render ? h.render(r, h) : i2) && (i2 = i2(r, h)), t && ("<" !== String(t).slice(0, 1) && (t = `<span class="w2ui-icon ${t}"></span>`), s = `<div class="menu-icon">${t}</span></div>`), "break" !== r.type && null != i2 && "" !== i2 && "--" != String(i2).substr(0, 2)) {
          var o = ["w2ui-menu-item"];
          1 == h.altRows && o.push(c % 2 == 0 ? "w2ui-even" : "w2ui-odd");
          let e2 = 1, t2 = ("" === s && e2++, null == r.count && null == r.hotkey && true !== r.remove && null == r.items && e2++, null == r.tooltip && null != r.hint && (r.tooltip = r.hint), "");
          if (true === r.remove)
            t2 = '<span class="remove">x</span>';
          else if (null != r.items) {
            let e3 = [];
            "function" == typeof r.items ? e3 = r.items(r) : Array.isArray(r.items) && (e3 = r.items), t2 = "<span></span>", l = `
                            <div class="w2ui-sub-menu-box" style="${r.expanded ? "" : "display: none"}">
                                ${this.getMenuHTML(h, e3, true, u.concat(a))}
                            </div>`;
          } else
            null != r.count && (t2 += "<span>" + r.count + "</span>"), null != r.hotkey && (t2 += '<span class="hotkey">' + r.hotkey + "</span>");
          true === r.disabled && o.push("w2ui-disabled"), true === r._noSearchInside && o.push("w2ui-no-search-inside"), "" !== l && (o.push("has-sub-menu"), r.expanded ? o.push("expanded") : o.push("collapsed")), p += `
                        <div index="${n}" class="${o.join(" ")}" style="${r.style || ""}"
                            data-index="${a}" data-parents="${u.join("-")}">
                                <div style="width: ${(d ? 20 : 0) + parseInt(r.indent ?? 0)}px"></div>
                                ${s}
                                <div class="menu-text" colspan="${e2}">${w2utils.lang(i2)}</div>
                                <div class="menu-extra">${t2}</div>
                        </div>
                        ` + l, c++;
        } else {
          o = (i2 ?? "").replace(/^-+/g, "");
          p += `
                        <div index="${n}" class="w2ui-menu-divider ${"" != o ? "has-text" : ""}">
                            <div class="line"></div>
                            ${o ? `<div class="text">${o}</div>` : ""}
                        </div>`;
        }
      }
      e[a] = r;
    }), 0 === c && h.msgNoItems && (p += `
                <div class="w2ui-no-items">
                    ${w2utils.lang(h.msgNoItems)}
                </div>`), p += "</div>";
  }
  refreshIndex(e) {
    var t, i, e = Tooltip.active[e.replace(/[\s\.#]/g, "_")];
    e && (e.displayed || this.show(e.name), t = query(e.box).find(".w2ui-overlay-body").get(0), i = query(e.box).find(".w2ui-menu-search, .w2ui-menu-top").get(0), query(e.box).find(".w2ui-menu-item.w2ui-selected").removeClass("w2ui-selected"), e = query(e.box).find(`.w2ui-menu-item[index="${e.selected}"]`).addClass("w2ui-selected").get(0)) && (e.offsetTop + e.clientHeight > t.clientHeight + t.scrollTop && e.scrollIntoView({ behavior: "smooth", block: "start", inline: "start" }), e.offsetTop < t.scrollTop + (i ? i.clientHeight : 0)) && e.scrollIntoView({ behavior: "smooth", block: "end", inline: "end" });
  }
  refreshSearch(i) {
    var _a, _b;
    let s = Tooltip.active[i.replace(/[\s\.#]/g, "_")];
    s && (s.displayed || this.show(s.name), query(s.box).find(".w2ui-no-items").hide(), query(s.box).find(".w2ui-menu-item, .w2ui-menu-divider").each((e) => {
      var _a2, _b2;
      var t;
      ((_a2 = this.getCurrent(i, e.getAttribute("index")).item) == null ? void 0 : _a2.hidden) ? query(e).hide() : ((t = (_b2 = s.tmp) == null ? void 0 : _b2.search) && s.options.markSearch && w2utils.marker(e, t, { onlyFirst: "begins" == s.options.match }), query(e).show());
    }), query(s.box).find(".w2ui-sub-menu").each((e) => {
      var t = query(e).find(".w2ui-menu-item").get().some((e2) => "none" != e2.style.display);
      this.getCurrent(i, e.dataset.parent).item.expanded && (t ? query(e).parent().show() : query(e).parent().hide());
    }), 0 != s.tmp.searchCount && 0 != ((_b = (_a = s.options) == null ? void 0 : _a.items) == null ? void 0 : _b.length) || (0 == query(s.box).find(".w2ui-no-items").length && query(s.box).find(".w2ui-menu:not(.w2ui-sub-menu)").append(`
                    <div class="w2ui-no-items">
                        ${w2utils.lang(s.options.msgNoItems)}
                    </div>`), query(s.box).find(".w2ui-no-items").show()));
  }
  applyFilter(s, t, l, i) {
    var _a;
    let r = 0;
    var a = Tooltip.active[s.replace(/[\s\.#]/g, "_")];
    let n = a.options, o, h;
    var d = new Promise((e, t2) => {
      o = e, h = t2;
    });
    null == l && (l = ["INPUT", "TEXTAREA"].includes(a.anchor.tagName) ? a.anchor.value : "");
    let u = [];
    n.selected && (Array.isArray(n.selected) ? u = n.selected.map((e) => (e == null ? void 0 : e.id) ?? e) : ((_a = n.selected) == null ? void 0 : _a.id) && (u = [n.selected.id])), a.tmp.activeChain = null;
    var c = a.tmp.remote ?? { hasMore: true, emtpySet: false, search: null, total: -1 };
    if (null == t && n.url && c.hasMore && c.search !== l) {
      let e = true, t2 = w2utils.lang("Loading...");
      l.length < n.minLength && true !== c.emptySet && (t2 = w2utils.lang("${count} letters or more...", { count: n.minLength }), e = false, "" === l) && (t2 = w2utils.lang(n.msgSearch)), query(a.box).find(".w2ui-no-items").html(t2), c.search = l, n.items = [], a.tmp.remote = c, e && this.request(a, l, i).then((e2) => {
        this.update(s, e2), this.applyFilter(s, null, l).then((e3) => {
          o(e3);
        });
      }).catch((e2) => {
        console.log("Server Request error", e2);
      });
    } else {
      let e;
      null == t && true === (e = this.trigger("search", { search: l, overlay: a, prom: d, resolve: o, reject: h })).isCancelled || (null == t && (t = a.options.items), false === n.filter ? o({ count: -1, search: l }) : (t.forEach((t2) => {
        let e2 = "", i2 = "";
        -1 !== ["is", "begins", "begins with"].indexOf(n.match) && (e2 = "^"), -1 !== ["is", "ends", "ends with"].indexOf(n.match) && (i2 = "$");
        try {
          new RegExp(e2 + l + i2, "i").test(t2.text) || "..." === t2.text ? t2.hidden = false : t2.hidden = true;
        } catch (e3) {
        }
        n.hideSelected && u.includes(t2.id) && (t2.hidden = true), Array.isArray(t2.items) && 0 < t2.items.length && (delete t2._noSearchInside, this.applyFilter(s, t2.items, l).then((e3) => {
          e3 = e3.count;
          0 < e3 && (r += e3, t2.hidden && (t2._noSearchInside = true), l && (t2.expanded = true), t2.hidden = false);
        })), true !== t2.hidden && r++;
      }), o({ count: r, search: l }), e == null ? void 0 : e.finish()));
    }
    return d;
  }
  request(l, r, e) {
    let a = l.options, n = l.tmp.remote, o, h;
    return (0 === a.items.length && 0 !== n.total || n.total == a.cacheMax && r.length > n.search.length || r.length >= n.search.length && r.substr(0, n.search.length) !== n.search || r.length < n.search.length) && (n.controller && n.controller.abort(), n.loading = true, clearTimeout(n.timeout), n.timeout = setTimeout(() => {
      var e2 = a.url;
      let i = { search: r, max: a.cacheMax };
      Object.assign(i, a.postData);
      var t, s = this.trigger("request", { search: r, overlay: l, url: e2, postData: i, httpMethod: a.method ?? "GET", httpHeaders: {} });
      true !== s.isCancelled && (e2 = new URL(s.detail.url, location), t = w2utils.prepareParams(e2, { method: s.detail.httpMethod, headers: s.detail.httpHeaders, body: s.detail.postData }), n.controller = new AbortController(), t.signal = n.controller.signal, fetch(e2, t).then((e3) => e3.json()).then((e3) => {
        n.controller = null;
        var t2 = l.trigger("load", { search: i.search, overlay: l, data: e3 });
        true !== t2.isCancelled && ("string" == typeof (e3 = t2.detail.data) && (e3 = JSON.parse(e3)), null == (e3 = Array.isArray(e3) ? { records: e3 } : e3).records && null != e3.items && (e3.records = e3.items, delete e3.items), e3.error || null != e3.records || (e3.records = []), Array.isArray(e3.records) ? (e3.records.length >= a.cacheMax ? (e3.records.splice(a.cacheMax, e3.records.length), n.hasMore = true) : n.hasMore = false, null == a.recId && null != a.recid && (a.recId = a.recid), (a.recId || a.recText) && e3.records.forEach((e4) => {
          "string" == typeof a.recId && (e4.id = e4[a.recId]), "function" == typeof a.recId && (e4.id = a.recId(e4)), "string" == typeof a.recText && (e4.text = e4[a.recText]), "function" == typeof a.recText && (e4.text = a.recText(e4));
        }), n.loading = false, n.search = r, n.total = e3.records.length, n.lastError = "", n.emptySet = "" === r && 0 === e3.records.length, t2.finish(), o(w2utils.normMenu(e3.records))) : console.error("ERROR: server did not return proper data structure", "\n", " - it should return", { records: [{ id: 1, text: "item" }] }, "\n", " - or just an array ", [{ id: 1, text: "item" }], "\n", " - or if errorr ", { error: true, message: "error message" }));
      }).catch((e3) => {
        var t2 = this.trigger("error", { overlay: l, search: r, error: e3 });
        true !== t2.isCancelled && ("AbortError" !== (e3 == null ? void 0 : e3.name) && console.error("ERROR: Server communication failed.", "\n", " - it should return", { records: [{ id: 1, text: "item" }] }, "\n", " - or just an array ", [{ id: 1, text: "item" }], "\n", " - or if errorr ", { error: true, message: "error message" }), n.loading = false, n.search = "", n.total = -1, n.emptySet = true, n.lastError = t2.detail.error || "Server communication failed", a.items = [], t2.finish(), h());
      }), s.finish());
    }, e ? a.debounce ?? 350 : 0)), new Promise((e2, t) => {
      o = e2, h = t;
    });
  }
  getActiveChain(i, e, s = [], l = [], t) {
    var r = Tooltip.active[i.replace(/[\s\.#]/g, "_")];
    return null != r.tmp.activeChain ? r.tmp.activeChain : ((e = null == e ? r.options.items : e).forEach((e2, t2) => {
      var _a;
      e2.hidden || e2.disabled || ((_a = e2 == null ? void 0 : e2.text) == null ? void 0 : _a.startsWith("--")) || (l.push(s.concat([t2]).join("-")), Array.isArray(e2.items) && 0 < e2.items.length && e2.expanded && (s.push(t2), this.getActiveChain(i, e2.items, s, l, true), s.pop()));
    }), null == t && (r.tmp.activeChain = l), l);
  }
  menuDown(e, t, i, s) {
    e = e.options;
    let l = e.items;
    var r = query(t.delegate).find(".w2ui-icon");
    let a = query(t.target).closest(".w2ui-menu:not(.w2ui-sub-menu)"), n = ("string" == typeof s && "" !== s && s.split("-").forEach((e2) => {
      l = l[e2].items;
    }), l[i]);
    if (!n.disabled) {
      let l2 = (i2, s2) => {
        i2.forEach((e2, t2) => {
          e2.id != n.id && (e2.group === n.group && e2.checked && (a.find(`.w2ui-menu-item[index="${(s2 ? s2 + "-" : "") + t2}"] .w2ui-icon`).removeClass("w2ui-icon-check").addClass("w2ui-icon-empty"), i2[t2].checked = false), Array.isArray(e2.items)) && l2(e2.items, t2);
        });
      };
      "check" !== e.type && "radio" !== e.type || false === n.group || query(t.target).hasClass("remove") || query(t.target).closest(".w2ui-menu-item").hasClass("has-sub-menu") || (n.checked = "radio" == e.type || !n.checked, n.checked ? ("radio" === e.type && query(t.target).closest(".w2ui-menu").find(".w2ui-icon").removeClass("w2ui-icon-check").addClass("w2ui-icon-empty"), "check" === e.type && null != n.group && l2(e.items), r.removeClass("w2ui-icon-empty").addClass("w2ui-icon-check")) : "check" === e.type && r.removeClass("w2ui-icon-check").addClass("w2ui-icon-empty")), query(t.target).hasClass("remove") || (a.find(".w2ui-menu-item").removeClass("w2ui-selected"), query(t.delegate).addClass("w2ui-selected"));
    }
  }
  menuClick(t, i, s, l) {
    var r = t.options;
    let a = r.items;
    var n = query(i.delegate).closest(".w2ui-menu-item");
    let o = !r.hideOn.includes("select");
    (i.shiftKey || i.metaKey || i.ctrlKey) && (o = true), "string" == typeof l && "" !== l ? l.split("-").forEach((e) => {
      a = a[e].items;
    }) : l = null;
    var h = (a = "function" == typeof a ? a({ overlay: t, index: s, parentIndex: l, event: i }) : a)[s];
    if (!h.disabled || query(i.target).hasClass("remove")) {
      let e;
      if (query(i.target).hasClass("remove")) {
        if (true === (e = this.trigger("remove", { originalEvent: i, target: t.name, overlay: t, item: h, index: s, parentIndex: l, el: n[0] })).isCancelled)
          return;
        o = !r.hideOn.includes("item-remove"), n.remove();
      } else if (n.hasClass("has-sub-menu")) {
        if (true === (e = this.trigger("subMenu", { originalEvent: i, target: t.name, overlay: t, item: h, index: s, parentIndex: l, el: n[0] })).isCancelled)
          return;
        o = true, n.hasClass("expanded") ? (h.expanded = false, n.removeClass("expanded").addClass("collapsed"), query(n.get(0).nextElementSibling).hide()) : (h.expanded = true, n.addClass("expanded").removeClass("collapsed"), query(n.get(0).nextElementSibling).show()), t.selected = parseInt(n.attr("index"));
      } else {
        r = this.findChecked(r.items);
        if (t.selected = parseInt(n.attr("index")), true === (e = this.trigger("select", { originalEvent: i, target: t.name, overlay: t, item: h, index: s, parentIndex: l, selected: r, keepOpen: o, el: n[0] })).isCancelled)
          return;
        null != h.keepOpen && (o = h.keepOpen), ["INPUT", "TEXTAREA"].includes(t.anchor.tagName) && (t.anchor.dataset.selected = h.id, t.anchor.dataset.selectedIndex = t.selected);
      }
      o || this.hide(t.name), e.finish();
    }
  }
  findChecked(e) {
    let t = [];
    return e.forEach((e2) => {
      e2.checked && t.push(e2), Array.isArray(e2.items) && (t = t.concat(this.findChecked(e2.items)));
    }), t;
  }
  keyUp(s, l) {
    var _a, _b;
    var r = s.options, e = l.target.value;
    let a = true, n = false;
    switch (l.keyCode) {
      case 46:
      case 8:
        "" !== e || s.displayed || (a = false);
        break;
      case 13:
        if (!s.displayed || !s.selected)
          return;
        var { index: t, parents: i } = this.getCurrent(s.name);
        l.delegate = query(s.box).find(".w2ui-selected").get(0), this.menuClick(s, l, parseInt(t), i), a = false;
        break;
      case 27:
        a = false, s.displayed ? this.hide(s.name) : (t = s.anchor, ["INPUT", "TEXTAREA"].includes(t.tagName) && (t.value = "", delete t.dataset.selected, delete t.dataset.selectedIndex));
        break;
      case 37: {
        if (!s.displayed)
          return;
        let { item: e2, index: t2, parents: i2 } = this.getCurrent(s.name);
        i2 && (e2 = r.items[i2], t2 = parseInt(i2), i2 = "", n = true), Array.isArray(e2 == null ? void 0 : e2.items) && 0 < e2.items.length && e2.expanded && (l.delegate = query(s.box).find(`.w2ui-menu-item[index="${t2}"]`).get(0), s.selected = t2, this.menuClick(s, l, parseInt(t2), i2)), a = false;
        break;
      }
      case 39:
        if (!s.displayed)
          return;
        var { item: i, index: t, parents: o } = this.getCurrent(s.name);
        Array.isArray(i == null ? void 0 : i.items) && 0 < i.items.length && !i.expanded && (l.delegate = query(s.box).find(".w2ui-selected").get(0), this.menuClick(s, l, parseInt(t), o)), a = false;
        break;
      case 38:
        s.displayed && (i = this.getActiveChain(s.name), null == s.selected || 0 == ((_a = s.selected) == null ? void 0 : _a.length) ? s.selected = i[i.length - 1] : (-1 == (t = i.indexOf(s.selected)) && (s.selected = i[i.length - 1]), 0 < t && (s.selected = i[t - 1])), a = false, n = true, l.preventDefault());
        break;
      case 40:
        s.displayed && (o = this.getActiveChain(s.name), null == s.selected || 0 == ((_b = s.selected) == null ? void 0 : _b.length) ? s.selected = o[0] : (-1 == (i = o.indexOf(s.selected)) && (s.selected = o[0]), i < o.length - 1 && (s.selected = o[i + 1])), a = false, n = true, l.preventDefault());
    }
    a && s.displayed && (r.filter && "filter" == l._searchType || r.search && "search" == l._searchType) && this.applyFilter(s.name, null, e, true).then((e2) => {
      s.tmp.searchCount = e2.count, s.tmp.search = e2.search, 0 !== e2.count && this.getActiveChain(s.name).includes(s.selected) || (s.selected = null), this.refreshSearch(s.name);
    }), n && this.refreshIndex(s.name);
  }
};
var DateTooltip = class extends Tooltip {
  constructor() {
    super();
    var e = /* @__PURE__ */ new Date();
    this.daysCount = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], this.today = e.getFullYear() + "/" + (Number(e.getMonth()) + 1) + "/" + e.getDate(), this.defaults = w2utils.extend({}, this.defaults, { position: "top|bottom", class: "w2ui-calendar", type: "date", format: "", value: "", start: null, end: null, blockDates: [], blockWeekdays: [], colored: {}, arrowSize: 12, autoResize: false, anchorClass: "w2ui-focus", autoShowOn: "focus", hideOn: ["doc-click", "focus-change"], onSelect: null });
  }
  attach(e, t) {
    let i;
    1 == arguments.length && e.anchor ? e = (i = e).anchor : 2 === arguments.length && null != t && "object" == typeof t && ((i = t).anchor = e);
    var t = i.hideOn, e = (i = w2utils.extend({}, this.defaults, i || {}), t && (i.hideOn = t), i.format || (e = w2utils.settings.dateFormat, t = w2utils.settings.timeFormat, "date" == i.type ? i.format = e : "time" == i.type ? i.format = t : i.format = e + "|" + t), "time" == i.type ? this.getHourHTML(i) : this.getMonthHTML(i));
    i.style += "; padding: 0;", i.html = e.html;
    let s = super.attach(i), l = s.overlay;
    return Object.assign(l.tmp, e), l.on("show.attach", (e2) => {
      var e2 = e2.detail.overlay, t2 = e2.anchor, i2 = e2.options;
      ["INPUT", "TEXTAREA"].includes(t2.tagName) && !i2.value && t2.value && (e2.tmp.initValue = t2.value), delete e2.newValue, delete e2.newDate;
    }), l.on("show:after.attach", (e2) => {
      var _a;
      ((_a = s.overlay) == null ? void 0 : _a.box) && this.initControls(s.overlay);
    }), l.on("update:after.attach", (e2) => {
      var _a;
      ((_a = s.overlay) == null ? void 0 : _a.box) && this.initControls(s.overlay);
    }), l.on("hide.attach", (e2) => {
      var e2 = e2.detail.overlay, t2 = e2.anchor;
      null != e2.newValue && (e2.newDate && (e2.newValue = e2.newDate + " " + e2.newValue), ["INPUT", "TEXTAREA"].includes(t2.tagName) && t2.value != e2.newValue && (t2.value = e2.newValue), true !== (t2 = this.trigger("select", { date: e2.newValue, target: e2.name, overlay: e2 })).isCancelled) && t2.finish();
    }), s.select = (t2) => (l.on("select.attach", (e2) => {
      t2(e2);
    }), s), s;
  }
  initControls(l) {
    let r = l.options, t = (e) => {
      let { month: t2, year: i2 } = l.tmp;
      12 < (t2 += e) && (t2 = 1, i2++), t2 < 1 && (t2 = 12, i2--);
      e = this.getMonthHTML(r, t2, i2);
      Object.assign(l.tmp, e), query(l.box).find(".w2ui-overlay-body").html(e.html), this.initControls(l);
    }, i = (e, t2) => {
      query(e.target).parent().find(".w2ui-jump-month, .w2ui-jump-year").removeClass("w2ui-selected"), query(e.target).addClass("w2ui-selected");
      e = /* @__PURE__ */ new Date();
      let { jumpMonth: i2, jumpYear: s } = l.tmp;
      (i2 = t2 && (null == s && (s = e.getFullYear()), null == i2) ? e.getMonth() + 1 : i2) && s && (t2 = this.getMonthHTML(r, i2, s), Object.assign(l.tmp, t2), query(l.box).find(".w2ui-overlay-body").html(t2.html), l.tmp.jump = false, this.initControls(l));
    };
    query(l.box).find(".w2ui-cal-title").off(".calendar").on("click.calendar", (e) => {
      var t2, i2;
      Object.assign(l.tmp, { jumpYear: null, jumpMonth: null }), l.tmp.jump ? ({ month: t2, year: i2 } = l.tmp, t2 = this.getMonthHTML(r, t2, i2), query(l.box).find(".w2ui-overlay-body").html(t2.html), l.tmp.jump = false) : (query(l.box).find(".w2ui-overlay-body .w2ui-cal-days").replace(this.getYearHTML()), (i2 = query(l.box).find(`[name="${l.tmp.year}"]`).get(0)) && i2.scrollIntoView(true), l.tmp.jump = true), this.initControls(l), e.stopPropagation();
    }).find(".w2ui-cal-previous").off(".calendar").on("click.calendar", (e) => {
      t(-1), e.stopPropagation();
    }).parent().find(".w2ui-cal-next").off(".calendar").on("click.calendar", (e) => {
      t(1), e.stopPropagation();
    }), query(l.box).find(".w2ui-cal-now").off(".calendar").on("click.calendar", (e) => {
      "datetime" == r.type ? l.newDate ? l.newValue = w2utils.formatTime(/* @__PURE__ */ new Date(), r.format.split("|")[1]) : l.newValue = w2utils.formatDateTime(/* @__PURE__ */ new Date(), r.format) : "date" == r.type ? l.newValue = w2utils.formatDate(/* @__PURE__ */ new Date(), r.format) : "time" == r.type && (l.newValue = w2utils.formatTime(/* @__PURE__ */ new Date(), r.format)), this.hide(l.name);
    }), query(l.box).off(".calendar").on("click.calendar", { delegate: ".w2ui-day.w2ui-date" }, (e) => {
      "datetime" == r.type ? (l.newDate = query(e.target).attr("date"), query(l.box).find(".w2ui-overlay-body").html(this.getHourHTML(l.options).html), this.initControls(l)) : (l.newValue = query(e.target).attr("date"), this.hide(l.name));
    }).on("click.calendar", { delegate: ".w2ui-jump-month" }, (e) => {
      l.tmp.jumpMonth = parseInt(query(e.target).attr("name")), i(e);
    }).on("dblclick.calendar", { delegate: ".w2ui-jump-month" }, (e) => {
      l.tmp.jumpMonth = parseInt(query(e.target).attr("name")), i(e, true);
    }).on("click.calendar", { delegate: ".w2ui-jump-year" }, (e) => {
      l.tmp.jumpYear = parseInt(query(e.target).attr("name")), i(e);
    }).on("dblclick.calendar", { delegate: ".w2ui-jump-year" }, (e) => {
      l.tmp.jumpYear = parseInt(query(e.target).attr("name")), i(e, true);
    }).on("click.calendar", { delegate: ".w2ui-time.hour" }, (e) => {
      var e = query(e.target).attr("hour");
      let t2 = this.str2min(r.value) % 60;
      l.tmp.initValue && !r.value && (t2 = this.str2min(l.tmp.initValue) % 60), r.noMinutes ? (l.newValue = this.min2str(60 * e, r.format), this.hide(l.name)) : (l.newValue = e + ":" + t2, e = this.getMinHTML(e, r).html, query(l.box).find(".w2ui-overlay-body").html(e), this.initControls(l));
    }).on("click.calendar", { delegate: ".w2ui-time.min" }, (e) => {
      e = 60 * Math.floor(this.str2min(l.newValue) / 60) + parseInt(query(e.target).attr("min"));
      l.newValue = this.min2str(e, r.format), this.hide(l.name);
    });
  }
  getMonthHTML(l, r, e) {
    var t = w2utils.settings.fulldays.slice(), i = w2utils.settings.shortdays.slice();
    "M" !== w2utils.settings.weekStarts && (t.unshift(t.pop()), i.unshift(i.pop()));
    let s = /* @__PURE__ */ new Date();
    var t = "datetime" === l.type ? w2utils.isDateTime(l.value, l.format, true) : w2utils.isDate(l.value, l.format, true), a = w2utils.formatDate(t);
    null != r && null != e || (e = (t || s).getFullYear(), r = t ? t.getMonth() + 1 : s.getMonth() + 1), 12 < r && (r -= 12, e++), (r < 1 || 0 === r) && (r += 12, e--), e / 4 == Math.floor(e / 4) ? this.daysCount[1] = 29 : this.daysCount[1] = 28, l.current = r + "/" + e;
    let n = (s = new Date(e, r - 1, 1)).getDay(), o = "";
    var h = w2utils.settings.weekStarts;
    for (let e2 = 0; e2 < i.length; e2++) {
      var d = "M" == h && 5 == e2 || "M" != h && 6 == e2, u = "M" == h && 6 == e2 || "M" != h && 0 == e2;
      o += `<div class="w2ui-day w2ui-weekday ${d ? "w2ui-sunday" : ""} ${u ? "w2ui-saturday" : ""}">${i[e2]}</div>`;
    }
    let c = `
            <div class="w2ui-cal-title">
                <div class="w2ui-cal-previous">
                    <div></div>
                </div>
                <div class="w2ui-cal-next">
                    <div></div>
                </div>
                ${w2utils.settings.fullmonths[r - 1]}, ${e}
                <span class="arrow-down"></span>
            </div>
            <div class="w2ui-cal-days">
                ${o}
        `, p = /* @__PURE__ */ new Date(e + `/${r}/1`);
    t = (p = new Date(p.getTime() + 432e5)).getDay();
    "M" == w2utils.settings.weekStarts && n--, 0 < t && (p = new Date(p.getTime() - 864e5 * n));
    for (let e2 = 0; e2 < 42; e2++) {
      var f = [], m = `${p.getFullYear()}/${p.getMonth() + 1}/` + p.getDate(), g = (6 === p.getDay() && f.push("w2ui-saturday"), 0 === p.getDay() && f.push("w2ui-sunday"), p.getMonth() + 1 !== r && f.push("outside"), m == this.today && f.push("w2ui-today"), p.getDate());
      let e3 = "", t2 = "", i2, s2;
      s2 = "datetime" === l.type ? (i2 = w2utils.formatDateTime(m, l.format), w2utils.formatDate(m, w2utils.settings.dateFormat)) : i2 = w2utils.formatDate(m, l.format), l.colored && void 0 !== l.colored[s2] && (m = l.colored[s2].split("|"), t2 = "background-color: " + m[0] + ";", e3 = "color: " + m[1] + ";"), c += `<div class="w2ui-day ${this.inRange(i2, l, true) ? "w2ui-date " + (s2 == a ? "w2ui-selected" : "") : "w2ui-blocked"} ${f.join(" ")}"
                       style="${e3 + t2}" date="${s2}" data-date="${p.getTime()}">
                            ${g}
                    </div>`, p = new Date(p.getTime() + 864e5);
    }
    return c += "</div>", l.btnNow && (t = w2utils.lang("Today" + ("datetime" == l.type ? " & Now" : "")), c += `<div class="w2ui-cal-now">${t}</div>`), { html: c, month: r, year: e };
  }
  getYearHTML() {
    let t = "", i = "";
    for (let e = 0; e < w2utils.settings.fullmonths.length; e++)
      t += `<div class="w2ui-jump-month" name="${e + 1}">${w2utils.settings.shortmonths[e]}</div>`;
    for (let e = w2utils.settings.dateStartYear; e <= w2utils.settings.dateEndYear; e++)
      i += `<div class="w2ui-jump-year" name="${e}">${e}</div>`;
    return `<div class="w2ui-cal-jump">
            <div id="w2ui-jump-month">${t}</div>
            <div id="w2ui-jump-year">${i}</div>
        </div>`;
  }
  getHourHTML(l) {
    (l = l ?? {}).format || (l.format = w2utils.settings.timeFormat);
    var r = -1 < l.format.indexOf("h24"), a = l.value || (l.anchor ? l.anchor.value : ""), n = [];
    for (let s = 0; s < 24; s++) {
      let e = (12 <= s && !r ? s - 12 : s) + ":00" + (r ? "" : s < 12 ? " am" : " pm"), t = (12 != s || r || (e = "12:00 pm"), n[Math.floor(s / 8)] || (n[Math.floor(s / 8)] = ""), this.min2str(this.str2min(e))), i = this.min2str(this.str2min(e) + 59);
      "datetime" === l.type && (h = w2utils.isDateTime(a, l.format, true), o = l.format.split("|")[0].trim(), t = w2utils.formatDate(h, o) + " " + t, i = w2utils.formatDate(h, o) + " " + i);
      var o, h = this.inRange(t, l) || this.inRange(i, l);
      n[Math.floor(s / 8)] += `<span hour="${s}"
                class="hour ${h ? "w2ui-time " : "w2ui-blocked"}">${e}</span>`;
    }
    return { html: `<div class="w2ui-calendar">
            <div class="w2ui-time-title">${w2utils.lang("Select Hour")}</div>
            <div class="w2ui-cal-time">
                <div class="w2ui-cal-column">${n[0]}</div>
                <div class="w2ui-cal-column">${n[1]}</div>
                <div class="w2ui-cal-column">${n[2]}</div>
            </div>
            ${l.btnNow ? `<div class="w2ui-cal-now">${w2utils.lang("Now")}</div>` : ""}
        </div>` };
  }
  getMinHTML(i, s) {
    null == i && (i = 0), (s = s ?? {}).format || (s.format = w2utils.settings.timeFormat);
    var l = -1 < s.format.indexOf("h24"), r = s.value || (s.anchor ? s.anchor.value : ""), a = [];
    for (let t = 0; t < 60; t += 5) {
      var n = (12 < i && !l ? i - 12 : i) + ":" + (t < 10 ? 0 : "") + t + " " + (l ? "" : i < 12 ? "am" : "pm");
      let e = n;
      var o, h, d = t < 20 ? 0 : t < 40 ? 1 : 2;
      a[d] || (a[d] = ""), "datetime" === s.type && (o = w2utils.isDateTime(r, s.format, true), h = s.format.split("|")[0].trim(), e = w2utils.formatDate(o, h) + " " + e), a[d] += `<span min="${t}" class="min ${this.inRange(e, s) ? "w2ui-time " : "w2ui-blocked"}">${n}</span>`;
    }
    return { html: `<div class="w2ui-calendar">
            <div class="w2ui-time-title">${w2utils.lang("Select Minute")}</div>
            <div class="w2ui-cal-time">
                <div class="w2ui-cal-column">${a[0]}</div>
                <div class="w2ui-cal-column">${a[1]}</div>
                <div class="w2ui-cal-column">${a[2]}</div>
            </div>
            ${s.btnNow ? `<div class="w2ui-cal-now">${w2utils.lang("Now")}</div>` : ""}
        </div>` };
  }
  inRange(i, s, e) {
    let l = false;
    if ("date" === s.type) {
      var r = w2utils.isDate(i, s.format, true);
      if (r) {
        if (s.start || s.end) {
          var a = "string" == typeof s.start ? s.start : query(s.start).val(), n = "string" == typeof s.end ? s.end : query(s.end).val();
          let e2 = w2utils.isDate(a, s.format, true), t = w2utils.isDate(n, s.format, true);
          a = new Date(r);
          e2 = e2 || a, t = t || a, a >= e2 && a <= t && (l = true);
        } else
          l = true;
        Array.isArray(s.blockDates) && s.blockDates.includes(i) && (l = false), Array.isArray(s.blockWeekdays) && s.blockWeekdays.includes(r.getDay()) && (l = false);
      }
    } else if ("time" === s.type)
      if (s.start || s.end) {
        n = this.str2min(i);
        let e2 = this.str2min(s.start), t = this.str2min(s.end);
        e2 = e2 || n, t = t || n, n >= e2 && n <= t && (l = true);
      } else
        l = true;
    else
      "datetime" === s.type && (a = w2utils.isDateTime(i, s.format, true)) && (r = s.format.split("|").map((e2) => e2.trim()), e ? (n = w2utils.formatDate(a, r[0]), i = w2utils.extend({}, s, { type: "date", format: r[0] }), this.inRange(n, i) && (l = true)) : (e = w2utils.formatTime(a, r[1]), n = { type: "time", format: r[1], start: s.startTime, end: s.endTime }, this.inRange(e, n) && (l = true)));
    return l;
  }
  str2min(e) {
    var t;
    return "string" != typeof e || 2 !== (t = e.split(":")).length ? null : (t[0] = parseInt(t[0]), t[1] = parseInt(t[1]), -1 !== e.indexOf("pm") && 12 !== t[0] && (t[0] += 12), e.includes("am") && 12 == t[0] && (t[0] = 0), 60 * t[0] + t[1]);
  }
  min2str(e, t) {
    let i = "";
    1440 <= e && (e %= 1440), e < 0 && (e = 1440 + e);
    var s = Math.floor(e / 60), e = (e % 60 < 10 ? "0" : "") + e % 60;
    return t = t || w2utils.settings.timeFormat, i = -1 !== t.indexOf("h24") ? s + ":" + e : (s <= 12 ? s : s - 12) + ":" + e + " " + (12 <= s ? "pm" : "am");
  }
};
var w2tooltip = new Tooltip();
var w2menu = new MenuTooltip();
var w2color = new ColorTooltip();
var w2date = new DateTooltip();
var w2toolbar = class extends w2base {
  constructor(e) {
    super(e.name), this.box = null, this.name = null, this.routeData = {}, this.items = [], this.right = "", this.tooltip = "top|left", this.onClick = null, this.onMouseDown = null, this.onMouseUp = null, this.onMouseEnter = null, this.onMouseLeave = null, this.onRender = null, this.onRefresh = null, this.onResize = null, this.onDestroy = null, this.item_template = { id: null, type: "button", text: null, html: "", tooltip: null, count: null, hidden: false, disabled: false, checked: false, icon: null, route: null, arrow: null, style: null, group: null, items: null, selected: null, color: null, overlay: { anchorClass: "" }, onClick: null, onRefresh: null }, this.last = { badge: {} };
    var t = e.items;
    delete e.items, Object.assign(this, e), Array.isArray(t) && this.add(t, true), e.items = t, "string" == typeof this.box && (this.box = query(this.box).get(0)), this.box && this.render(this.box);
  }
  add(e, t) {
    this.insert(null, e, t);
  }
  insert(r, e, a) {
    (e = Array.isArray(e) ? e : [e]).forEach((e2, t, i) => {
      "string" == typeof e2 && (e2 = i[t] = { id: e2, text: e2 });
      var l, s = ["button", "check", "radio", "drop", "menu", "menu-radio", "menu-check", "color", "text-color", "html", "break", "spacer", "new-line"];
      if (s.includes(String(e2.type)))
        if (null != e2.id || ["break", "spacer", "new-line"].includes(e2.type)) {
          if (null == e2.type)
            console.log('ERROR: The parameter "type" is required but not supplied.', e2);
          else if (w2utils.checkUniqueId(e2.id, this.items, "toolbar", this.name)) {
            let s2 = w2utils.extend({}, this.item_template, e2);
            "menu-check" == s2.type ? (Array.isArray(s2.selected) || (s2.selected = []), Array.isArray(s2.items) && s2.items.forEach((e3) => {
              (e3 = "string" == typeof e3 ? i[t] = { id: e3, text: e3 } : e3).checked && !s2.selected.includes(e3.id) && s2.selected.push(e3.id), !e3.checked && s2.selected.includes(e3.id) && (e3.checked = true), null == e3.checked && (e3.checked = false);
            })) : "menu-radio" == s2.type && Array.isArray(s2.items) && s2.items.forEach((e3, t2, i2) => {
              (e3 = "string" == typeof e3 ? i2[t2] = { id: e3, text: e3 } : e3).checked && null == s2.selected ? s2.selected = e3.id : e3.checked = false, e3.checked || s2.selected != e3.id || (e3.checked = true), null == e3.checked && (e3.checked = false);
            }), null == r ? this.items.push(s2) : (l = this.get(r, true), this.items = this.items.slice(0, l).concat([s2], this.items.slice(l))), s2.line = s2.line ?? 1, true !== a && this.refresh(s2.id);
          }
        } else
          console.log('ERROR: The parameter "id" is required but not supplied.', e2);
      else
        console.log('ERROR: The parameter "type" should be one of the following:', s, `, but ${e2.type} is supplied.`, e2);
    }), true !== a && this.resize();
  }
  remove() {
    let i = 0;
    return Array.from(arguments).forEach((e) => {
      var t = this.get(e);
      t && -1 == String(e).indexOf(":") && (i++, query(this.box).find("#tb_" + this.name + "_item_" + w2utils.escapeId(t.id)).remove(), null != (e = this.get(t.id, true))) && this.items.splice(e, 1);
    }), this.resize(), i;
  }
  set(e, t) {
    var i = this.get(e);
    return null != i && (Object.assign(i, t), this.refresh(String(e).split(":")[0]), true);
  }
  get(e, i) {
    if (0 === arguments.length) {
      var t = [];
      for (let e2 = 0; e2 < this.items.length; e2++)
        null != this.items[e2].id && t.push(this.items[e2].id);
      return t;
    }
    var s = String(e).split(":");
    for (let e2 = 0; e2 < this.items.length; e2++) {
      var l = this.items[e2];
      if (["menu", "menu-radio", "menu-check"].includes(l.type) && 2 == s.length && l.id == s[0]) {
        let e3 = l.items;
        "function" == typeof e3 && (e3 = e3(this));
        for (let t2 = 0; t2 < e3.length; t2++) {
          var r = e3[t2];
          if (r.id == s[1] || null == r.id && r.text == s[1])
            return 1 == i ? t2 : r;
          if (Array.isArray(r.items)) {
            for (let e4 = 0; e4 < r.items.length; e4++)
              if (r.items[e4].id == s[1] || null == r.items[e4].id && r.items[e4].text == s[1])
                return 1 == i ? t2 : r.items[e4];
          }
        }
      } else if (l.id == s[0])
        return 1 == i ? e2 : l;
    }
    return null;
  }
  setCount(e, t, i, s) {
    var l = query(this.box).find(`#tb_${this.name}_item_${w2utils.escapeId(e)} .w2ui-tb-count > span`);
    0 < l.length ? (l.removeClass().addClass(i ?? "").text(t).get(0).style.cssText = s ?? "", this.last.badge[e] = { className: i ?? "", style: s ?? "" }, this.get(e).count = t) : (this.set(e, { count: t }), this.setCount(...arguments));
  }
  show() {
    let i = [];
    return Array.from(arguments).forEach((e) => {
      var t = this.get(e);
      t && (t.hidden = false, i.push(String(e).split(":")[0]));
    }), setTimeout(() => {
      i.forEach((e) => {
        this.refresh(e), this.resize();
      });
    }, 15), i;
  }
  hide() {
    let i = [];
    return Array.from(arguments).forEach((e) => {
      var t = this.get(e);
      t && (t.hidden = true, i.push(String(e).split(":")[0]));
    }), setTimeout(() => {
      i.forEach((e) => {
        this.refresh(e), this.tooltipHide(e), this.resize();
      });
    }, 15), i;
  }
  enable() {
    let i = [];
    return Array.from(arguments).forEach((e) => {
      var t = this.get(e);
      t && (t.disabled = false, i.push(String(e).split(":")[0]));
    }), setTimeout(() => {
      i.forEach((e) => {
        this.refresh(e);
      });
    }, 15), i;
  }
  disable() {
    let i = [];
    return Array.from(arguments).forEach((e) => {
      var t = this.get(e);
      t && (t.disabled = true, i.push(String(e).split(":")[0]));
    }), setTimeout(() => {
      i.forEach((e) => {
        this.refresh(e), this.tooltipHide(e);
      });
    }, 15), i;
  }
  check() {
    let i = [];
    return Array.from(arguments).forEach((e) => {
      var t = this.get(e);
      t && -1 == String(e).indexOf(":") && (t.checked = true, i.push(String(e).split(":")[0]));
    }), setTimeout(() => {
      i.forEach((e) => {
        this.refresh(e);
      });
    }, 15), i;
  }
  uncheck() {
    let i = [];
    return Array.from(arguments).forEach((e) => {
      var t = this.get(e);
      t && -1 == String(e).indexOf(":") && (["menu", "menu-radio", "menu-check", "drop", "color", "text-color"].includes(t.type) && t.checked && w2tooltip.hide(this.name + "-drop"), t.checked = false, i.push(String(e).split(":")[0]));
    }), setTimeout(() => {
      i.forEach((e) => {
        this.refresh(e);
      });
    }, 15), i;
  }
  click(e, t) {
    var i = String(e).split(":");
    let l = this.get(i[0]), r = l && l.items ? w2utils.normMenu.call(this, l.items, l) : [];
    if (1 < i.length)
      (i = this.get(e)) && !i.disabled && this.menuClick({ name: this.name, item: l, subItem: i, originalEvent: t });
    else if (l && !l.disabled) {
      i = this.trigger("click", { target: null != e ? e : this.name, item: l, object: l, originalEvent: t });
      if (true !== i.isCancelled) {
        r = l && l.items ? w2utils.normMenu.call(this, l.items, l) : [];
        let s = "#tb_" + this.name + "_item_" + w2utils.escapeId(l.id);
        if (query(this.box).find(s).removeClass("down"), "radio" == l.type) {
          for (let e2 = 0; e2 < this.items.length; e2++) {
            var a = this.items[e2];
            null != a && a.id != l.id && "radio" === a.type && a.group == l.group && a.checked && (a.checked = false, this.refresh(a.id));
          }
          l.checked = true, query(this.box).find(s).addClass("checked");
        }
        if (["menu", "menu-radio", "menu-check", "drop", "color", "text-color"].includes(l.type)) {
          if (this.tooltipHide(e), l.checked)
            return void w2tooltip.hide(this.name + "-drop");
          setTimeout(() => {
            var t2 = (e2, t3) => {
              let i3 = this;
              return function() {
                i3.set(e2, { checked: false });
              };
            }, i2 = query(this.box).find("#tb_" + this.name + "_item_" + w2utils.escapeId(l.id));
            if (w2utils.isPlainObject(l.overlay) || (l.overlay = {}), "drop" == l.type && w2tooltip.show(w2utils.extend({ html: l.html, class: "w2ui-white", hideOn: ["doc-click"] }, l.overlay, { anchor: i2[0], name: this.name + "-drop", data: { item: l, btn: s } })).hide(t2(l.id, s)), ["menu", "menu-radio", "menu-check"].includes(l.type)) {
              let e2 = "normal";
              "menu-radio" == l.type && (e2 = "radio", r.forEach((e3) => {
                l.selected == e3.id ? e3.checked = true : e3.checked = false;
              })), "menu-check" == l.type && (e2 = "check", r.forEach((e3) => {
                Array.isArray(l.selected) && l.selected.includes(e3.id) ? e3.checked = true : e3.checked = false;
              })), w2menu.show(w2utils.extend({ items: r }, l.overlay, { type: e2, name: this.name + "-drop", anchor: i2[0], data: { item: l, btn: s } })).hide(t2(l.id, s)).remove((e3) => {
                this.menuClick({ name: this.name, remove: true, item: l, subItem: e3.detail.item, originalEvent: e3 });
              }).select((e3) => {
                this.menuClick({ name: this.name, item: l, subItem: e3.detail.item, originalEvent: e3 });
              });
            }
            ["color", "text-color"].includes(l.type) && w2color.show(w2utils.extend({ color: l.color }, l.overlay, { anchor: i2[0], name: this.name + "-drop", data: { item: l, btn: s } })).hide(t2(l.id, s)).select((e2) => {
              null != e2.detail.color && this.colorClick({ name: this.name, item: l, color: e2.detail.color });
            });
          }, 0);
        }
        if (["check", "menu", "menu-radio", "menu-check", "drop", "color", "text-color"].includes(l.type) && (l.checked = !l.checked, l.checked ? query(this.box).find(s).addClass("checked") : query(this.box).find(s).removeClass("checked")), l.route) {
          let t2 = String("/" + l.route).replace(/\/{2,}/g, "/");
          var n = w2utils.parseRoute(t2);
          if (0 < n.keys.length)
            for (let e2 = 0; e2 < n.keys.length; e2++)
              t2 = t2.replace(new RegExp(":" + n.keys[e2].name, "g"), this.routeData[n.keys[e2].name]);
          setTimeout(() => {
            window.location.hash = t2;
          }, 1);
        }
        this.tooltipShow(e), i.finish();
      }
    }
  }
  scroll(n, o, h) {
    return new Promise((e, t) => {
      var i = query(this.box).find(`.w2ui-tb-line:nth-child(${o}) .w2ui-scroll-wrapper`), s = i.get(0).scrollLeft, l = i.find(".w2ui-tb-right").get(0), r = i.parent().get(0).getBoundingClientRect().width, a = s + parseInt(l.offsetLeft) + parseInt(l.clientWidth);
      switch (n) {
        case "left":
          (scroll = s - r + 50) <= 0 && (scroll = 0), i.get(0).scrollTo({ top: 0, left: scroll, behavior: h ? "atuo" : "smooth" });
          break;
        case "right":
          (scroll = s + r - 50) >= a - r && (scroll = a - r), i.get(0).scrollTo({ top: 0, left: scroll, behavior: h ? "atuo" : "smooth" });
      }
      setTimeout(() => {
        this.resize(), e();
      }, h ? 0 : 500);
    });
  }
  render(e) {
    var s = Date.now(), l = ("string" == typeof e && (e = query(e).get(0)), this.trigger("render", { target: this.name, box: e ?? this.box }));
    if (true !== l.isCancelled && (null != e && (0 < query(this.box).find(".w2ui-scroll-wrapper .w2ui-tb-right").length && query(this.box).removeAttr("name").removeClass("w2ui-reset w2ui-toolbar").html(""), this.box = e), this.box)) {
      Array.isArray(this.right) || (this.right = [this.right]);
      let t = "", i = 0;
      for (let e2 = 0; e2 < this.items.length; e2++) {
        var r = this.items[e2];
        null != r && (null == r.id && (r.id = "item_" + e2), null != r.caption && console.log("NOTICE: toolbar item.caption property is deprecated, please use item.text. Item -> ", r), null != r.hint && console.log("NOTICE: toolbar item.hint property is deprecated, please use item.tooltip. Item -> ", r), 0 !== e2 && "new-line" != r.type || (i++, t += `
                    <div class="w2ui-tb-line">
                        <div class="w2ui-scroll-wrapper w2ui-eaction" data-mousedown="resize">
                            <div class="w2ui-tb-right">${this.right[i - 1] ?? ""}</div>
                        </div>
                        <div class="w2ui-scroll-left w2ui-eaction" data-click='["scroll", "left", "${i}"]'></div>
                        <div class="w2ui-scroll-right w2ui-eaction" data-click='["scroll", "right", "${i}"]'></div>
                    </div>
                `), r.line = i);
      }
      return query(this.box).attr("name", this.name).addClass("w2ui-reset w2ui-toolbar").html(t), 0 < query(this.box).length && (query(this.box)[0].style.cssText += this.style), w2utils.bindEvents(query(this.box).find(".w2ui-tb-line .w2ui-eaction"), this), this.last.observeResize = new ResizeObserver(() => {
        this.resize();
      }), this.last.observeResize.observe(this.box), this.refresh(), this.resize(), l.finish(), Date.now() - s;
    }
  }
  refresh(t) {
    var i = Date.now(), l = this.trigger("refresh", { target: null != t ? t : this.name, item: this.get(t) });
    if (true !== l.isCancelled) {
      let e;
      if (null == t)
        for (let e2 = 0; e2 < this.items.length; e2++) {
          var s = this.items[e2];
          null == s.id && (s.id = "item_" + e2), this.refresh(s.id);
        }
      else {
        var r = this.get(t);
        if (null == r)
          return false;
        if ("function" != typeof r.onRefresh || true !== (e = this.trigger("refresh", { target: t, item: r, object: r })).isCancelled) {
          var a = `#tb_${this.name}_item_` + w2utils.escapeId(r.id);
          let s2 = query(this.box).find(a);
          var n = this.getItemHTML(r);
          if (this.tooltipHide(t), "spacer" == r.type && query(this.box).find(".w2ui-tb-line:nth-child(" + r.line).find(".w2ui-tb-right").css("width", "auto"), 0 === s2.length) {
            t = parseInt(this.get(t, true)) + 1;
            let e2 = query(this.box).find(`#tb_${this.name}_item_` + w2utils.escapeId(this.items[t] ? this.items[t].id : ""));
            0 == e2.length ? e2 = query(this.box).find(".w2ui-tb-line:nth-child(" + r.line).find(".w2ui-tb-right").before(n) : e2.after(n), w2utils.bindEvents(query(this.box).find(a), this);
          } else {
            query(this.box).find(a).replace(query.html(n));
            let t2 = query(this.box).find(a).get(0), i2 = (w2utils.bindEvents(t2, this), w2tooltip.get(true));
            Object.keys(i2).forEach((e2) => {
              i2[e2].anchor == s2.get(0) && (i2[e2].anchor = t2);
            });
          }
          if (["menu", "menu-radio", "menu-check"].includes(r.type) && r.checked) {
            let t2 = Array.isArray(r.selected) ? r.selected : [r.selected];
            r.items.forEach((e2) => {
              t2.includes(e2.id) ? e2.checked = true : e2.checked = false;
            }), w2menu.update(this.name + "-drop", r.items);
          }
          return "function" == typeof r.onRefresh && e.finish(), l.finish(), Date.now() - i;
        }
      }
    }
  }
  resize() {
    var e = Date.now(), t = this.trigger("resize", { target: this.name });
    if (true !== t.isCancelled)
      return query(this.box).find(".w2ui-tb-line").each((e2) => {
        var e2 = query(e2), t2 = (e2.find(".w2ui-scroll-left, .w2ui-scroll-right").hide(), e2.find(".w2ui-scroll-wrapper").get(0)), i = e2.find(".w2ui-tb-right"), s = e2.get(0).getBoundingClientRect().width, i = 0 < i.length ? i[0].offsetLeft + i[0].clientWidth : 0;
        s < i && (0 < t2.scrollLeft && e2.find(".w2ui-scroll-left").show(), s < i - t2.scrollLeft) && e2.find(".w2ui-scroll-right").show();
      }), t.finish(), Date.now() - e;
  }
  destroy() {
    var _a;
    var e = this.trigger("destroy", { target: this.name });
    true !== e.isCancelled && (0 < query(this.box).find(".w2ui-scroll-wrapper  .w2ui-tb-right").length && query(this.box).removeAttr("name").removeClass("w2ui-reset w2ui-toolbar").html(""), query(this.box).html(""), (_a = this.last.observeResize) == null ? void 0 : _a.disconnect(), delete w2ui[this.name], e.finish());
  }
  getItemHTML(i) {
    let e = "", t = (null != i.caption && null == i.text && (i.text = i.caption), null == i.text && (i.text = ""), null == i.tooltip && null != i.hint && (i.tooltip = i.hint), null == i.tooltip && (i.tooltip = ""), "function" == typeof i.get || !Array.isArray(i.items) && "function" != typeof i.items || (i.get = function(t2) {
      let e2 = i.items;
      return (e2 = "function" == typeof e2 ? i.items(i) : e2).find((e3) => e3.id == t2);
    }), ""), s = "function" == typeof i.text ? i.text.call(this, i) : i.text;
    i.icon && (t = i.icon, "function" == typeof i.icon && (t = i.icon.call(this, i)), t = `<div class="w2ui-tb-icon">${t = "<" !== String(t).slice(0, 1) ? `<span class="${t}"></span>` : t}</div>`);
    var l = ["w2ui-tb-button"];
    switch (i.checked && l.push("checked"), i.disabled && l.push("disabled"), i.hidden && l.push("hidden"), t || l.push("no-icon"), i.type) {
      case "color":
      case "text-color":
        "string" == typeof i.color && ("#" == i.color.slice(0, 1) && (i.color = i.color.slice(1)), [3, 6, 8].includes(i.color.length)) && (i.color = "#" + i.color), "color" == i.type && (s = `<span class="w2ui-tb-color-box" style="background-color: ${null != i.color ? i.color : "#fff"}"></span>
                           ` + (i.text ? `<div style="margin-left: 17px;">${w2utils.lang(i.text)}</div>` : "")), "text-color" == i.type && (s = '<span style="color: ' + (null != i.color ? i.color : "#444") + ';">' + (i.text ? w2utils.lang(i.text) : "<b>Aa</b>") + "</span>");
      case "menu":
      case "menu-check":
      case "menu-radio":
      case "button":
      case "check":
      case "radio":
      case "drop":
        var r = true === i.arrow || false !== i.arrow && ["menu", "menu-radio", "menu-check", "drop", "color", "text-color"].includes(i.type);
        e = `
                    <div id="tb_${this.name}_item_${i.id}" style="${i.hidden ? "display: none" : ""}"
                        class="${l.join(" ")} ${i.class || ""}"
                        ${i.disabled ? "" : `data-click='["click","${i.id}"]'
                               data-mouseenter='["mouseAction", "event", "this", "Enter", "${i.id}"]'
                               data-mouseleave='["mouseAction", "event", "this", "Leave", "${i.id}"]'
                               data-mousedown='["mouseAction", "event", "this", "Down", "${i.id}"]'
                               data-mouseup='["mouseAction", "event", "this", "Up", "${i.id}"]'`}
                    >
                        ${t}
                        ${"" != s ? `<div class="w2ui-tb-text" style="${i.style || ""}">
                                    ${w2utils.lang(s)}
                                    ${null != i.count ? w2utils.stripSpaces(`<span class="w2ui-tb-count">
                                                <span class="${this.last.badge[i.id] ? this.last.badge[i.id].className ?? "" : ""}"
                                                    style="${this.last.badge[i.id] ? this.last.badge[i.id].style ?? "" : ""}"
                                                >${i.count}</span>
                                           </span>`) : ""}
                                    ${r ? '<span class="w2ui-tb-down"><span></span></span>' : ""}
                                </div>` : ""}
                    </div>
                `;
        break;
      case "break":
        e = `<div id="tb_${this.name}_item_${i.id}" class="w2ui-tb-break"
                            style="${i.hidden ? "display: none" : ""}; ${i.style || ""}">
                            &#160;
                        </div>`;
        break;
      case "spacer":
        e = `<div id="tb_${this.name}_item_${i.id}" class="w2ui-tb-spacer"
                            style="${i.hidden ? "display: none" : ""}; ${i.style || ""}">
                        </div>`;
        break;
      case "html":
        e = `<div id="tb_${this.name}_item_${i.id}" class="w2ui-tb-html ${l.join(" ")}"
                            style="${i.hidden ? "display: none" : ""}; ${i.style || ""}">
                            ${"function" == typeof i.html ? i.html.call(this, i) : i.html}
                        </div>`;
    }
    return e;
  }
  tooltipShow(t) {
    if (null != this.tooltip) {
      var i = query(this.box).find("#tb_" + this.name + "_item_" + w2utils.escapeId(t)).get(0), t = this.get(t), s = this.tooltip;
      let e = t.tooltip;
      "function" == typeof e && (e = e.call(this, t)), ["menu", "menu-radio", "menu-check", "drop", "color", "text-color"].includes(t.type) && 1 == t.checked || w2tooltip.show({ anchor: i, name: this.name + "-tooltip", html: e, position: s });
    }
  }
  tooltipHide(e) {
    null != this.tooltip && w2tooltip.hide(this.name + "-tooltip");
  }
  menuClick(t) {
    if (t.item && !t.item.disabled) {
      var i = this.trigger(true !== t.remove ? "click" : "remove", { target: t.item.id + ":" + t.subItem.id, item: t.item, subItem: t.subItem, originalEvent: t.originalEvent });
      if (true !== i.isCancelled) {
        let l = t.subItem, r = this.get(t.item.id), e = r.items;
        if ("function" == typeof e && (e = r.items()), "menu" == r.type && (r.selected = l.id), "menu-radio" == r.type && (r.selected = l.id, Array.isArray(e) && e.forEach((e2) => {
          true === e2.checked && delete e2.checked, Array.isArray(e2.items) && e2.items.forEach((e3) => {
            true === e3.checked && delete e3.checked;
          });
        }), l.checked = true), "menu-check" == r.type) {
          if (Array.isArray(r.selected) || (r.selected = []), null == l.group) {
            var a = r.selected.indexOf(l.id);
            -1 == a ? (r.selected.push(l.id), l.checked = true) : (r.selected.splice(a, 1), l.checked = false);
          } else if (false !== l.group) {
            let i2 = [];
            a = r.selected.indexOf(l.id);
            let s2 = (e2) => {
              e2.forEach((e3) => {
                var t2;
                e3.group === l.group && -1 != (t2 = r.selected.indexOf(e3.id)) && (e3.id != l.id && i2.push(e3.id), r.selected.splice(t2, 1)), Array.isArray(e3.items) && s2(e3.items);
              });
            };
            s2(e), -1 == a && (r.selected.push(l.id), l.checked = true);
          }
        }
        if ("string" == typeof l.route) {
          let t2 = "" !== l.route ? String("/" + l.route).replace(/\/{2,}/g, "/") : "";
          var s = w2utils.parseRoute(t2);
          if (0 < s.keys.length)
            for (let e2 = 0; e2 < s.keys.length; e2++)
              null != this.routeData[s.keys[e2].name] && (t2 = t2.replace(new RegExp(":" + s.keys[e2].name, "g"), this.routeData[s.keys[e2].name]));
          setTimeout(() => {
            window.location.hash = t2;
          }, 1);
        }
        this.refresh(t.item.id), i.finish();
      }
    }
  }
  colorClick(e) {
    var t;
    e.item && !e.item.disabled && true !== (t = this.trigger("click", { target: e.item.id, item: e.item, color: e.color, final: e.final, originalEvent: e.originalEvent })).isCancelled && (e.item.color = e.color, this.refresh(e.item.id), t.finish());
  }
  mouseAction(e, t, i, s) {
    var l = this.get(s), e = this.trigger("mouse" + i, { target: s, item: l, object: l, originalEvent: e });
    if (true !== e.isCancelled && !l.disabled && !l.hidden) {
      switch (i) {
        case "Enter":
          query(t).addClass("over"), this.tooltipShow(s);
          break;
        case "Leave":
          query(t).removeClass("over down"), this.tooltipHide(s);
          break;
        case "Down":
          query(t).addClass("down");
          break;
        case "Up":
          query(t).removeClass("down");
      }
      e.finish();
    }
  }
};
var w2sidebar = class extends w2base {
  constructor(e) {
    super(e.name), this.name = null, this.box = null, this.sidebar = null, this.parent = null, this.nodes = [], this.menu = [], this.routeData = {}, this.selected = null, this.icon = null, this.style = "", this.topHTML = "", this.bottomHTML = "", this.flatButton = false, this.keyboard = true, this.flat = false, this.hasFocus = false, this.levelPadding = 12, this.skipRefresh = false, this.tabIndex = null, this.handle = { size: 0, style: "", html: "", tooltip: "" }, this.onClick = null, this.onDblClick = null, this.onMouseEnter = null, this.onMouseLeave = null, this.onContextMenu = null, this.onMenuClick = null, this.onExpand = null, this.onCollapse = null, this.onKeydown = null, this.onRender = null, this.onRefresh = null, this.onResize = null, this.onDestroy = null, this.onFocus = null, this.onBlur = null, this.onFlat = null, this.node_template = { id: null, text: "", order: null, count: null, icon: null, nodes: [], style: "", route: null, selected: false, expanded: false, hidden: false, disabled: false, group: false, groupShowHide: true, collapsible: false, plus: false, onClick: null, onDblClick: null, onContextMenu: null, onExpand: null, onCollapse: null, parent: null, sidebar: null }, this.last = { badge: {} };
    var t = e.nodes;
    delete e.nodes, Object.assign(this, e), Array.isArray(t) && this.add(t), e.nodes = t, "string" == typeof this.box && (this.box = query(this.box).get(0)), this.box && this.render(this.box);
  }
  add(e, t) {
    return 1 == arguments.length && (t = arguments[0], e = this), "string" == typeof e && (e = this.get(e)), this.insert(e = null != e && "" != e ? e : this, null, t);
  }
  insert(t, i, s) {
    let l, r, a, n, o;
    if (2 == arguments.length && "string" == typeof t)
      if (s = arguments[1], null != (i = arguments[0])) {
        if (null == (r = this.get(i)))
          return null != (s = Array.isArray(s) ? s : [s])[0].caption && null == s[0].text && (console.log("NOTICE: sidebar node.caption property is deprecated, please use node.text. Node -> ", s[0]), s[0].text = s[0].caption), l = s[0].text, console.log('ERROR: Cannot insert node "' + l + '" because cannot find node "' + i + '" to insert before.'), null;
        t = this.get(i).parent;
      } else
        t = this;
    null != (t = "string" == typeof t ? this.get(t) : t) && "" != t || (t = this), Array.isArray(s) || (s = [s]);
    for (let e = 0; e < s.length; e++)
      if (null != (n = s[e]).caption && null == n.text && (console.log("NOTICE: sidebar node.caption property is deprecated, please use node.text"), n.text = n.caption), null == typeof n.id)
        l = n.text, console.log('ERROR: Cannot insert node "' + l + '" because it has no id.');
      else if (null != this.get(this, n.id))
        console.log("ERROR: Cannot insert node with id=" + n.id + " (text: " + n.text + ") because another node with the same id already exists.");
      else {
        if ((a = Object.assign({}, this.node_template, n)).sidebar = this, a.parent = t, o = a.nodes || [], a.nodes = [], null == i)
          t.nodes.push(a);
        else {
          if (null == (r = this.get(t, i, true)))
            return console.log('ERROR: Cannot insert node "' + n.text + '" because cannot find node "' + i + '" to insert before.'), null;
          t.nodes.splice(r, 0, a);
        }
        0 < o.length && this.insert(a, null, o);
      }
    return this.skipRefresh || this.refresh(t.id), a;
  }
  remove() {
    let t = 0, i;
    return Array.from(arguments).forEach((e) => {
      null != (i = this.get(e)) && (null != this.selected && this.selected === i.id && (this.selected = null), null != (e = this.get(i.parent, e, true))) && (i.parent.nodes[e].selected && i.sidebar.unselect(i.id), i.parent.nodes.splice(e, 1), i.parent.collapsible = 0 < i.parent.nodes.length, t++);
    }), this.skipRefresh || (0 < t && 1 == arguments.length ? this.refresh(i.parent.id) : this.refresh()), t;
  }
  set(t, i, s) {
    if (2 == arguments.length && (s = i, i = t, t = this), null == (t = "string" == typeof t ? this.get(t) : t).nodes)
      return null;
    for (let e = 0; e < t.nodes.length; e++) {
      var l;
      if (t.nodes[e].id === i)
        return l = this.update(i, s), 0 != Object.keys(l).length && (l = s.nodes, w2utils.extend(t.nodes[e], s, { nodes: [] }), null != l && this.add(t.nodes[e], l), this.skipRefresh || this.refresh(i)), true;
      if (this.set(t.nodes[e], i, s))
        return true;
    }
    return false;
  }
  get(t, i, s) {
    if (0 === arguments.length) {
      var l = [], r = this.find({});
      for (let e = 0; e < r.length; e++)
        null != r[e].id && l.push(r[e].id);
      return l;
    }
    if ((1 == arguments.length || 2 == arguments.length && true === i) && (s = i, i = t, t = this), null != (t = "string" == typeof t ? this.get(t) : t).nodes)
      for (let e = 0; e < t.nodes.length; e++) {
        if (t.nodes[e].id == i)
          return true === s ? e : t.nodes[e];
        var a = this.get(t.nodes[e], i, s);
        if (a || 0 === a)
          return a;
      }
    return null;
  }
  setCount(e, t, i, s) {
    var l = query(this.box).find(`#node_${w2utils.escapeId(e)} .w2ui-node-count`);
    0 < l.length ? (l.removeClass().addClass("w2ui-node-count " + (i || "")).text(t).get(0).style.cssText = s || "", this.last.badge[e] = { className: i || "", style: s || "" }, this.get(e).count = t) : (this.set(e, { count: t }), this.setCount(...arguments));
  }
  find(i, s, l) {
    if (1 == arguments.length && (s = i, i = this), l = l || [], null != (i = "string" == typeof i ? this.get(i) : i).nodes)
      for (let t = 0; t < i.nodes.length; t++) {
        let e = true;
        for (var r in s)
          i.nodes[t][r] != s[r] && (e = false);
        e && l.push(i.nodes[t]), 0 < i.nodes[t].nodes.length && (l = this.find(i.nodes[t], s, l));
      }
    return l;
  }
  sort(l, e) {
    null == (l = l && "object" == typeof l ? l : {}).foldersFirst && (l.foldersFirst = true), null == l.caseSensitive && (l.caseSensitive = false), null == l.reverse && (l.reverse = false), (e = null == e ? this.nodes : e).sort((i, s) => {
      var e2 = i.nodes && 0 < i.nodes.length, t = s.nodes && 0 < s.nodes.length;
      if (false === l.foldersFirst || !e2 && !t || e2 && t) {
        let e3 = i.text, t2 = s.text;
        l.caseSensitive || (e3 = e3.toLowerCase(), t2 = t2.toLowerCase()), null != i.order && (e3 = i.order), null != s.order && (t2 = s.order);
        i = w2utils.naturalCompare(e3, t2);
        return (1 === i || -1 === i) & l.reverse ? -i : i;
      }
      return e2 && !t ? l.reverse ? 1 : -1 : !e2 && t ? l.reverse ? -1 : 1 : void 0;
    }), e.forEach((e2) => {
      e2.nodes && 0 < e2.nodes.length && this.sort(l, e2.nodes);
    });
  }
  each(t, e) {
    (e = null == e ? this.nodes : e).forEach((e2) => {
      t.call(this, e2), e2.nodes && 0 < e2.nodes.length && this.each(t, e2.nodes);
    });
  }
  search(e) {
    let t = 0, i = e.toLowerCase();
    return this.each((e2) => {
      -1 === e2.text.toLowerCase().indexOf(i) ? e2.hidden = true : (t++, function e3(t2) {
        t2.parent && (t2.parent.hidden = false, e3(t2.parent));
      }(e2), e2.hidden = false);
    }), this.refresh(), t;
  }
  show() {
    let t = [];
    return Array.from(arguments).forEach((e) => {
      e = this.get(e);
      null != e && false !== e.hidden && (e.hidden = false, t.push(e.id));
    }), 0 < t.length && (1 == arguments.length ? this.refresh(arguments[0]) : this.refresh()), t;
  }
  hide() {
    let t = [];
    return Array.from(arguments).forEach((e) => {
      e = this.get(e);
      null != e && true !== e.hidden && (e.hidden = true, t.push(e.id));
    }), 0 < t.length && (1 == arguments.length ? this.refresh(arguments[0]) : this.refresh()), t;
  }
  enable() {
    let t = [];
    return Array.from(arguments).forEach((e) => {
      e = this.get(e);
      null != e && false !== e.disabled && (e.disabled = false, t.push(e.id));
    }), 0 < t.length && (1 == arguments.length ? this.refresh(arguments[0]) : this.refresh()), t;
  }
  disable() {
    let t = [];
    return Array.from(arguments).forEach((e) => {
      e = this.get(e);
      null != e && true !== e.disabled && (e.disabled = true, e.selected && this.unselect(e.id), t.push(e.id));
    }), 0 < t.length && (1 == arguments.length ? this.refresh(arguments[0]) : this.refresh()), t;
  }
  select(e) {
    var t = this.get(e);
    if (!t)
      return false;
    if (this.selected == e && t.selected)
      return false;
    this.unselect(this.selected);
    var i = query(this.box).find("#node_" + w2utils.escapeId(e));
    return i.addClass("w2ui-selected").find(".w2ui-icon").addClass("w2ui-icon-selected"), 0 < i.length && (this.inView(e) || this.scrollIntoView(e)), t.selected = true, this.selected = e, true;
  }
  unselect(e) {
    0 === arguments.length && (e = this.selected);
    var t = this.get(e);
    return !!t && (t.selected = false, query(this.box).find("#node_" + w2utils.escapeId(e)).removeClass("w2ui-selected").find(".w2ui-icon").removeClass("w2ui-icon-selected"), this.selected == e && (this.selected = null), true);
  }
  toggle(e) {
    var t = this.get(e);
    return null != t && (t.plus ? (this.set(e, { plus: false }), this.expand(e), void this.refresh(e)) : 0 !== t.nodes.length && !!t.collapsible && (this.get(e).expanded ? this.collapse(e) : this.expand(e)));
  }
  collapse(e) {
    let t = this;
    var i, s = this.get(e);
    return null != s && (true !== (i = this.trigger("collapse", { target: e, object: s })).isCancelled ? (query(this.box).find("#node_" + w2utils.escapeId(e) + "_sub").hide(), query(this.box).find("#node_" + w2utils.escapeId(e) + " .w2ui-expanded").removeClass("w2ui-expanded").addClass("w2ui-collapsed"), s.expanded = false, i.finish(), setTimeout(() => {
      t.refresh(e);
    }, 0), true) : void 0);
  }
  expand(e) {
    var t = this.get(e), i = this.trigger("expand", { target: e, object: t });
    if (true !== i.isCancelled)
      return query(this.box).find("#node_" + w2utils.escapeId(e) + "_sub").show(), query(this.box).find("#node_" + w2utils.escapeId(e) + " .w2ui-collapsed").removeClass("w2ui-collapsed").addClass("w2ui-expanded"), t.expanded = true, i.finish(), this.refresh(e), true;
  }
  collapseAll(t) {
    if (null == (t = "string" == typeof (t = null == t ? this : t) ? this.get(t) : t).nodes)
      return false;
    for (let e = 0; e < t.nodes.length; e++)
      true === t.nodes[e].expanded && (t.nodes[e].expanded = false), t.nodes[e].nodes && 0 < t.nodes[e].nodes.length && this.collapseAll(t.nodes[e]);
    return this.refresh(t.id), true;
  }
  expandAll(t) {
    if (null == (t = "string" == typeof (t = null == t ? this : t) ? this.get(t) : t).nodes)
      return false;
    for (let e = 0; e < t.nodes.length; e++)
      false === t.nodes[e].expanded && (t.nodes[e].expanded = true), t.nodes[e].nodes && 0 < t.nodes[e].nodes.length && this.expandAll(t.nodes[e]);
    this.refresh(t.id);
  }
  expandParents(e) {
    e = this.get(e);
    return null != e && (e.parent && (e.parent.expanded || (e.parent.expanded = true, this.refresh(e.parent.id)), this.expandParents(e.parent.id)), true);
  }
  click(l, r) {
    let a = this, n = this.get(l);
    if (null != n && !n.disabled && !n.group) {
      query(a.box).find(".w2ui-node.w2ui-selected").each((e) => {
        var t2 = query(e).attr("id").replace("node_", ""), t2 = a.get(t2);
        null != t2 && (t2.selected = false), query(e).removeClass("w2ui-selected").find(".w2ui-icon").removeClass("w2ui-icon-selected");
      });
      let t = query(a.box).find("#node_" + w2utils.escapeId(l)), s = query(a.box).find("#node_" + w2utils.escapeId(a.selected));
      t.addClass("w2ui-selected").find(".w2ui-icon").addClass("w2ui-icon-selected"), setTimeout(() => {
        var e = a.trigger("click", { target: l, originalEvent: r, node: n, object: n });
        if (true === e.isCancelled)
          t.removeClass("w2ui-selected").find(".w2ui-icon").removeClass("w2ui-icon-selected"), s.addClass("w2ui-selected").find(".w2ui-icon").addClass("w2ui-icon-selected");
        else {
          if (null != s && (s.selected = false), a.get(l).selected = true, a.selected = l, "string" == typeof n.route) {
            let t2 = "" !== n.route ? String("/" + n.route).replace(/\/{2,}/g, "/") : "";
            var i = w2utils.parseRoute(t2);
            if (0 < i.keys.length)
              for (let e2 = 0; e2 < i.keys.length; e2++)
                null != a.routeData[i.keys[e2].name] && (t2 = t2.replace(new RegExp(":" + i.keys[e2].name, "g"), a.routeData[i.keys[e2].name]));
            setTimeout(() => {
              window.location.hash = t2;
            }, 1);
          }
          e.finish();
        }
      }, 1);
    }
  }
  focus(e) {
    let t = this;
    e = this.trigger("focus", { target: this.name, originalEvent: e });
    if (true === e.isCancelled)
      return false;
    this.hasFocus = true, query(this.box).find(".w2ui-sidebar-body").addClass("w2ui-focus"), setTimeout(() => {
      var e2 = query(t.box).find("#sidebar_" + t.name + "_focus").get(0);
      document.activeElement != e2 && e2.focus();
    }, 10), e.finish();
  }
  blur(e) {
    e = this.trigger("blur", { target: this.name, originalEvent: e });
    if (true === e.isCancelled)
      return false;
    this.hasFocus = false, query(this.box).find(".w2ui-sidebar-body").removeClass("w2ui-focus"), e.finish();
  }
  keydown(e) {
    let a = this, t = a.get(a.selected);
    var i;
    function s(e2, t2) {
      null == e2 || e2.hidden || e2.disabled || e2.group || (a.click(e2.id, t2), a.inView(e2.id)) || a.scrollIntoView(e2.id);
    }
    function l(e2, t2) {
      for (e2 = t2(e2); null != e2 && (e2.hidden || e2.disabled) && !e2.group; )
        e2 = t2(e2);
      return e2;
    }
    function r(e2) {
      if (null == e2)
        return null;
      var t2 = e2.parent, e2 = a.get(e2.id, true);
      let i2 = 0 < e2 ? function t3(i3) {
        if (i3.expanded && 0 < i3.nodes.length) {
          let e3 = i3.nodes[i3.nodes.length - 1];
          return (e3.hidden || e3.disabled || e3.group ? r : t3)(e3);
        }
        return i3;
      }(t2.nodes[e2 - 1]) : t2;
      return i2 = null != i2 && (i2.hidden || i2.disabled || i2.group) ? r(i2) : i2;
    }
    true === a.keyboard && (t = t || a.nodes[0], true !== (i = a.trigger("keydown", { target: a.name, originalEvent: e })).isCancelled) && (13 != e.keyCode && 32 != e.keyCode || 0 < t.nodes.length && a.toggle(a.selected), 37 == e.keyCode && (0 < t.nodes.length && t.expanded ? a.collapse(a.selected) : (s(t.parent), t.parent.group || a.collapse(t.parent.id))), 39 == e.keyCode && (0 < t.nodes.length || t.plus) && !t.expanded && a.expand(a.selected), 38 == e.keyCode && (null == a.get(a.selected) ? s(this.nodes[0] || null) : s(l(t, r))), 40 == e.keyCode && (null == a.get(a.selected) ? s(this.nodes[0] || null) : s(l(t, function t2(i2, e2) {
      if (null == i2)
        return null;
      let s2 = i2.parent;
      let l2 = a.get(i2.id, true);
      let r2 = null;
      if (i2.expanded && 0 < i2.nodes.length && true !== e2) {
        let e3 = i2.nodes[0];
        r2 = e3.hidden || e3.disabled || e3.group ? t2(e3) : e3;
      } else
        r2 = s2 && l2 + 1 < s2.nodes.length ? s2.nodes[l2 + 1] : t2(s2, true);
      null != r2 && (r2.hidden || r2.disabled || r2.group) && (r2 = t2(r2));
      return r2;
    }))), [13, 32, 37, 38, 39, 40].includes(e.keyCode) && (e.preventDefault && e.preventDefault(), e.stopPropagation) && e.stopPropagation(), i.finish());
  }
  inView(e) {
    var t, e = query(this.box).find("#node_" + w2utils.escapeId(e)).get(0);
    return !(!e || (t = query(this.box).find(".w2ui-sidebar-body").get(0), e.offsetTop < t.scrollTop) || e.offsetTop + e.clientHeight > t.clientHeight + t.scrollTop);
  }
  scrollIntoView(i, s) {
    return new Promise((e, t) => {
      null == i && (i = this.selected), null != this.get(i) && (query(this.box).find("#node_" + w2utils.escapeId(i)).get(0).scrollIntoView({ block: "center", inline: "center", behavior: s ? "atuo" : "smooth" }), setTimeout(() => {
        this.resize(), e();
      }, s ? 0 : 500));
    });
  }
  dblClick(e, t) {
    var i = this.get(e), t = this.trigger("dblClick", { target: e, originalEvent: t, object: i });
    true !== t.isCancelled && (this.toggle(e), t.finish());
  }
  contextMenu(t, i) {
    var e = this.get(t), s = (t != this.selected && this.click(t), this.trigger("contextMenu", { target: t, originalEvent: i, object: e, allowOnDisabled: false }));
    true === s.isCancelled || e.disabled && !s.allowOnDisabled || (0 < this.menu.length && w2menu.show({ name: this.name + "_menu", anchor: document.body, items: this.menu, originalEvent: i }).select((e2) => {
      this.menuClick(t, parseInt(e2.detail.index), i);
    }), i.preventDefault && i.preventDefault(), s.finish());
  }
  menuClick(e, t, i) {
    e = this.trigger("menuClick", { target: e, originalEvent: i, menuIndex: t, menuItem: this.menu[t] });
    true !== e.isCancelled && e.finish();
  }
  goFlat() {
    var e = this.trigger("flat", { goFlat: !this.flat });
    true !== e.isCancelled && (this.flat = !this.flat, this.refresh(), e.finish());
  }
  render(e) {
    var i = Date.now();
    let s = this;
    "string" == typeof e && (e = query(e).get(0));
    var l = this.trigger("render", { target: this.name, box: e ?? this.box });
    if (true !== l.isCancelled && (null != e && (0 < query(this.box).find(".w2ui-sidebar-body").length && query(this.box).removeAttr("name").removeClass("w2ui-reset w2ui-sidebar").html(""), this.box = e), this.box)) {
      query(this.box).attr("name", this.name).addClass("w2ui-reset w2ui-sidebar").html(`<div>
                <div class="w2ui-sidebar-top"></div>
                <input id="sidebar_${this.name}_focus" ${this.tabIndex ? 'tabindex="' + this.tabIndex + '"' : ""}
                    style="position: absolute; top: 0; right: 0; width: 1px; z-index: -1; opacity: 0"
                    ${w2utils.isIOS ? "readonly" : ""}/>
                <div class="w2ui-sidebar-body"></div>
                <div class="w2ui-sidebar-bottom"></div>
            </div>`);
      e = query(this.box).get(0).getBoundingClientRect();
      query(this.box).find(":scope > div").css({ width: e.width + "px", height: e.height + "px" }), query(this.box).get(0).style.cssText += this.style;
      let t;
      return query(this.box).find("#sidebar_" + this.name + "_focus").on("focus", function(e2) {
        clearTimeout(t), s.hasFocus || s.focus(e2);
      }).on("blur", function(e2) {
        t = setTimeout(() => {
          s.hasFocus && s.blur(e2);
        }, 100);
      }).on("keydown", function(e2) {
        9 != e2.keyCode && w2ui[s.name].keydown.call(w2ui[s.name], e2);
      }), query(this.box).off("mousedown").on("mousedown", function(t2) {
        setTimeout(() => {
          var e2;
          -1 == ["INPUT", "TEXTAREA", "SELECT"].indexOf(t2.target.tagName.toUpperCase()) && (e2 = query(s.box).find("#sidebar_" + s.name + "_focus"), document.activeElement != e2.get(0)) && e2.get(0).focus();
        }, 1);
      }), this.last.observeResize = new ResizeObserver(() => {
        this.resize();
      }), this.last.observeResize.observe(this.box), l.finish(), this.refresh(), Date.now() - i;
    }
  }
  update(e, t) {
    var i, s, e = this.get(e);
    let l;
    return e && (i = query(this.box).find("#node_" + w2utils.escapeId(e.id)), e.group ? (t.text && (e.text = t.text, i.find(".w2ui-group-text").replace("function" == typeof e.text ? e.text.call(this, e) : '<span class="w2ui-group-text">' + e.text + "</span>"), delete t.text), t.class && (e.class = t.class, l = i.data("level"), i.get(0).className = "w2ui-node-group w2ui-level-" + l + (e.class ? " " + e.class : ""), delete t.class), t.style && (e.style = t.style, i.get(0).nextElementSibling.style = e.style + ";" + (!e.hidden && e.expanded ? "" : "display: none;"), delete t.style)) : (t.icon && 0 < (s = i.find(".w2ui-node-image > span")).length && (e.icon = t.icon, s[0].className = "function" == typeof e.icon ? e.icon.call(this, e) : e.icon, delete t.icon), t.count && (e.count = t.count, i.find(".w2ui-node-count").html(e.count), 0 < i.find(".w2ui-node-count").length) && delete t.count, t.class && 0 < i.length && (e.class = t.class, l = i.data("level"), i[0].className = "w2ui-node w2ui-level-" + l + (e.selected ? " w2ui-selected" : "") + (e.disabled ? " w2ui-disabled" : "") + (e.class ? " " + e.class : ""), delete t.class), t.text && (e.text = t.text, i.find(".w2ui-node-text").html("function" == typeof e.text ? e.text.call(this, e) : e.text), delete t.text), t.style && 0 < i.length && (s = i.find(".w2ui-node-text"), e.style = t.style, s[0].style = e.style, delete t.style))), t;
  }
  refresh(l, r) {
    var _a, _b, _c, _d;
    if (null != this.box) {
      var a = Date.now(), n = this.trigger("refresh", { target: null != l ? l : this.name, nodeId: null != l ? l : null, fullRefresh: null == l });
      if (true !== n.isCancelled) {
        let c = function(t2) {
          let i2 = "", s2 = t2.icon, l2 = (null == s2 && (s2 = h.icon), t2.parent), r2 = 0;
          for (; l2 && null != l2.parent; )
            l2 = l2.parent, r2++;
          if (null != t2.caption && null == t2.text && (t2.text = t2.caption), null != t2.caption && (console.log("NOTICE: sidebar node.caption property is deprecated, please use node.text. Node -> ", t2), t2.text = t2.caption), Array.isArray(t2.nodes) && 0 < t2.nodes.length && (t2.collapsible = true), t2.group) {
            let e2 = w2utils.lang("function" == typeof t2.text ? t2.text.call(h, t2) : t2.text);
            "<span" != String(e2).substr(0, 5) && (e2 = `<span class="w2ui-group-text">${e2}</span>`), i2 = `
                    <div id="node_${t2.id}" data-level="${r2}" style="${t2.hidden ? "display: none" : ""}"
                        class="w2ui-node-group w2ui-level-${r2} ${t2.class || ""} w2ui-eaction"
                        data-click="toggle|${t2.id}"
                        data-contextmenu="contextMenu|${t2.id}|event"
                        data-mouseenter="showPlus|this|inherit"
                        data-mouseleave="showPlus|this|transparent">
                        ${t2.groupShowHide && t2.collapsible ? `<span>${!t2.hidden && t2.expanded ? w2utils.lang("Hide") : w2utils.lang("Show")}</span>` : "<span></span>"} ${e2}
                    </div>
                    <div class="w2ui-node-sub" id="node_${t2.id}_sub" style="${t2.style}; ${!t2.hidden && t2.expanded ? "" : "display: none;"}">
                </div>`, h.flat && (i2 = `
                        <div class="w2ui-node-group" id="node_${t2.id}"><span>&#160;</span></div>
                        <div id="node_${t2.id}_sub" style="${t2.style}; ${!t2.hidden && t2.expanded ? "" : "display: none;"}"></div>`);
          } else {
            t2.selected && !t2.disabled && (h.selected = t2.id), l2 = "", s2 && (l2 = `
                    <div class="w2ui-node-image">
                        <span class="${"function" == typeof s2 ? s2.call(h, t2) : s2}"></span>
                    </div>`);
            let e2 = "";
            var a2 = null != t2.count ? `<div class="w2ui-node-count ${h.last.badge[t2.id] && h.last.badge[t2.id].className || ""}"
                            style="${h.last.badge[t2.id] && h.last.badge[t2.id].style || ""}">
                                ${t2.count}
                       </div>` : "", n2 = (true === t2.collapsible && (e2 = `<div class="w2ui-${t2.expanded ? "expanded" : "collapsed"}"><span></span></div>`), w2utils.lang("function" == typeof t2.text ? t2.text.call(h, t2) : t2.text)), o2 = ["w2ui-node", "w2ui-level-" + r2, "w2ui-eaction"];
            t2.selected && o2.push("w2ui-selected"), t2.disabled && o2.push("w2ui-disabled"), t2.class && o2.push(t2.class), i2 = `
                    <div id="node_${t2.id}" class="${o2.join(" ")}" data-level="${r2}"
                        style="position: relative; ${t2.hidden ? "display: none;" : ""}"
                        data-click="click|${t2.id}|event"
                        data-dblclick="dblClick|${t2.id}|event"
                        data-contextmenu="contextMenu|${t2.id}|event"
                        data-mouseEnter="mouseAction|Enter|this|${t2.id}|event"
                        data-mouseLeave="mouseAction|Leave|this|${t2.id}|event"
                    >
                        ${h.handle.html ? `<div class="w2ui-node-handle w2ui-eaction" style="width: ${h.handle.size}px; ${h.handle.style}"
                                    data-mouseEnter="mouseAction|Enter|this|${t2.id}|event|handle"
                                    data-mouseLeave="mouseAction|Leave|this|${t2.id}|event|handle"
                                >
                                   ${"function" == typeof h.handle.html ? h.handle.html.call(h, t2) : h.handle.html}
                              </div>` : ""}
                      <div class="w2ui-node-data" style="margin-left: ${r2 * h.levelPadding + h.handle.size}px">
                            ${e2} ${l2} ${a2}
                            <div class="w2ui-node-text w2ui-node-caption" style="${t2.style || ""}">${n2}</div>
                       </div>
                    </div>
                    <div class="w2ui-node-sub" id="node_${t2.id}_sub" style="${t2.style}; ${!t2.hidden && t2.expanded ? "" : "display: none;"}"></div>`, h.flat && (i2 = `
                        <div id="node_${t2.id}" class="${o2.join(" ")}" style="${t2.hidden ? "display: none;" : ""}"
                            data-click="click|${t2.id}|event"
                            data-dblclick="dblClick|${t2.id}|event"
                            data-contextmenu="contextMenu|${t2.id}|event"
                            data-mouseEnter="mouseAction|Enter|this|${t2.id}|event|tooltip"
                            data-mouseLeave="mouseAction|Leave|this|${t2.id}|event|tooltip"
                        >
                            <div class="w2ui-node-data w2ui-node-flat">${l2}</div>
                        </div>
                        <div class="w2ui-node-sub" id="node_${t2.id}_sub" style="${t2.style}; ${!t2.hidden && t2.expanded ? "" : "display: none;"}"></div>`);
          }
          return i2;
        };
        let e = "";
        1 == this.flatButton && (e = `<div class="w2ui-flat w2ui-flat-${this.flat ? "right" : "left"}"></div>`), null != l || "" === this.topHTML && "" === e || (query(this.box).find(".w2ui-sidebar-top").html(this.topHTML + e), query(this.box).find(".w2ui-sidebar-body").css("top", ((_a = query(this.box).find(".w2ui-sidebar-top").get(0)) == null ? void 0 : _a.clientHeight) + "px"), query(this.box).find(".w2ui-flat").off("click").on("click", (e2) => {
          this.goFlat();
        })), null != l && "" !== this.bottomHTML && (query(this.box).find(".w2ui-sidebar-bottom").html(this.bottomHTML), query(this.box).find(".w2ui-sidebar-body").css("bottom", ((_b = query(this.box).find(".w2ui-sidebar-bottom").get(0)) == null ? void 0 : _b.clientHeight) + "px")), query(this.box).find(":scope > div").removeClass("w2ui-sidebar-flat").addClass(this.flat ? "w2ui-sidebar-flat" : "").css({ width: ((_c = query(this.box).get(0)) == null ? void 0 : _c.clientWidth) + "px", height: ((_d = query(this.box).get(0)) == null ? void 0 : _d.clientHeight) + "px" }), 0 < this.nodes.length && null == this.nodes[0].parent && (o = this.nodes, this.nodes = [], this.add(this, o));
        let h = this, t, i;
        if (null == l)
          t = this, i = ".w2ui-sidebar-body";
        else {
          if (null == (t = this.get(l)))
            return;
          i = "#node_" + w2utils.escapeId(t.id) + "_sub";
        }
        var o = "#node_" + w2utils.escapeId(t.id);
        let s;
        t !== this && (s = c(t), query(this.box).find(o).before('<div id="sidebar_' + this.name + '_tmp"></div>'), query(this.box).find(o).remove(), query(this.box).find(i).remove(), query(this.box).find("#sidebar_" + this.name + "_tmp").before(s), query(this.box).find("#sidebar_" + this.name + "_tmp").remove());
        var l = query(this.box).find(":scope > div").get(0), d = { top: l == null ? void 0 : l.scrollTop, left: l == null ? void 0 : l.scrollLeft };
        query(this.box).find(i).html("");
        for (let e2 = 0; e2 < t.nodes.length; e2++) {
          var u = t.nodes[e2];
          if (s = c(u), query(this.box).find(i).append(s), 0 !== u.nodes.length)
            this.refresh(u.id, true);
          else {
            u = this.trigger("refresh", { target: u.id });
            if (true === u.isCancelled)
              return;
            u.finish();
          }
        }
        return l && (l.scrollTop = d.top, l.scrollLeft = d.left), r || (l = query(this.box).find(o + `.w2ui-eaction, ${i} .w2ui-eaction`), w2utils.bindEvents(l, this)), n.finish(), Date.now() - a;
      }
    }
  }
  mouseAction(e, t, i, s, l) {
    var r = this.get(i), a = w2utils.lang("function" == typeof r.text ? r.text.call(this, r) : r.text) + (r.count || 0 === r.count ? ' - <span class="w2ui-node-count">' + r.count + "</span>" : ""), e = this.trigger("mouse" + e, { target: i, node: r, tooltip: a, originalEvent: s });
    "tooltip" == l && this.tooltip(t, a, i), "handle" == l && this.handleTooltip(t, i), e.finish();
  }
  tooltip(e, t, i) {
    e = query(e).find(".w2ui-node-data");
    "" !== t ? w2tooltip.show({ anchor: e.get(0), name: this.name + "_tooltip", html: t, position: "right|left" }) : w2tooltip.hide(this.name + "_tooltip");
  }
  handleTooltip(e, t) {
    let i = this.handle.tooltip;
    "" !== (i = "function" == typeof i ? i(t) : i) && null != t ? w2tooltip.show({ anchor: e, name: this.name + "_tooltip", html: i, position: "top|bottom" }) : w2tooltip.hide(this.name + "_tooltip");
  }
  showPlus(e, t) {
    query(e).find("span:nth-child(1)").css("color", t);
  }
  resize() {
    var e, t = Date.now(), i = this.trigger("resize", { target: this.name });
    if (true !== i.isCancelled)
      return e = query(this.box).get(0).getBoundingClientRect(), query(this.box).css("overflow", "hidden"), query(this.box).find(":scope > div").css({ width: e.width + "px", height: e.height + "px" }), i.finish(), Date.now() - t;
  }
  destroy() {
    var _a;
    var e = this.trigger("destroy", { target: this.name });
    true !== e.isCancelled && (0 < query(this.box).find(".w2ui-sidebar-body").length && query(this.box).removeAttr("name").removeClass("w2ui-reset w2ui-sidebar").html(""), (_a = this.last.observeResize) == null ? void 0 : _a.disconnect(), delete w2ui[this.name], e.finish());
  }
  lock(e, t) {
    var i = Array.from(arguments);
    i.unshift(this.box), w2utils.lock(...i);
  }
  unlock(e) {
    w2utils.unlock(this.box, e);
  }
};
var w2tabs = class extends w2base {
  constructor(e) {
    super(e.name), this.box = null, this.name = null, this.active = null, this.reorder = false, this.flow = "down", this.tooltip = "top|left", this.tabs = [], this.routeData = {}, this.last = {}, this.right = "", this.style = "", this.onClick = null, this.onMouseEnter = null, this.onMouseLeave = null, this.onMouseDown = null, this.onMouseUp = null, this.onClose = null, this.onRender = null, this.onRefresh = null, this.onResize = null, this.onDestroy = null, this.tab_template = { id: null, text: null, route: null, hidden: false, disabled: false, closable: false, tooltip: null, style: "", onClick: null, onRefresh: null, onClose: null };
    var t = e.tabs;
    delete e.tabs, Object.assign(this, e), Array.isArray(t) && this.add(t), e.tabs = t, "string" == typeof this.box && (this.box = query(this.box).get(0)), this.box && this.render(this.box);
  }
  add(e) {
    return this.insert(null, e);
  }
  insert(s, e) {
    Array.isArray(e) || (e = [e]);
    let l = [];
    return e.forEach((e2) => {
      var t, i;
      null == e2.id ? console.log(`ERROR: The parameter "id" is required but not supplied. (obj: ${this.name})`) : w2utils.checkUniqueId(e2.id, this.tabs, "tabs", this.name) && (e2 = Object.assign({}, this.tab_template, e2), null == s ? (this.tabs.push(e2), l.push(this.animateInsert(null, e2))) : (t = this.get(s, true), i = this.tabs[t].id, this.tabs.splice(t, 0, e2), l.push(this.animateInsert(i, e2))));
    }), Promise.all(l);
  }
  remove() {
    let t = 0;
    return Array.from(arguments).forEach((e) => {
      e = this.get(e);
      e && (t++, this.tabs.splice(this.get(e.id, true), 1), query(this.box).find(`#tabs_${this.name}_tab_` + w2utils.escapeId(e.id)).remove());
    }), this.resize(), t;
  }
  select(e) {
    return this.active != e && null != this.get(e) && (this.active = e, this.refresh(), true);
  }
  set(e, t) {
    var i = this.get(e, true);
    return null != i && (w2utils.extend(this.tabs[i], t), this.refresh(e), true);
  }
  get(t, i) {
    if (0 === arguments.length) {
      var s = [];
      for (let e = 0; e < this.tabs.length; e++)
        null != this.tabs[e].id && s.push(this.tabs[e].id);
      return s;
    }
    for (let e = 0; e < this.tabs.length; e++)
      if (this.tabs[e].id == t)
        return true === i ? e : this.tabs[e];
    return null;
  }
  show() {
    let t = [];
    return Array.from(arguments).forEach((e) => {
      e = this.get(e);
      e && false !== e.hidden && (e.hidden = false, t.push(e.id));
    }), setTimeout(() => {
      t.forEach((e) => {
        this.refresh(e), this.resize();
      });
    }, 15), t;
  }
  hide() {
    let t = [];
    return Array.from(arguments).forEach((e) => {
      e = this.get(e);
      e && true !== e.hidden && (e.hidden = true, t.push(e.id));
    }), setTimeout(() => {
      t.forEach((e) => {
        this.refresh(e), this.resize();
      });
    }, 15), t;
  }
  enable() {
    let t = [];
    return Array.from(arguments).forEach((e) => {
      e = this.get(e);
      e && false !== e.disabled && (e.disabled = false, t.push(e.id));
    }), setTimeout(() => {
      t.forEach((e) => {
        this.refresh(e);
      });
    }, 15), t;
  }
  disable() {
    let t = [];
    return Array.from(arguments).forEach((e) => {
      e = this.get(e);
      e && true !== e.disabled && (e.disabled = true, t.push(e.id));
    }), setTimeout(() => {
      t.forEach((e) => {
        this.refresh(e);
      });
    }, 15), t;
  }
  dragMove(i) {
    if (this.last.reordering) {
      let h = function(e, t) {
        e += t;
        let i2 = s.tabs[e];
        return i2 = i2 && i2.hidden ? h(e, t) : i2;
      };
      let s = this;
      var l = this.last.moving, r = this.tabs[l.index], a = h(l.index, 1), n = h(l.index, -1), r = query(this.box).find("#tabs_" + this.name + "_tab_" + w2utils.escapeId(r.id));
      if (0 < l.divX && a) {
        var o = query(this.box).find("#tabs_" + this.name + "_tab_" + w2utils.escapeId(a.id));
        let e = parseInt(r.get(0).clientWidth), t = parseInt(o.get(0).clientWidth);
        if (e = e < t ? Math.floor(e / 3) : Math.floor(t / 3), t -= e, l.divX > t)
          return a = this.tabs.indexOf(a), this.tabs.splice(l.index, 0, this.tabs.splice(a, 1)[0]), l.$tab.before(o.get(0)), l.$tab.css("opacity", 0), void Object.assign(this.last.moving, { index: a, divX: -e, x: i.pageX + e, left: l.left + l.divX + e });
      }
      if (l.divX < 0 && n) {
        o = query(this.box).find("#tabs_" + this.name + "_tab_" + w2utils.escapeId(n.id));
        let e = parseInt(r.get(0).clientWidth), t = parseInt(o.get(0).clientWidth);
        e = e < t ? Math.floor(e / 3) : Math.floor(t / 3), t -= e, Math.abs(l.divX) > t && (a = this.tabs.indexOf(n), this.tabs.splice(l.index, 0, this.tabs.splice(a, 1)[0]), o.before(l.$tab), l.$tab.css("opacity", 0), Object.assign(l, { index: a, divX: e, x: i.pageX - e, left: l.left + l.divX - e }));
      }
    }
  }
  mouseAction(e, t, i) {
    var s = this.get(t), l = this.trigger("mouse" + e, { target: t, tab: s, object: s, originalEvent: i });
    if (true !== l.isCancelled && !s.disabled && !s.hidden) {
      switch (e) {
        case "Enter":
          this.tooltipShow(t);
          break;
        case "Leave":
          this.tooltipHide(t);
          break;
        case "Down":
          this.initReorder(t, i);
      }
      l.finish();
    }
  }
  tooltipShow(t) {
    var i = this.get(t), t = query(this.box).find("#tabs_" + this.name + "_tab_" + w2utils.escapeId(t)).get(0);
    if (null != this.tooltip && !i.disabled && !this.last.reordering) {
      var s = this.tooltip;
      let e = i.tooltip;
      "function" == typeof e && (e = e.call(this, i)), w2tooltip.show({ anchor: t, name: this.name + "_tooltip", html: e, position: s });
    }
  }
  tooltipHide(e) {
    null != this.tooltip && w2tooltip.hide(this.name + "_tooltip");
  }
  getTabHTML(e) {
    e = this.get(e, true), e = this.tabs[e];
    if (null == e)
      return false;
    null == e.text && null != e.caption && (e.text = e.caption), null == e.tooltip && null != e.hint && (e.tooltip = e.hint), null != e.caption && console.log("NOTICE: tabs tab.caption property is deprecated, please use tab.text. Tab -> ", e), null != e.hint && console.log("NOTICE: tabs tab.hint property is deprecated, please use tab.tooltip. Tab -> ", e);
    let t = e.text, i = (null == (t = "function" == typeof t ? t.call(this, e) : t) && (t = ""), ""), s = "";
    return e.hidden && (s += "display: none;"), e.disabled && (s += "opacity: 0.2;"), e.closable && !e.disabled && (i = `<div class="w2ui-tab-close w2ui-eaction ${this.active === e.id ? "active" : ""}"
                data-mousedown="stop" data-mouseup="clickClose|${e.id}|event">
            </div>`), `
            <div id="tabs_${this.name}_tab_${e.id}" style="${s} ${e.style}"
                class="w2ui-tab w2ui-eaction ${this.active === e.id ? "active" : ""} ${e.closable ? "closable" : ""} ${e.class || ""}"
                data-mouseenter="mouseAction|Enter|${e.id}|event]"
                data-mouseleave="mouseAction|Leave|${e.id}|event]"
                data-mousedown="mouseAction|Down|${e.id}|event"
                data-mouseup="mouseAction|Up|${e.id}|event"
                data-click="click|${e.id}|event"
               >
                    ${w2utils.lang(t) + i}
            </div>`;
  }
  refresh(e) {
    var t = Date.now(), i = ("up" == this.flow ? query(this.box).addClass("w2ui-tabs-up") : query(this.box).removeClass("w2ui-tabs-up"), this.trigger("refresh", { target: null != e ? e : this.name, object: this.get(e) }));
    if (true !== i.isCancelled) {
      if (null == e)
        for (let e2 = 0; e2 < this.tabs.length; e2++)
          this.refresh(this.tabs[e2].id);
      else {
        var s = "#tabs_" + this.name + "_tab_" + w2utils.escapeId(e), l = query(this.box).find(s), e = this.getTabHTML(e);
        0 === l.length ? query(this.box).find("#tabs_" + this.name + "_right").before(e) : 0 == query(this.box).find(".tab-animate-insert").length && l.replace(e), w2utils.bindEvents(query(this.box).find(s + `, ${s} .w2ui-eaction`), this);
      }
      return query(this.box).find("#tabs_" + this.name + "_right").html(this.right), i.finish(), Date.now() - t;
    }
  }
  render(e) {
    var t = Date.now(), i = ("string" == typeof e && (e = query(e).get(0)), this.trigger("render", { target: this.name, box: e ?? this.box }));
    if (true !== i.isCancelled)
      return null != e && (0 < query(this.box).find("#tabs_" + this.name + "_right").length && query(this.box).removeAttr("name").removeClass("w2ui-reset w2ui-tabs").html(""), this.box = e), !!this.box && (e = `
            <div class="w2ui-tabs-line"></div>
            <div class="w2ui-scroll-wrapper w2ui-eaction" data-mousedown="resize">
                <div id="tabs_${this.name}_right" class="w2ui-tabs-right">${this.right}</div>
            </div>
            <div class="w2ui-scroll-left w2ui-eaction" data-click='["scroll","left"]'></div>
            <div class="w2ui-scroll-right w2ui-eaction" data-click='["scroll","right"]'></div>`, query(this.box).attr("name", this.name).addClass("w2ui-reset w2ui-tabs").html(e), 0 < query(this.box).length && (query(this.box)[0].style.cssText += this.style), w2utils.bindEvents(query(this.box).find(".w2ui-eaction"), this), this.last.observeResize = new ResizeObserver(() => {
        this.resize();
      }), this.last.observeResize.observe(this.box), i.finish(), this.refresh(), this.resize(), Date.now() - t);
  }
  initReorder(e, a) {
    if (this.reorder) {
      let t = this, i = query(this.box).find("#tabs_" + this.name + "_tab_" + w2utils.escapeId(e)), s = this.get(e, true), l = query(i.get(0).cloneNode(true)), r;
      l.attr("id", "#tabs_" + this.name + "_tab_ghost"), this.last.moving = { index: s, indexFrom: s, $tab: i, $ghost: l, divX: 0, left: i.get(0).getBoundingClientRect().left, parentX: query(this.box).get(0).getBoundingClientRect().left, x: a.pageX, opacity: i.css("opacity") }, query(document).off(".w2uiTabReorder").on("mousemove.w2uiTabReorder", function(e2) {
        if (!t.last.reordering) {
          if (true === (r = t.trigger("reorder", { target: t.tabs[s].id, indexFrom: s, tab: t.tabs[s] })).isCancelled)
            return;
          w2tooltip.hide(this.name + "_tooltip"), t.last.reordering = true, l.addClass("moving"), l.css({ "pointer-events": "none", position: "absolute", left: i.get(0).getBoundingClientRect().left }), i.css("opacity", 0), query(t.box).find(".w2ui-scroll-wrapper").append(l.get(0)), query(t.box).find(".w2ui-tab-close").hide();
        }
        t.last.moving.divX = e2.pageX - t.last.moving.x, l.css("left", t.last.moving.left - t.last.moving.parentX + t.last.moving.divX + "px"), t.dragMove(e2);
      }).on("mouseup.w2uiTabReorder", function() {
        query(document).off(".w2uiTabReorder"), l.css({ transition: "0.1s", left: t.last.moving.$tab.get(0).getBoundingClientRect().left - t.last.moving.parentX }), query(t.box).find(".w2ui-tab-close").show(), setTimeout(() => {
          l.remove(), i.css({ opacity: t.last.moving.opacity }), t.last.reordering && r.finish({ indexTo: t.last.moving.index }), t.last.reordering = false;
        }, 100);
      });
    }
  }
  scroll(n, o) {
    return new Promise((e, t) => {
      var i = query(this.box).find(".w2ui-scroll-wrapper"), s = i.get(0).scrollLeft, l = i.find(".w2ui-tabs-right").get(0), r = i.parent().get(0).getBoundingClientRect().width, a = s + parseInt(l.offsetLeft) + parseInt(l.clientWidth);
      switch (n) {
        case "left": {
          let e2 = s - r + 50;
          e2 <= 0 && (e2 = 0), i.get(0).scrollTo({ top: 0, left: e2, behavior: o ? "atuo" : "smooth" });
          break;
        }
        case "right": {
          let e2 = s + r - 50;
          e2 >= a - r && (e2 = a - r), i.get(0).scrollTo({ top: 0, left: e2, behavior: o ? "atuo" : "smooth" });
          break;
        }
      }
      setTimeout(() => {
        this.resize(), e();
      }, o ? 0 : 350);
    });
  }
  scrollIntoView(i, s) {
    return new Promise((e, t) => {
      null == i && (i = this.active), null != this.get(i) && (query(this.box).find("#tabs_" + this.name + "_tab_" + w2utils.escapeId(i)).get(0).scrollIntoView({ block: "start", inline: "center", behavior: s ? "atuo" : "smooth" }), setTimeout(() => {
        this.resize(), e();
      }, s ? 0 : 500));
    });
  }
  resize() {
    var e = Date.now();
    if (null != this.box) {
      var t, i, s, l, r = this.trigger("resize", { target: this.name });
      if (true !== r.isCancelled)
        return (t = query(this.box)).find(".w2ui-scroll-left, .w2ui-scroll-right").hide(), i = t.find(".w2ui-scroll-wrapper").get(0), l = t.find(".w2ui-tabs-right"), (s = t.get(0).getBoundingClientRect().width) < (l = 0 < l.length ? l[0].offsetLeft + l[0].clientWidth : 0) && (0 < i.scrollLeft && t.find(".w2ui-scroll-left").show(), s < l - i.scrollLeft) && t.find(".w2ui-scroll-right").show(), r.finish(), Date.now() - e;
    }
  }
  destroy() {
    var _a;
    var e = this.trigger("destroy", { target: this.name });
    true !== e.isCancelled && (0 < query(this.box).find("#tabs_" + this.name + "_right").length && query(this.box).removeAttr("name").removeClass("w2ui-reset w2ui-tabs").html(""), (_a = this.last.observeResize) == null ? void 0 : _a.disconnect(), delete w2ui[this.name], e.finish());
  }
  click(e, t) {
    var i = this.get(e);
    if (null == i || i.disabled || this.last.reordering)
      return false;
    e = this.trigger("click", { target: e, tab: i, object: i, originalEvent: t });
    if (true !== e.isCancelled) {
      if (query(this.box).find("#tabs_" + this.name + "_tab_" + w2utils.escapeId(this.active)).removeClass("active"), this.active = i.id, query(this.box).find("#tabs_" + this.name + "_tab_" + w2utils.escapeId(this.active)).addClass("active"), "string" == typeof i.route) {
        let t2 = "" !== i.route ? String("/" + i.route).replace(/\/{2,}/g, "/") : "";
        var s = w2utils.parseRoute(t2);
        if (0 < s.keys.length)
          for (let e2 = 0; e2 < s.keys.length; e2++)
            null != this.routeData[s.keys[e2].name] && (t2 = t2.replace(new RegExp(":" + s.keys[e2].name, "g"), this.routeData[s.keys[e2].name]));
        setTimeout(() => {
          window.location.hash = t2;
        }, 1);
      }
      e.finish();
    }
  }
  clickClose(e, t) {
    var i = this.get(e);
    if (null == i || i.disabled)
      return false;
    let s = this.trigger("close", { target: e, object: i, tab: i, originalEvent: t });
    true !== s.isCancelled && (this.animateClose(e).then(() => {
      this.remove(e), s.finish(), this.refresh();
    }), t) && t.stopPropagation();
  }
  animateClose(r) {
    return new Promise((e, t) => {
      var i = query(this.box).find("#tabs_" + this.name + "_tab_" + w2utils.escapeId(r)), s = parseInt(i.get(0).clientWidth || 0);
      let l = i.replace(`<div class="tab-animate-close" style="display: inline-block; flex-shrink: 0; width: ${s}px; transition: width 0.25s"></div>`);
      setTimeout(() => {
        l.css({ width: "0px" });
      }, 1), setTimeout(() => {
        l.remove(), this.resize(), e();
      }, 500);
    });
  }
  animateInsert(t, r) {
    return new Promise((i, e) => {
      let s = query(this.box).find("#tabs_" + this.name + "_tab_" + w2utils.escapeId(t)), l = query.html(this.getTabHTML(r.id));
      if (0 == s.length)
        (s = query(this.box).find("#tabs_tabs_right")).before(l), this.resize();
      else {
        l.css({ opacity: 0 }), query(this.box).find("#tabs_tabs_right").before(l.get(0));
        let e2 = query(this.box).find("#" + l.attr("id")).get(0).clientWidth ?? 0, t2 = query.html('<div class="tab-animate-insert" style="flex-shrink: 0; width: 0; transition: width 0.25s"></div>');
        s.before(t2), l.hide(), t2.before(l[0]), setTimeout(() => {
          t2.css({ width: e2 + "px" });
        }, 1), setTimeout(() => {
          t2.remove(), l.css({ opacity: 1 }).show(), this.refresh(r.id), this.resize(), i();
        }, 500);
      }
    });
  }
};
var w2panels = ["top", "left", "main", "preview", "right", "bottom"];
var w2layout = class extends w2base {
  constructor(e) {
    super(e.name), this.box = null, this.name = null, this.panels = [], this.last = {}, this.padding = 1, this.resizer = 4, this.style = "", this.onShow = null, this.onHide = null, this.onResizing = null, this.onResizerClick = null, this.onRender = null, this.onRefresh = null, this.onChange = null, this.onResize = null, this.onDestroy = null, this.panel_template = { type: null, title: "", size: 100, minSize: 20, maxSize: false, hidden: false, resizable: false, overflow: "auto", style: "", html: "", tabs: null, toolbar: null, width: null, height: null, show: { toolbar: false, tabs: false }, removed: null, onRefresh: null, onShow: null, onHide: null }, Object.assign(this, e), Array.isArray(this.panels) || (this.panels = []), this.panels.forEach((e2, t) => {
      var i, s, l;
      this.panels[t] = w2utils.extend({}, this.panel_template, e2), (w2utils.isPlainObject(e2.tabs) || Array.isArray(e2.tabs)) && function(e3, t2, i2) {
        var s2 = e3.get(t2);
        null != s2 && null == i2 && (i2 = s2.tabs);
        if (null == s2 || null == i2)
          return;
        Array.isArray(i2) && (i2 = { tabs: i2 });
        var l2 = e3.name + "_" + t2 + "_tabs";
        w2ui[l2] && w2ui[l2].destroy();
        s2.tabs = new w2tabs(w2utils.extend({}, i2, { owner: e3, name: e3.name + "_" + t2 + "_tabs" })), s2.show.tabs = true;
      }(this, e2.type), (w2utils.isPlainObject(e2.toolbar) || Array.isArray(e2.toolbar)) && (t = this, e2 = e2.type, i = void 0, null != (s = t.get(e2)) && null == i && (i = s.toolbar), null != s) && null != i && (Array.isArray(i) && (i = { items: i }), l = t.name + "_" + e2 + "_toolbar", w2ui[l] && w2ui[l].destroy(), s.toolbar = new w2toolbar(w2utils.extend({}, i, { owner: t, name: t.name + "_" + e2 + "_toolbar" })), s.show.toolbar = true);
    }), w2panels.forEach((e2) => {
      null == this.get(e2) && this.panels.push(w2utils.extend({}, this.panel_template, { type: e2, hidden: "main" !== e2, size: 50 }));
    }), "string" == typeof this.box && (this.box = query(this.box).get(0)), this.box && this.render(this.box);
  }
  html(l, r, a) {
    let n = this.get(l);
    var e = { panel: l, html: n.html, error: false, cancelled: false, removed(e2) {
      "function" == typeof e2 && (n.removed = e2);
    } };
    if ("function" == typeof n.removed && (n.removed({ panel: l, html: n.html, html_new: r, transition: a || "none" }), n.removed = null), "css" == l)
      query(this.box).find("#layout_" + this.name + "_panel_css").html("<style>" + r + "</style>"), e.status = true;
    else if (null == n)
      console.log("ERROR: incorrect panel name. Panel name can be main, left, right, top, bottom, preview or css"), e.error = true;
    else if (null != r) {
      var t = this.trigger("change", { target: l, panel: n, html_new: r, transition: a });
      if (true === t.isCancelled)
        e.cancelled = true;
      else {
        let i = "#layout_" + this.name + "_panel_" + n.type;
        var o = query(this.box).find(i + "> .w2ui-panel-content");
        let s = 0;
        if (0 < o.length && (query(this.box).find(i).get(0).scrollTop = 0, s = query(o).css("top")), "" === n.html)
          n.html = r, this.refresh(l);
        else if (n.html = r, !n.hidden)
          if (null != a && "" !== a) {
            query(this.box).addClass("animating");
            let e2 = query(this.box).find(i + "> .w2ui-panel-content"), t2 = (e2.after('<div class="w2ui-panel-content new-panel" style="' + e2[0].style.cssText + '"></div>'), query(this.box).find(i + "> .w2ui-panel-content.new-panel"));
            e2.css("top", s), t2.css("top", s), "object" == typeof r ? (r.box = t2[0], r.render()) : t2.hide().html(r), w2utils.transition(e2[0], t2[0], a, () => {
              e2.remove(), t2.removeClass("new-panel"), t2.css("overflow", n.overflow), query(query(this.box).find(i + "> .w2ui-panel-content").get(1)).remove(), query(this.box).removeClass("animating"), this.refresh(l);
            });
          } else
            this.refresh(l);
        t.finish();
      }
    }
    return e;
  }
  message(e, t) {
    var i = this.get(e);
    let s = query(this.box).find("#layout_" + this.name + "_panel_" + i.type), l = s.css("overflow");
    s.css("overflow", "hidden");
    i = w2utils.message({ owner: this, box: s.get(0), after: ".w2ui-panel-title", param: e }, t);
    return i && i.self.on("close:after", () => {
      s.css("overflow", l);
    }), i;
  }
  confirm(e, t) {
    var i = this.get(e);
    let s = query(this.box).find("#layout_" + this.name + "_panel_" + i.type), l = s.css("overflow");
    s.css("overflow", "hidden");
    i = w2utils.confirm({ owner: this, box: s.get(0), after: ".w2ui-panel-title", param: e }, t);
    return i && i.self.on("close:after", () => {
      s.css("overflow", l);
    }), i;
  }
  load(i, s, l) {
    return new Promise((t, e) => {
      "css" != i && null == this.get(i) || null == s ? e() : fetch(s).then((e2) => e2.text()).then((e2) => {
        this.resize(), t(this.html(i, e2, l));
      });
    });
  }
  sizeTo(e, t, i) {
    return null != this.get(e) && (query(this.box).find(":scope > div > .w2ui-panel").css("transition", true !== i ? ".2s" : "0s"), setTimeout(() => {
      this.set(e, { size: t });
    }, 1), setTimeout(() => {
      query(this.box).find(":scope > div > .w2ui-panel").css("transition", "0s"), this.resize();
    }, 300), true);
  }
  show(e, t) {
    let i = this.trigger("show", { target: e, thisect: this.get(e), immediate: t });
    var s;
    if (true !== i.isCancelled)
      return null != (s = this.get(e)) && (!(s.hidden = false) === t ? (query(this.box).find("#layout_" + this.name + "_panel_" + e).css({ opacity: "1" }), i.finish(), this.resize()) : (query(this.box).addClass("animating"), query(this.box).find("#layout_" + this.name + "_panel_" + e).css({ opacity: "0" }), query(this.box).find(":scope > div > .w2ui-panel").css("transition", ".2s"), setTimeout(() => {
        this.resize();
      }, 1), setTimeout(() => {
        query(this.box).find("#layout_" + this.name + "_panel_" + e).css({ opacity: "1" });
      }, 250), setTimeout(() => {
        query(this.box).find(":scope > div > .w2ui-panel").css("transition", "0s"), query(this.box).removeClass("animating"), i.finish(), this.resize();
      }, 300)), true);
  }
  hide(e, t) {
    let i = this.trigger("hide", { target: e, object: this.get(e), immediate: t });
    var s;
    if (true !== i.isCancelled)
      return null != (s = this.get(e)) && ((s.hidden = true) === t ? (query(this.box).find("#layout_" + this.name + "_panel_" + e).css({ opacity: "0" }), i.finish(), this.resize()) : (query(this.box).addClass("animating"), query(this.box).find(":scope > div > .w2ui-panel").css("transition", ".2s"), query(this.box).find("#layout_" + this.name + "_panel_" + e).css({ opacity: "0" }), setTimeout(() => {
        this.resize();
      }, 1), setTimeout(() => {
        query(this.box).find(":scope > div > .w2ui-panel").css("transition", "0s"), query(this.box).removeClass("animating"), i.finish(), this.resize();
      }, 300)), true);
  }
  toggle(e, t) {
    var i = this.get(e);
    return null != i && (i.hidden ? this.show(e, t) : this.hide(e, t));
  }
  set(e, t) {
    var i = this.get(e, true);
    return null != i && (w2utils.extend(this.panels[i], t), null == t.html && null == t.resizable || this.refresh(e), this.resize(), true);
  }
  get(t, i) {
    for (let e = 0; e < this.panels.length; e++)
      if (this.panels[e].type == t)
        return true === i ? e : this.panels[e];
    return null;
  }
  el(e) {
    e = query(this.box).find("#layout_" + this.name + "_panel_" + e + "> .w2ui-panel-content");
    return 1 != e.length ? null : e[0];
  }
  hideToolbar(e) {
    var t = this.get(e);
    t && (t.show.toolbar = false, query(this.box).find("#layout_" + this.name + "_panel_" + e + "> .w2ui-panel-toolbar").hide(), this.resize());
  }
  showToolbar(e) {
    var t = this.get(e);
    t && (t.show.toolbar = true, query(this.box).find("#layout_" + this.name + "_panel_" + e + "> .w2ui-panel-toolbar").show(), this.resize());
  }
  toggleToolbar(e) {
    var t = this.get(e);
    t && (t.show.toolbar ? this.hideToolbar(e) : this.showToolbar(e));
  }
  assignToolbar(e, t) {
    "string" == typeof t && null != w2ui[t] && (t = w2ui[t]);
    var i = this.get(e), s = (i.toolbar = t, query(this.box).find(e + "> .w2ui-panel-toolbar"));
    null != i.toolbar ? (0 === s.find("[name=" + i.toolbar.name + "]").length ? i.toolbar.render(s.get(0)) : null != i.toolbar && i.toolbar.refresh(), (t.owner = this).showToolbar(e), this.refresh(e)) : (s.html(""), this.hideToolbar(e));
  }
  hideTabs(e) {
    var t = this.get(e);
    t && (t.show.tabs = false, query(this.box).find("#layout_" + this.name + "_panel_" + e + "> .w2ui-panel-tabs").hide(), this.resize());
  }
  showTabs(e) {
    var t = this.get(e);
    t && (t.show.tabs = true, query(this.box).find("#layout_" + this.name + "_panel_" + e + "> .w2ui-panel-tabs").show(), this.resize());
  }
  toggleTabs(e) {
    var t = this.get(e);
    t && (t.show.tabs ? this.hideTabs(e) : this.showTabs(e));
  }
  render(e) {
    var t = Date.now();
    let o = this;
    "string" == typeof e && (e = query(e).get(0));
    var i = this.trigger("render", { target: this.name, box: e ?? this.box });
    if (true !== i.isCancelled) {
      if (null != e && (0 < query(this.box).find("#layout_" + this.name + "_panel_main").length && query(this.box).removeAttr("name").removeClass("w2ui-layout").html(""), this.box = e), !this.box)
        return false;
      query(this.box).attr("name", this.name).addClass("w2ui-layout").html("<div></div>"), 0 < query(this.box).length && (query(this.box)[0].style.cssText += this.style);
      for (let e2 = 0; e2 < w2panels.length; e2++) {
        var s = '<div id="layout_' + this.name + "_panel_" + w2panels[e2] + '" class="w2ui-panel">    <div class="w2ui-panel-title"></div>    <div class="w2ui-panel-tabs"></div>    <div class="w2ui-panel-toolbar"></div>    <div class="w2ui-panel-content"></div></div><div id="layout_' + this.name + "_resizer_" + w2panels[e2] + '" class="w2ui-resizer"></div>';
        query(this.box).find(":scope > div").append(s);
      }
      return query(this.box).find(":scope > div").append('<div id="layout_' + this.name + '_panel_css" style="position: absolute; top: 10000px;"></div>'), this.refresh(), this.last.observeResize = new ResizeObserver(() => {
        this.resize();
      }), this.last.observeResize.observe(this.box), i.finish(), setTimeout(() => {
        o.last.events = { resizeStart: l, mouseMove: a, mouseUp: r }, this.resize();
      }, 0), Date.now() - t;
    }
    function l(e2, t2) {
      o.box && (t2 = t2 || window.event, query(document).off("mousemove", o.last.events.mouseMove).on("mousemove", o.last.events.mouseMove), query(document).off("mouseup", o.last.events.mouseUp).on("mouseup", o.last.events.mouseUp), o.last.resize = { type: e2, x: t2.screenX, y: t2.screenY, diff_x: 0, diff_y: 0, value: 0 }, w2panels.forEach((e3) => {
        var t3 = query(o.el(e3)).find(".w2ui-lock");
        0 < t3.length ? t3.data("locked", "yes") : o.lock(e3, { opacity: 0 });
      }), t2 = query(o.box).find("#layout_" + o.name + "_resizer_" + e2).get(0), "left" != e2 && "right" != e2 || (o.last.resize.value = parseInt(t2.style.left)), "top" != e2 && "preview" != e2 && "bottom" != e2 || (o.last.resize.value = parseInt(t2.style.top)));
    }
    function r(i2) {
      if (o.box && (i2 = i2 || window.event, query(document).off("mousemove", o.last.events.mouseMove), query(document).off("mouseup", o.last.events.mouseUp), null != o.last.resize)) {
        if (w2panels.forEach((e2) => {
          var t2 = query(o.el(e2)).find(".w2ui-lock");
          "yes" == t2.data("locked") ? t2.removeData("locked") : o.unlock(e2);
        }), 0 !== o.last.diff_x || 0 !== o.last.resize.diff_y) {
          var s2 = o.get("top"), l2 = o.get("bottom"), r2 = o.get(o.last.resize.type), i2 = w2utils.getSize(query(o.box), "width"), a2 = w2utils.getSize(query(o.box), "height"), n = String(r2.size);
          let e2, t2;
          switch (o.last.resize.type) {
            case "top":
              e2 = parseInt(r2.sizeCalculated) + o.last.resize.diff_y, t2 = 0;
              break;
            case "bottom":
              e2 = parseInt(r2.sizeCalculated) - o.last.resize.diff_y, t2 = 0;
              break;
            case "preview":
              e2 = parseInt(r2.sizeCalculated) - o.last.resize.diff_y, t2 = (s2 && !s2.hidden ? s2.sizeCalculated : 0) + (l2 && !l2.hidden ? l2.sizeCalculated : 0);
              break;
            case "left":
              e2 = parseInt(r2.sizeCalculated) + o.last.resize.diff_x, t2 = 0;
              break;
            case "right":
              e2 = parseInt(r2.sizeCalculated) - o.last.resize.diff_x, t2 = 0;
          }
          "%" == n.substr(n.length - 1) ? r2.size = Math.floor(100 * e2 / ("left" == r2.type || "right" == r2.type ? i2 : a2 - t2) * 100) / 100 + "%" : "-" == String(r2.size).substr(0, 1) ? r2.size = parseInt(r2.size) - r2.sizeCalculated + e2 : r2.size = e2, o.resize();
        }
        query(o.box).find("#layout_" + o.name + "_resizer_" + o.last.resize.type).removeClass("active"), delete o.last.resize;
      }
    }
    function a(i2) {
      if (o.box && (i2 = i2 || window.event, null != o.last.resize)) {
        var s2 = o.get(o.last.resize.type), l2 = o.last.resize, r2 = o.trigger("resizing", { target: o.name, object: s2, originalEvent: i2, panel: l2 ? l2.type : "all", diff_x: l2 ? l2.diff_x : 0, diff_y: l2 ? l2.diff_y : 0 });
        if (true !== r2.isCancelled) {
          var a2 = query(o.box).find("#layout_" + o.name + "_resizer_" + l2.type);
          let e2 = i2.screenX - l2.x, t2 = i2.screenY - l2.y;
          var n = o.get("main");
          switch (a2.hasClass("active") || a2.addClass("active"), l2.type) {
            case "left":
              s2.minSize - e2 > s2.width && (e2 = s2.minSize - s2.width), s2.maxSize && s2.width + e2 > s2.maxSize && (e2 = s2.maxSize - s2.width), n.minSize + e2 > n.width && (e2 = n.width - n.minSize);
              break;
            case "right":
              s2.minSize + e2 > s2.width && (e2 = s2.width - s2.minSize), s2.maxSize && s2.width - e2 > s2.maxSize && (e2 = s2.width - s2.maxSize), n.minSize - e2 > n.width && (e2 = n.minSize - n.width);
              break;
            case "top":
              s2.minSize - t2 > s2.height && (t2 = s2.minSize - s2.height), s2.maxSize && s2.height + t2 > s2.maxSize && (t2 = s2.maxSize - s2.height), n.minSize + t2 > n.height && (t2 = n.height - n.minSize);
              break;
            case "preview":
            case "bottom":
              s2.minSize + t2 > s2.height && (t2 = s2.height - s2.minSize), s2.maxSize && s2.height - t2 > s2.maxSize && (t2 = s2.height - s2.maxSize), n.minSize - t2 > n.height && (t2 = n.minSize - n.height);
          }
          switch (l2.diff_x = e2, l2.diff_y = t2, l2.type) {
            case "top":
            case "preview":
            case "bottom":
              (l2.diff_x = 0) < a2.length && (a2[0].style.top = l2.value + l2.diff_y + "px");
              break;
            case "left":
            case "right":
              (l2.diff_y = 0) < a2.length && (a2[0].style.left = l2.value + l2.diff_x + "px");
          }
          r2.finish();
        }
      }
    }
  }
  refresh(s) {
    let l = this;
    null == s && (s = null);
    var e = Date.now(), t = l.trigger("refresh", { target: null != s ? s : l.name, object: l.get(s) });
    if (true !== t.isCancelled) {
      if ("string" == typeof s) {
        let e2 = l.get(s);
        if (null == e2)
          return;
        let t2 = "#layout_" + l.name + "_panel_" + e2.type;
        s = "#layout_" + l.name + "_resizer_" + e2.type;
        query(l.box).find(t2).css({ display: e2.hidden ? "none" : "block" }), e2.resizable ? query(l.box).find(s).show() : query(l.box).find(s).hide(), "object" == typeof e2.html && "function" == typeof e2.html.render ? (e2.html.box = query(l.box).find(t2 + "> .w2ui-panel-content")[0], setTimeout(() => {
          0 < query(l.box).find(t2 + "> .w2ui-panel-content").length && (query(l.box).find(t2 + "> .w2ui-panel-content").removeClass().removeAttr("name").addClass("w2ui-panel-content").css("overflow", e2.overflow)[0].style.cssText += ";" + e2.style), e2.html && "function" == typeof e2.html.render && e2.html.render();
        }, 1)) : 0 < query(l.box).find(t2 + "> .w2ui-panel-content").length && (query(l.box).find(t2 + "> .w2ui-panel-content").removeClass().removeAttr("name").addClass("w2ui-panel-content").html(e2.html).css("overflow", e2.overflow)[0].style.cssText += ";" + e2.style);
        let i = query(l.box).find(t2 + "> .w2ui-panel-tabs");
        e2.show.tabs ? 0 === i.find("[name=" + e2.tabs.name + "]").length && null != e2.tabs ? e2.tabs.render(i.get(0)) : e2.tabs.refresh() : i.html("").removeClass("w2ui-tabs").hide(), i = query(l.box).find(t2 + "> .w2ui-panel-toolbar"), e2.show.toolbar ? 0 === i.find("[name=" + e2.toolbar.name + "]").length && null != e2.toolbar ? e2.toolbar.render(i.get(0)) : e2.toolbar.refresh() : i.html("").removeClass("w2ui-toolbar").hide(), i = query(l.box).find(t2 + "> .w2ui-panel-title"), e2.title ? i.html(e2.title).show() : i.html("").hide();
      } else {
        if (0 === query(l.box).find("#layout_" + l.name + "_panel_main").length)
          return void l.render();
        l.resize();
        for (let e2 = 0; e2 < this.panels.length; e2++)
          l.refresh(this.panels[e2].type);
      }
      return t.finish(), Date.now() - e;
    }
  }
  resize() {
    if (!this.box)
      return false;
    var r = Date.now();
    let a = this.last.resize;
    var n = this.trigger("resize", { target: this.name, panel: a ? a.type : "all", diff_x: a ? a.diff_x : 0, diff_y: a ? a.diff_y : 0 });
    if (true !== n.isCancelled) {
      this.padding < 0 && (this.padding = 0);
      var o = w2utils.getSize(query(this.box), "width"), h = w2utils.getSize(query(this.box), "height");
      let i = this;
      var d = this.get("main"), u = this.get("preview"), c = this.get("left"), p = this.get("right"), f = this.get("top"), m = this.get("bottom"), g = null != u && true !== u.hidden, y = null != c && true !== c.hidden, w = null != p && true !== p.hidden, b = null != f && true !== f.hidden, v = null != m && true !== m.hidden;
      let e, t, s, l;
      for (let e2 = 0; e2 < w2panels.length; e2++)
        if ("main" !== w2panels[e2] && (a = this.get(w2panels[e2]))) {
          var x = String(a.size || 0);
          if ("%" == x.substr(x.length - 1)) {
            let e3 = h;
            "preview" == a.type && (e3 = e3 - (f && !f.hidden ? f.sizeCalculated : 0) - (m && !m.hidden ? m.sizeCalculated : 0)), a.sizeCalculated = parseInt(("left" == a.type || "right" == a.type ? o : e3) * parseFloat(a.size) / 100);
          } else
            a.sizeCalculated = parseInt(a.size);
          a.sizeCalculated = Math.max(a.sizeCalculated, parseInt(a.minSize));
        }
      "-" == String(p.size).substr(0, 1) && (y && "-" == String(c.size).substr(0, 1) ? console.log("ERROR: you cannot have both left panel.size and right panel.size be negative.") : p.sizeCalculated = o - (y ? c.sizeCalculated : 0) + parseInt(p.size)), "-" == String(c.size).substr(0, 1) && (w && "-" == String(p.size).substr(0, 1) ? console.log("ERROR: you cannot have both left panel.size and right panel.size be negative.") : c.sizeCalculated = o - (w ? p.sizeCalculated : 0) + parseInt(c.size)), null != f && true !== f.hidden ? (e = 0, t = 0, s = o, l = f.sizeCalculated, query(this.box).find("#layout_" + this.name + "_panel_top").css({ display: "block", left: e + "px", top: t + "px", width: s + "px", height: l + "px" }), f.width = s, f.height = l, f.resizable && (t = f.sizeCalculated - (0 === this.padding ? this.resizer : 0), l = this.resizer > this.padding ? this.resizer : this.padding, query(this.box).find("#layout_" + this.name + "_resizer_top").css({ display: "block", left: e + "px", top: t + "px", width: s + "px", height: l + "px", cursor: "ns-resize" }).off("mousedown").on("mousedown", function(e2) {
        e2.preventDefault();
        var t2 = i.trigger("resizerClick", { target: "top", originalEvent: e2 });
        if (true !== t2.isCancelled)
          return w2ui[i.name].last.events.resizeStart("top", e2), t2.finish(), false;
      }))) : (query(this.box).find("#layout_" + this.name + "_panel_top").hide(), query(this.box).find("#layout_" + this.name + "_resizer_top").hide()), null != c && true !== c.hidden ? (e = 0, t = 0 + (b ? f.sizeCalculated + this.padding : 0), s = c.sizeCalculated, l = h - (b ? f.sizeCalculated + this.padding : 0) - (v ? m.sizeCalculated + this.padding : 0), query(this.box).find("#layout_" + this.name + "_panel_left").css({ display: "block", left: e + "px", top: t + "px", width: s + "px", height: l + "px" }), c.width = s, c.height = l, c.resizable && (e = c.sizeCalculated - (0 === this.padding ? this.resizer : 0), s = this.resizer > this.padding ? this.resizer : this.padding, query(this.box).find("#layout_" + this.name + "_resizer_left").css({ display: "block", left: e + "px", top: t + "px", width: s + "px", height: l + "px", cursor: "ew-resize" }).off("mousedown").on("mousedown", function(e2) {
        e2.preventDefault();
        var t2 = i.trigger("resizerClick", { target: "left", originalEvent: e2 });
        if (true !== t2.isCancelled)
          return w2ui[i.name].last.events.resizeStart("left", e2), t2.finish(), false;
      }))) : (query(this.box).find("#layout_" + this.name + "_panel_left").hide(), query(this.box).find("#layout_" + this.name + "_resizer_left").hide()), null != p && true !== p.hidden ? (e = o - p.sizeCalculated, t = 0 + (b ? f.sizeCalculated + this.padding : 0), s = p.sizeCalculated, l = h - (b ? f.sizeCalculated + this.padding : 0) - (v ? m.sizeCalculated + this.padding : 0), query(this.box).find("#layout_" + this.name + "_panel_right").css({ display: "block", left: e + "px", top: t + "px", width: s + "px", height: l + "px" }), p.width = s, p.height = l, p.resizable && (e -= this.padding, s = this.resizer > this.padding ? this.resizer : this.padding, query(this.box).find("#layout_" + this.name + "_resizer_right").css({ display: "block", left: e + "px", top: t + "px", width: s + "px", height: l + "px", cursor: "ew-resize" }).off("mousedown").on("mousedown", function(e2) {
        e2.preventDefault();
        var t2 = i.trigger("resizerClick", { target: "right", originalEvent: e2 });
        if (true !== t2.isCancelled)
          return w2ui[i.name].last.events.resizeStart("right", e2), t2.finish(), false;
      }))) : (query(this.box).find("#layout_" + this.name + "_panel_right").hide(), query(this.box).find("#layout_" + this.name + "_resizer_right").hide()), null != m && true !== m.hidden ? (e = 0, t = h - m.sizeCalculated, s = o, l = m.sizeCalculated, query(this.box).find("#layout_" + this.name + "_panel_bottom").css({ display: "block", left: e + "px", top: t + "px", width: s + "px", height: l + "px" }), m.width = s, m.height = l, m.resizable && (t -= 0 === this.padding ? 0 : this.padding, l = this.resizer > this.padding ? this.resizer : this.padding, query(this.box).find("#layout_" + this.name + "_resizer_bottom").css({ display: "block", left: e + "px", top: t + "px", width: s + "px", height: l + "px", cursor: "ns-resize" }).off("mousedown").on("mousedown", function(e2) {
        e2.preventDefault();
        var t2 = i.trigger("resizerClick", { target: "bottom", originalEvent: e2 });
        if (true !== t2.isCancelled)
          return w2ui[i.name].last.events.resizeStart("bottom", e2), t2.finish(), false;
      }))) : (query(this.box).find("#layout_" + this.name + "_panel_bottom").hide(), query(this.box).find("#layout_" + this.name + "_resizer_bottom").hide()), e = 0 + (y ? c.sizeCalculated + this.padding : 0), t = 0 + (b ? f.sizeCalculated + this.padding : 0), s = o - (y ? c.sizeCalculated + this.padding : 0) - (w ? p.sizeCalculated + this.padding : 0), l = h - (b ? f.sizeCalculated + this.padding : 0) - (v ? m.sizeCalculated + this.padding : 0) - (g ? u.sizeCalculated + this.padding : 0), query(this.box).find("#layout_" + this.name + "_panel_main").css({ display: "block", left: e + "px", top: t + "px", width: s + "px", height: l + "px" }), d.width = s, d.height = l, null != u && true !== u.hidden ? (e = 0 + (y ? c.sizeCalculated + this.padding : 0), t = h - (v ? m.sizeCalculated + this.padding : 0) - u.sizeCalculated, s = o - (y ? c.sizeCalculated + this.padding : 0) - (w ? p.sizeCalculated + this.padding : 0), l = u.sizeCalculated, query(this.box).find("#layout_" + this.name + "_panel_preview").css({ display: "block", left: e + "px", top: t + "px", width: s + "px", height: l + "px" }), u.width = s, u.height = l, u.resizable && (t -= 0 === this.padding ? 0 : this.padding, l = this.resizer > this.padding ? this.resizer : this.padding, query(this.box).find("#layout_" + this.name + "_resizer_preview").css({ display: "block", left: e + "px", top: t + "px", width: s + "px", height: l + "px", cursor: "ns-resize" }).off("mousedown").on("mousedown", function(e2) {
        e2.preventDefault();
        var t2 = i.trigger("resizerClick", { target: "preview", originalEvent: e2 });
        if (true !== t2.isCancelled)
          return w2ui[i.name].last.events.resizeStart("preview", e2), t2.finish(), false;
      }))) : (query(this.box).find("#layout_" + this.name + "_panel_preview").hide(), query(this.box).find("#layout_" + this.name + "_resizer_preview").hide());
      for (let t2 = 0; t2 < w2panels.length; t2++) {
        var _, q = this.get(w2panels[t2]), C = "#layout_" + this.name + "_panel_" + w2panels[t2] + " > .w2ui-panel-";
        let e2 = 0;
        q && (q.title && (_ = query(this.box).find(C + "title").css({ top: e2 + "px", display: "block" }), e2 += w2utils.getSize(_, "height")), q.show.tabs && (_ = query(this.box).find(C + "tabs").css({ top: e2 + "px", display: "block" }), e2 += w2utils.getSize(_, "height")), q.show.toolbar) && (q = query(this.box).find(C + "toolbar").css({ top: e2 + "px", display: "block" }), e2 += w2utils.getSize(q, "height")), query(this.box).find(C + "content").css({ display: "block" }).css({ top: e2 + "px" });
      }
      return n.finish(), Date.now() - r;
    }
  }
  destroy() {
    var _a;
    var e = this.trigger("destroy", { target: this.name });
    if (true !== e.isCancelled)
      return null != w2ui[this.name] && (0 < query(this.box).find("#layout_" + this.name + "_panel_main").length && query(this.box).removeAttr("name").removeClass("w2ui-layout").html(""), (_a = this.last.observeResize) == null ? void 0 : _a.disconnect(), delete w2ui[this.name], e.finish(), this.last.events && this.last.events.resize && query(window).off("resize", this.last.events.resize), true);
  }
  lock(e, t, i) {
    var s;
    -1 == w2panels.indexOf(e) ? console.log("ERROR: First parameter needs to be the a valid panel name.") : ((s = Array.from(arguments))[0] = "#layout_" + this.name + "_panel_" + e, w2utils.lock(...s));
  }
  unlock(e, t) {
    -1 == w2panels.indexOf(e) ? console.log("ERROR: First parameter needs to be the a valid panel name.") : (e = "#layout_" + this.name + "_panel_" + e, w2utils.unlock(e, t));
  }
};
var w2grid = class extends w2base {
  constructor(e) {
    if (super(e.name), this.name = null, this.box = null, this.columns = [], this.columnGroups = [], this.records = [], this.summary = [], this.searches = [], this.toolbar = {}, this.ranges = [], this.contextMenu = [], this.searchMap = {}, this.searchData = [], this.sortMap = {}, this.sortData = [], this.savedSearches = [], this.defaultSearches = [], this.total = 0, this.recid = null, this.last = { field: "", label: "", logic: "AND", search: "", searchIds: [], selection: { indexes: [], columns: {} }, saved_sel: null, multi: false, scrollTop: 0, scrollLeft: 0, colStart: 0, colEnd: 0, fetch: { action: "", offset: null, start: 0, response: 0, options: null, controller: null, loaded: false, hasMore: false }, pull_more: false, pull_refresh: true, range_start: null, range_end: null, sel_ind: null, sel_col: null, sel_type: null, sel_recid: null, idCache: {}, move: null, cancelClick: null, inEditMode: false, _edit: null, kbd_timer: null, marker_timer: null, click_time: null, click_recid: null, bubbleEl: null, colResizing: false, tmp: null, copy_event: null, userSelect: "", columnDrag: false, state: null, show_extra: 0, toolbar_height: 0 }, this.header = "", this.url = "", this.limit = 100, this.offset = 0, this.postData = {}, this.routeData = {}, this.httpHeaders = {}, this.show = { header: false, toolbar: false, footer: false, columnMenu: true, columnHeaders: true, lineNumbers: false, expandColumn: false, selectColumn: false, emptyRecords: true, toolbarReload: true, toolbarColumns: false, toolbarSearch: true, toolbarAdd: false, toolbarEdit: false, toolbarDelete: false, toolbarSave: false, searchAll: true, searchLogic: true, searchHiddenMsg: false, searchSave: true, statusRange: true, statusBuffered: false, statusRecordID: true, statusSelection: true, statusResponse: true, statusSort: false, statusSearch: false, recordTitles: false, selectionBorder: true, skipRecords: true, saveRestoreState: true }, this.stateId = null, this.hasFocus = false, this.autoLoad = true, this.fixedBody = true, this.recordHeight = 32, this.lineNumberWidth = 34, this.keyboard = true, this.selectType = "row", this.liveSearch = false, this.multiSearch = true, this.multiSelect = true, this.multiSort = true, this.reorderColumns = false, this.reorderRows = false, this.showExtraOnSearch = 0, this.markSearch = true, this.columnTooltip = "top|bottom", this.disableCVS = false, this.nestedFields = true, this.vs_start = 150, this.vs_extra = 5, this.style = "", this.tabIndex = null, this.dataType = null, this.parser = null, this.advanceOnEdit = true, this.useLocalStorage = true, this.colTemplate = { text: "", field: "", size: null, min: 20, max: null, gridMinWidth: null, sizeCorrected: null, sizeCalculated: null, sizeOriginal: null, sizeType: null, hidden: false, sortable: false, sortMode: null, searchable: false, resizable: true, hideable: true, autoResize: null, attr: "", style: "", render: null, title: null, tooltip: null, editable: {}, frozen: false, info: null, clipboardCopy: false }, this.stateColProps = { text: false, field: true, size: true, min: false, max: false, gridMinWidth: false, sizeCorrected: false, sizeCalculated: true, sizeOriginal: true, sizeType: true, hidden: true, sortable: false, sortMode: true, searchable: false, resizable: false, hideable: false, autoResize: false, attr: false, style: false, render: false, title: false, tooltip: false, editable: false, frozen: true, info: false, clipboardCopy: false }, this.msgDelete = "Are you sure you want to delete ${count} ${records}?", this.msgNotJSON = "Returned data is not in valid JSON format.", this.msgHTTPError = "HTTP error. See console for more details.", this.msgServerError = "Server error", this.msgRefresh = "Refreshing...", this.msgNeedReload = "Your remote data source record count has changed, reloading from the first record.", this.msgEmpty = "", this.buttons = { reload: { type: "button", id: "w2ui-reload", icon: "w2ui-icon-reload", tooltip: "Reload data in the list" }, columns: { type: "menu-check", id: "w2ui-column-on-off", icon: "w2ui-icon-columns", tooltip: "Show/hide columns", overlay: { align: "none" } }, search: { type: "html", id: "w2ui-search", html: '<div class="w2ui-icon w2ui-icon-search w2ui-search-down w2ui-action" data-click="searchShowFields"></div>' }, add: { type: "button", id: "w2ui-add", text: "Add New", tooltip: "Add new record", icon: "w2ui-icon-plus" }, edit: { type: "button", id: "w2ui-edit", text: "Edit", tooltip: "Edit selected record", icon: "w2ui-icon-pencil", batch: 1, disabled: true }, delete: { type: "button", id: "w2ui-delete", text: "Delete", tooltip: "Delete selected records", icon: "w2ui-icon-cross", batch: true, disabled: true }, save: { type: "button", id: "w2ui-save", text: "Save", tooltip: "Save changed records", icon: "w2ui-icon-check" } }, this.operators = { text: ["is", "begins", "contains", "ends"], number: ["=", "between", ">", "<", ">=", "<="], date: ["is", { oper: "less", text: "before" }, { oper: "more", text: "since" }, "between"], list: ["is"], hex: ["is", "between"], color: ["is", "begins", "contains", "ends"], enum: ["in", "not in"] }, this.defaultOperator = { text: "begins", number: "=", date: "is", list: "is", enum: "in", hex: "begins", color: "begins" }, this.operatorsMap = { text: "text", int: "number", float: "number", money: "number", currency: "number", percent: "number", hex: "hex", alphanumeric: "text", color: "color", date: "date", time: "date", datetime: "date", list: "list", combo: "text", enum: "enum", file: "enum", select: "list", radio: "list", checkbox: "list", toggle: "list" }, this.onAdd = null, this.onEdit = null, this.onRequest = null, this.onLoad = null, this.onDelete = null, this.onSave = null, this.onSelect = null, this.onClick = null, this.onDblClick = null, this.onContextMenu = null, this.onContextMenuClick = null, this.onColumnClick = null, this.onColumnDblClick = null, this.onColumnContextMenu = null, this.onColumnResize = null, this.onColumnAutoResize = null, this.onSort = null, this.onSearch = null, this.onSearchOpen = null, this.onChange = null, this.onRestore = null, this.onExpand = null, this.onCollapse = null, this.onError = null, this.onKeydown = null, this.onToolbar = null, this.onColumnOnOff = null, this.onCopy = null, this.onPaste = null, this.onSelectionExtend = null, this.onEditField = null, this.onRender = null, this.onRefresh = null, this.onReload = null, this.onResize = null, this.onDestroy = null, this.onStateSave = null, this.onStateRestore = null, this.onFocus = null, this.onBlur = null, this.onReorderRow = null, this.onSearchSave = null, this.onSearchRemove = null, this.onSearchSelect = null, this.onColumnSelect = null, this.onColumnDragStart = null, this.onColumnDragEnd = null, this.onResizerDblClick = null, this.onMouseEnter = null, this.onMouseLeave = null, w2utils.extend(this, e), Array.isArray(this.records)) {
      let i = [];
      this.records.forEach((e2, t) => {
        var _a;
        null != e2[this.recid] && (e2.recid = e2[this.recid]), null == e2.recid && console.log("ERROR: Cannot add records without recid. (obj: " + this.name + ")"), true === ((_a = e2.w2ui) == null ? void 0 : _a.summary) && (this.summary.push(e2), i.push(t));
      }), i.sort();
      for (let e2 = i.length - 1; 0 <= e2; e2--)
        this.records.splice(i[e2], 1);
    }
    Array.isArray(this.columns) && this.columns.forEach((i, e2) => {
      i = w2utils.extend({}, this.colTemplate, i);
      e2 = (this.columns[e2] = i).searchable;
      if (null != e2 && false !== e2 && null == this.getSearch(i.field))
        if (w2utils.isPlainObject(e2))
          this.addSearch(w2utils.extend({ field: i.field, label: i.text, type: "text" }, e2));
        else {
          let e3 = i.searchable, t = "";
          true === i.searchable && (e3 = "text", t = 'size="20"'), this.addSearch({ field: i.field, label: i.text, type: e3, attr: t });
        }
    }), Array.isArray(this.defaultSearches) && this.defaultSearches.forEach((e2, t) => {
      e2.id = "default-" + t, e2.icon ?? (e2.icon = "w2ui-icon-search");
    });
    e = this.cache("searches");
    Array.isArray(e) && e.forEach((e2) => {
      this.savedSearches.push({ id: e2.id ?? "none", text: e2.text ?? "none", icon: "w2ui-icon-search", remove: true, logic: e2.logic ?? "AND", data: e2.data ?? [] });
    }), "string" == typeof this.box && (this.box = query(this.box).get(0)), this.box && this.render(this.box);
  }
  add(t, i) {
    var _a, _b;
    Array.isArray(t) || (t = [t]);
    let s = 0;
    for (let e = 0; e < t.length; e++) {
      var l = t[e];
      null != l[this.recid] && (l.recid = l[this.recid]), null == l.recid ? console.log("ERROR: Cannot add record without recid. (obj: " + this.name + ")") : (true === ((_a = l.w2ui) == null ? void 0 : _a.summary) ? i ? this.summary.unshift(l) : this.summary.push(l) : i ? this.records.unshift(l) : this.records.push(l), s++);
    }
    return (((_b = this.url) == null ? void 0 : _b.get) ?? this.url) || (this.total = this.records.length, this.localSort(false, true), this.localSearch()), this.refresh(), s;
  }
  find(s, e, t) {
    var i, l = [];
    let r = false;
    for (i in s = null == s ? {} : s)
      -1 != String(i).indexOf(".") && (r = true);
    var a = t ? this.last.range_start : 0;
    let n = t ? this.last.range_end + 1 : this.records.length;
    n > this.records.length && (n = this.records.length);
    for (let i2 = a; i2 < n; i2++) {
      let t2 = true;
      for (var o in s) {
        let e2 = this.records[i2][o];
        r && -1 != String(o).indexOf(".") && (e2 = this.parseField(this.records[i2], o)), "not-null" == s[o] ? null != e2 && "" !== e2 || (t2 = false) : s[o] != e2 && (t2 = false);
      }
      t2 && true !== e && l.push(this.records[i2].recid), t2 && true === e && l.push(i2);
    }
    return l;
  }
  set(e, t, i) {
    if ("object" == typeof e && null !== e && (i = t, t = e, e = null), null == e) {
      for (let e2 = 0; e2 < this.records.length; e2++)
        w2utils.extend(this.records[e2], t);
      true !== i && this.refresh();
    } else {
      var s = this.get(e, true);
      if (null == s)
        return false;
      !this.records[s] || this.records[s].recid != e ? w2utils.extend(this.summary[s], t) : w2utils.extend(this.records[s], t), true !== i && this.refreshRow(e, s);
    }
    return true;
  }
  get(i, s) {
    if (Array.isArray(i)) {
      var t = [];
      for (let e2 = 0; e2 < i.length; e2++) {
        var l = this.get(i[e2], s);
        null !== l && t.push(l);
      }
      return t;
    }
    {
      let t2 = this.last.idCache;
      t2 || (this.last.idCache = t2 = {});
      var e = t2[i];
      if ("number" == typeof e) {
        if (0 <= e && e < this.records.length && this.records[e].recid == i)
          return true === s ? e : this.records[e];
        if (0 <= (e = ~e) && e < this.summary.length && this.summary[e].recid == i)
          return true === s ? e : this.summary[e];
        this.last.idCache = t2 = {};
      }
      for (let e2 = 0; e2 < this.records.length; e2++)
        if (this.records[e2].recid == i)
          return t2[i] = e2, true === s ? e2 : this.records[e2];
      for (let e2 = 0; e2 < this.summary.length; e2++)
        if (this.summary[e2].recid == i)
          return t2[i] = ~e2, true === s ? e2 : this.summary[e2];
      return null;
    }
  }
  getFirst(e) {
    if (0 == this.records.length)
      return null;
    let t = this.records[0];
    var i = this.last.searchIds;
    return t = 0 < this.searchData.length ? Array.isArray(i) && 0 < i.length ? this.records[i[e || 0]] : null : t;
  }
  remove() {
    var _a;
    let i = 0;
    for (let t = 0; t < arguments.length; t++) {
      for (let e = this.records.length - 1; 0 <= e; e--)
        this.records[e].recid == arguments[t] && (this.records.splice(e, 1), i++);
      for (let e = this.summary.length - 1; 0 <= e; e--)
        this.summary[e].recid == arguments[t] && (this.summary.splice(e, 1), i++);
    }
    return (((_a = this.url) == null ? void 0 : _a.get) ?? this.url) || (this.localSort(false, true), this.localSearch()), this.refresh(), i;
  }
  addColumn(e, s) {
    let t = 0;
    1 == arguments.length ? (s = e, e = this.columns.length) : null == (e = "string" == typeof e ? this.getColumn(e, true) : e) && (e = this.columns.length), Array.isArray(s) || (s = [s]);
    for (let i = 0; i < s.length; i++) {
      var l = w2utils.extend({}, this.colTemplate, s[i]);
      if (this.columns.splice(e, 0, l), s[i].searchable) {
        let e2 = s[i].searchable, t2 = "";
        true === s[i].searchable && (e2 = "text", t2 = 'size="20"'), this.addSearch({ field: s[i].field, label: s[i].text, type: e2, attr: t2 });
      }
      e++, t++;
    }
    return this.refresh(), t;
  }
  removeColumn() {
    let i = 0;
    for (let t = 0; t < arguments.length; t++)
      for (let e = this.columns.length - 1; 0 <= e; e--)
        this.columns[e].field == arguments[t] && (this.columns[e].searchable && this.removeSearch(arguments[t]), this.columns.splice(e, 1), i++);
    return this.refresh(), i;
  }
  getColumn(t, i) {
    if (0 === arguments.length) {
      var s = [];
      for (let e = 0; e < this.columns.length; e++)
        s.push(this.columns[e].field);
      return s;
    }
    for (let e = 0; e < this.columns.length; e++)
      if (this.columns[e].field == t)
        return true === i ? e : this.columns[e];
    return null;
  }
  updateColumn(e, s) {
    let l = 0;
    return (e = Array.isArray(e) ? e : [e]).forEach((e2) => {
      this.columns.forEach((i) => {
        if (i.field == e2) {
          let t = w2utils.clone(s);
          Object.keys(t).forEach((e3) => {
            "function" == typeof t[e3] && (t[e3] = t[e3](i)), i[e3] != t[e3] && l++;
          }), w2utils.extend(i, t);
        }
      });
    }), 0 < l && this.refresh(), l;
  }
  toggleColumn() {
    return this.updateColumn(Array.from(arguments), { hidden(e) {
      return !e.hidden;
    } });
  }
  showColumn() {
    return this.updateColumn(Array.from(arguments), { hidden: false });
  }
  hideColumn() {
    return this.updateColumn(Array.from(arguments), { hidden: true });
  }
  addSearch(t, i) {
    let s = 0;
    1 == arguments.length ? (i = t, t = this.searches.length) : null == (t = "string" == typeof t ? this.getSearch(t, true) : t) && (t = this.searches.length), Array.isArray(i) || (i = [i]);
    for (let e = 0; e < i.length; e++)
      this.searches.splice(t, 0, i[e]), t++, s++;
    return this.searchClose(), s;
  }
  removeSearch() {
    let i = 0;
    for (let t = 0; t < arguments.length; t++)
      for (let e = this.searches.length - 1; 0 <= e; e--)
        this.searches[e].field == arguments[t] && (this.searches.splice(e, 1), i++);
    return this.searchClose(), i;
  }
  getSearch(t, i) {
    if (0 === arguments.length) {
      var s = [];
      for (let e = 0; e < this.searches.length; e++)
        s.push(this.searches[e].field);
      return s;
    }
    for (let e = 0; e < this.searches.length; e++)
      if (this.searches[e].field == t)
        return true === i ? e : this.searches[e];
    return null;
  }
  toggleSearch() {
    let i = 0;
    for (let t = 0; t < arguments.length; t++)
      for (let e = this.searches.length - 1; 0 <= e; e--)
        this.searches[e].field == arguments[t] && (this.searches[e].hidden = !this.searches[e].hidden, i++);
    return this.searchClose(), i;
  }
  showSearch() {
    let i = 0;
    for (let t = 0; t < arguments.length; t++)
      for (let e = this.searches.length - 1; 0 <= e; e--)
        this.searches[e].field == arguments[t] && false !== this.searches[e].hidden && (this.searches[e].hidden = false, i++);
    return this.searchClose(), i;
  }
  hideSearch() {
    let i = 0;
    for (let t = 0; t < arguments.length; t++)
      for (let e = this.searches.length - 1; 0 <= e; e--)
        this.searches[e].field == arguments[t] && true !== this.searches[e].hidden && (this.searches[e].hidden = true, i++);
    return this.searchClose(), i;
  }
  getSearchData(t) {
    for (let e = 0; e < this.searchData.length; e++)
      if (this.searchData[e].field == t)
        return this.searchData[e];
    return null;
  }
  localSort(t, i) {
    var _a, _b, _c;
    let n = this;
    if (((_a = this.url) == null ? void 0 : _a.get) ?? this.url)
      console.log("ERROR: grid.localSort can only be used on local data source, grid.url should be empty.");
    else if (0 !== Object.keys(this.sortData).length) {
      let a = function(e2) {
        var t2;
        return e2.w2ui && null != e2.w2ui.parent_recid ? e2.w2ui._path || ((t2 = n.get(e2.w2ui.parent_recid)) ? a(t2).concat(e2) : (console.log("ERROR: no parent record: " + e2.w2ui.parent_recid), [e2])) : [e2];
      }, o = function(s2, l2) {
        if (s2 === l2)
          return 0;
        for (let i2 = 0; i2 < n.sortData.length; i2++) {
          var r2 = n.sortData[i2].field, a2 = n.sortData[i2].field_ || r2;
          let e2 = s2[a2], t2 = l2[a2];
          -1 != String(r2).indexOf(".") && (e2 = n.parseField(s2, a2), t2 = n.parseField(l2, a2));
          a2 = n.getColumn(r2), r2 = (a2 && 0 < Object.keys(a2.editable).length && (w2utils.isPlainObject(e2) && e2.text && (e2 = e2.text), w2utils.isPlainObject(t2)) && t2.text && (t2 = t2.text), h(e2, t2, i2, n.sortData[i2].direction, a2.sortMode || "default"));
          if (0 !== r2)
            return r2;
        }
        return h(s2.recid, l2.recid, 0, "asc");
      }, h = function(e2, t2, i2, s2, l2) {
        if (e2 === t2)
          return 0;
        if ((null == e2 || "" === e2) && null != t2 && "" !== t2)
          return 1;
        if (null != e2 && "" !== e2 && (null == t2 || "" === t2))
          return -1;
        s2 = "asc" === s2.toLowerCase() ? 1 : -1;
        if (typeof e2 != typeof t2)
          return typeof t2 < typeof e2 ? s2 : -s2;
        if (e2.constructor.name != t2.constructor.name)
          return e2.constructor.name > t2.constructor.name ? s2 : -s2;
        e2 && "object" == typeof e2 && (e2 = e2.valueOf()), t2 && "object" == typeof t2 && (t2 = t2.valueOf());
        var r2 = {}.toString;
        switch (e2 && "object" == typeof e2 && e2.toString != r2 && (e2 = String(e2)), t2 && "object" == typeof t2 && t2.toString != r2 && (t2 = String(t2)), "string" == typeof e2 && (e2 = e2.toLowerCase().trim()), "string" == typeof t2 && (t2 = t2.toLowerCase().trim()), l2) {
          case "natural":
            l2 = w2utils.naturalCompare;
            break;
          case "i18n":
            l2 = w2utils.i18nCompare;
        }
        return "function" == typeof l2 ? l2(e2, t2) * s2 : t2 < e2 ? s2 : e2 < t2 ? -s2 : 0;
      };
      let e = Date.now();
      this.selectionSave(), this.prepareData(), i || this.reset();
      for (let e2 = 0; e2 < this.sortData.length; e2++) {
        var s = this.getColumn(this.sortData[e2].field);
        if (!s)
          return;
        "string" == typeof s.render && (-1 != ["date", "age"].indexOf(s.render.split(":")[0]) && (this.sortData[e2].field_ = s.field + "_"), -1 != ["time"].indexOf(s.render.split(":")[0])) && (this.sortData[e2].field_ = s.field + "_");
      }
      for (let e2 = 0; e2 < n.records.length; e2++) {
        var l = n.records[e2];
        null != ((_b = l.w2ui) == null ? void 0 : _b.parent_recid) && (l.w2ui._path = a(l));
      }
      this.records.sort((e2, t2) => {
        if (!(e2.w2ui && null != e2.w2ui.parent_recid || t2.w2ui && null != t2.w2ui.parent_recid))
          return o(e2, t2);
        var i2 = a(e2), s2 = a(t2);
        for (let e3 = 0; e3 < Math.min(i2.length, s2.length); e3++) {
          var l2 = o(i2[e3], s2[e3]);
          if (0 !== l2)
            return l2;
        }
        return i2.length > s2.length ? 1 : i2.length < s2.length ? -1 : (console.log("ERROR: two paths should not be equal."), 0);
      });
      for (let e2 = 0; e2 < n.records.length; e2++) {
        var r = n.records[e2];
        null != ((_c = r.w2ui) == null ? void 0 : _c.parent_recid) && (r.w2ui._path = null);
      }
      return this.selectionRestore(i), e = Date.now() - e, true !== t && this.show.statusSort && setTimeout(() => {
        this.status(w2utils.lang("Sorting took ${count} seconds", { count: e / 1e3 }));
      }, 10), e;
    }
  }
  localSearch(t) {
    var _a;
    let c = this;
    var i = ((_a = this.url) == null ? void 0 : _a.get) ?? this.url;
    if (i)
      console.log("ERROR: grid.localSearch can only be used on local data source, grid.url should be empty.");
    else {
      let e = Date.now(), u = {}.toString, l = {};
      if (this.total = this.records.length, this.last.searchIds = [], this.prepareData(), 0 < this.searchData.length && !i) {
        for (let s = this.total = 0; s < this.records.length; s++) {
          var r = this.records[s];
          if (function i2(l2) {
            var _a2, _b;
            let r2 = 0, a, n, o, h;
            let d = false;
            for (let e2 = 0; e2 < c.searchData.length; e2++) {
              let i3 = c.searchData[e2], s2 = c.getSearch(i3.field);
              if (null != i3) {
                null == s2 && (s2 = { field: i3.field, type: i3.type });
                let t2 = c.parseField(l2, s2.field);
                switch (a = null === t2 || void 0 === t2 || "object" == typeof t2 && t2.toString == u ? "" : String(t2).toLowerCase(), null != i3.value && (Array.isArray(i3.value) ? (n = i3.value[0], o = i3.value[1]) : n = String(i3.value).toLowerCase()), i3.operator) {
                  case "=":
                  case "is":
                    c.parseField(l2, s2.field) == i3.value ? r2++ : "date" == s2.type ? (h = c.parseField(l2, s2.field + "_") instanceof Date ? c.parseField(l2, s2.field + "_") : c.parseField(l2, s2.field), a = w2utils.formatDate(h, "yyyy-mm-dd"), n = w2utils.formatDate(w2utils.isDate(n, w2utils.settings.dateFormat, true), "yyyy-mm-dd"), a == n && r2++) : "time" == s2.type ? (h = c.parseField(l2, s2.field + "_") instanceof Date ? c.parseField(l2, s2.field + "_") : c.parseField(l2, s2.field), a = w2utils.formatTime(h, "hh24:mi"), n = w2utils.formatTime(n, "hh24:mi"), a == n && r2++) : "datetime" == s2.type && (h = c.parseField(l2, s2.field + "_") instanceof Date ? c.parseField(l2, s2.field + "_") : c.parseField(l2, s2.field), a = w2utils.formatDateTime(h, "yyyy-mm-dd|hh24:mm:ss"), n = w2utils.formatDateTime(w2utils.isDateTime(n, w2utils.settings.datetimeFormat, true), "yyyy-mm-dd|hh24:mm:ss"), a == n) && r2++;
                    break;
                  case "between":
                    -1 != ["int", "float", "money", "currency", "percent"].indexOf(s2.type) ? parseFloat(c.parseField(l2, s2.field)) >= parseFloat(n) && parseFloat(c.parseField(l2, s2.field)) <= parseFloat(o) && r2++ : "date" == s2.type ? (h = c.parseField(l2, s2.field + "_") instanceof Date ? c.parseField(l2, s2.field + "_") : c.parseField(l2, s2.field), a = w2utils.isDate(h, w2utils.settings.dateFormat, true), n = w2utils.isDate(n, w2utils.settings.dateFormat, true), null != (o = w2utils.isDate(o, w2utils.settings.dateFormat, true)) && (o = new Date(o.getTime() + 864e5)), a >= n && a < o && r2++) : "time" == s2.type ? (a = c.parseField(l2, s2.field + "_") instanceof Date ? c.parseField(l2, s2.field + "_") : c.parseField(l2, s2.field), n = w2utils.isTime(n, true), o = w2utils.isTime(o, true), n = (/* @__PURE__ */ new Date()).setHours(n.hours, n.minutes, n.seconds || 0, 0), o = (/* @__PURE__ */ new Date()).setHours(o.hours, o.minutes, o.seconds || 0, 0), a >= n && a < o && r2++) : "datetime" == s2.type && (a = c.parseField(l2, s2.field + "_") instanceof Date ? c.parseField(l2, s2.field + "_") : c.parseField(l2, s2.field), n = w2utils.isDateTime(n, w2utils.settings.datetimeFormat, true), o = (o = w2utils.isDateTime(o, w2utils.settings.datetimeFormat, true)) && new Date(o.getTime() + 864e5), a >= n) && a < o && r2++;
                    break;
                  case "<=":
                    d = true;
                  case "<":
                  case "less":
                    -1 != ["int", "float", "money", "currency", "percent"].indexOf(s2.type) ? (a = parseFloat(c.parseField(l2, s2.field)), n = parseFloat(i3.value), (a < n || d && a === n) && r2++) : "date" == s2.type ? (h = c.parseField(l2, s2.field + "_") instanceof Date ? c.parseField(l2, s2.field + "_") : c.parseField(l2, s2.field), a = w2utils.isDate(h, w2utils.settings.dateFormat, true), n = w2utils.isDate(n, w2utils.settings.dateFormat, true), (a < n || d && a === n) && r2++) : "time" == s2.type ? (h = c.parseField(l2, s2.field + "_") instanceof Date ? c.parseField(l2, s2.field + "_") : c.parseField(l2, s2.field), a = w2utils.formatTime(h, "hh24:mi"), n = w2utils.formatTime(n, "hh24:mi"), (a < n || d && a === n) && r2++) : "datetime" == s2.type && (h = c.parseField(l2, s2.field + "_") instanceof Date ? c.parseField(l2, s2.field + "_") : c.parseField(l2, s2.field), a = w2utils.formatDateTime(h, "yyyy-mm-dd|hh24:mm:ss"), n = w2utils.formatDateTime(w2utils.isDateTime(n, w2utils.settings.datetimeFormat, true), "yyyy-mm-dd|hh24:mm:ss"), a.length == n.length) && (a < n || d && a === n) && r2++;
                    break;
                  case ">=":
                    d = true;
                  case ">":
                  case "more":
                    -1 != ["int", "float", "money", "currency", "percent"].indexOf(s2.type) ? (a = parseFloat(c.parseField(l2, s2.field)), n = parseFloat(i3.value), (a > n || d && a === n) && r2++) : "date" == s2.type ? (h = c.parseField(l2, s2.field + "_") instanceof Date ? c.parseField(l2, s2.field + "_") : c.parseField(l2, s2.field), a = w2utils.isDate(h, w2utils.settings.dateFormat, true), n = w2utils.isDate(n, w2utils.settings.dateFormat, true), (a > n || d && a === n) && r2++) : "time" == s2.type ? (h = c.parseField(l2, s2.field + "_") instanceof Date ? c.parseField(l2, s2.field + "_") : c.parseField(l2, s2.field), a = w2utils.formatTime(h, "hh24:mi"), n = w2utils.formatTime(n, "hh24:mi"), (a > n || d && a === n) && r2++) : "datetime" == s2.type && (h = c.parseField(l2, s2.field + "_") instanceof Date ? c.parseField(l2, s2.field + "_") : c.parseField(l2, s2.field), a = w2utils.formatDateTime(h, "yyyy-mm-dd|hh24:mm:ss"), n = w2utils.formatDateTime(w2utils.isDateTime(n, w2utils.settings.datetimeFormat, true), "yyyy-mm-dd|hh24:mm:ss"), a.length == n.length) && (a > n || d && a === n) && r2++;
                    break;
                  case "in":
                    h = i3.value, -1 === (h = i3.svalue ? i3.svalue : h).indexOf(w2utils.isFloat(t2) ? parseFloat(t2) : t2) && -1 === h.indexOf(a) || r2++;
                    break;
                  case "not in":
                    h = i3.value, -1 === (h = i3.svalue ? i3.svalue : h).indexOf(w2utils.isFloat(t2) ? parseFloat(t2) : t2) && -1 === h.indexOf(a) && r2++;
                    break;
                  case "begins":
                  case "begins with":
                    0 === a.indexOf(n) && r2++;
                    break;
                  case "contains":
                    0 <= a.indexOf(n) && r2++;
                    break;
                  case "null":
                    null == c.parseField(l2, s2.field) && r2++;
                    break;
                  case "not null":
                    null != c.parseField(l2, s2.field) && r2++;
                    break;
                  case "ends":
                  case "ends with":
                    let e3 = a.lastIndexOf(n);
                    -1 !== e3 && e3 == a.length - n.length && r2++;
                }
              }
            }
            if ("OR" == c.last.logic && 0 !== r2 || "AND" == c.last.logic && r2 == c.searchData.length)
              return true;
            if (((_a2 = l2.w2ui) == null ? void 0 : _a2.children) && true !== ((_b = l2.w2ui) == null ? void 0 : _b.expanded))
              for (let t2 = 0; t2 < l2.w2ui.children.length; t2++) {
                let e2 = l2.w2ui.children[t2];
                if (i2(e2))
                  return true;
              }
            return false;
          }(r))
            if ((r == null ? void 0 : r.w2ui) && !function e2(t2) {
              let i2 = c.get(t2, true);
              if (null == i2 || null == t2 || l[t2] || c.last.searchIds.includes(i2))
                return;
              l[t2] = true;
              let s2 = c.records[i2];
              (s2 == null ? void 0 : s2.w2ui) && e2(s2.w2ui.parent_recid);
              c.last.searchIds.push(i2);
            }(r.w2ui.parent_recid), 0 < this.showExtraOnSearch) {
              let t2 = this.showExtraOnSearch, i2 = this.showExtraOnSearch;
              if (s < t2 && (t2 = s), s + i2 > this.records.length && (i2 = this.records.length - s), 0 < t2)
                for (let e2 = s - t2; e2 < s; e2++)
                  this.last.searchIds.indexOf(e2) < 0 && this.last.searchIds.push(e2);
              if (this.last.searchIds.indexOf(s) < 0 && this.last.searchIds.push(s), 0 < i2)
                for (let e2 = s + 1; e2 <= s + i2; e2++)
                  this.last.searchIds.indexOf(e2) < 0 && this.last.searchIds.push(e2);
            } else
              this.last.searchIds.push(s);
        }
        this.total = this.last.searchIds.length;
      }
      return e = Date.now() - e, true !== t && this.show.statusSearch && setTimeout(() => {
        this.status(w2utils.lang("Search took ${count} seconds", { count: e / 1e3 }));
      }, 10), e;
    }
  }
  getRangeData(e, i) {
    var s = this.get(e[0].recid, true), l = this.get(e[1].recid, true), r = e[0].column, a = e[1].column, n = [];
    if (r == a)
      for (let e2 = s; e2 <= l; e2++) {
        var t = this.records[e2], o = t[this.columns[r].field] || null;
        n.push(true !== i ? o : { data: o, column: r, index: e2, record: t });
      }
    else if (s == l) {
      var h = this.records[s];
      for (let e2 = r; e2 <= a; e2++) {
        var d = h[this.columns[e2].field] || null;
        n.push(true !== i ? d : { data: d, column: e2, index: s, record: h });
      }
    } else
      for (let t2 = s; t2 <= l; t2++) {
        var u = this.records[t2];
        n.push([]);
        for (let e2 = r; e2 <= a; e2++) {
          var c = u[this.columns[e2].field];
          true !== i ? n[n.length - 1].push(c) : n[n.length - 1].push({ data: c, column: e2, index: t2, record: u });
        }
      }
    return n;
  }
  addRange(s) {
    let e = 0, l, r;
    if ("row" != this.selectType) {
      Array.isArray(s) || (s = [s]);
      for (let i = 0; i < s.length; i++) {
        if ("object" != typeof s[i] && (s[i] = { name: "selection" }), "selection" == s[i].name) {
          if (false === this.show.selectionBorder)
            continue;
          var a = this.getSelection();
          if (0 === a.length) {
            this.removeRange("selection");
            continue;
          }
          l = a[0], r = a[a.length - 1];
        } else
          l = s[i].range[0], r = s[i].range[1];
        if (l) {
          a = { name: s[i].name, range: [{ recid: l.recid, column: l.column }, { recid: r.recid, column: r.column }], style: s[i].style || "" };
          let t = false;
          for (let e2 = 0; e2 < this.ranges.length; e2++)
            if (this.ranges[e2].name == s[i].name) {
              t = e2;
              break;
            }
          false !== t ? this.ranges[t] = a : this.ranges.push(a), e++;
        }
      }
      this.refreshRanges();
    }
    return e;
  }
  removeRange() {
    let t = 0;
    for (let e = 0; e < arguments.length; e++) {
      var i = arguments[e];
      query(this.box).find("#grid_" + this.name + "_" + i).remove(), query(this.box).find("#grid_" + this.name + "_f" + i).remove();
      for (let e2 = this.ranges.length - 1; 0 <= e2; e2--)
        this.ranges[e2].name == i && (this.ranges.splice(e2, 1), t++);
    }
    return t;
  }
  refreshRanges() {
    if (0 !== this.ranges.length) {
      let i = function(s2) {
        var l = r.last.move;
        if (l && "expand" == l.type) {
          l.divX = s2.screenX - l.x, l.divY = s2.screenY - l.y;
          let e2, t, i2 = s2.target;
          "TD" != i2.tagName.toUpperCase() && (i2 = query(i2).closest("td")[0]), null != (t = null != query(i2).attr("col") ? parseInt(query(i2).attr("col")) : t) && (i2 = query(i2).closest("tr")[0], e2 = r.records[query(i2).attr("index")].recid, l.newRange[1].recid != e2 || l.newRange[1].column != t) && (s2 = w2utils.clone(l.newRange), l.newRange = [{ recid: l.recid, column: l.column }, { recid: e2, column: t }], n.detail && (n.detail.newRange = w2utils.clone(l.newRange), n.detail.originalRange = w2utils.clone(l.originalRange)), true === (n = r.trigger("selectionExtend", n)).isCancelled ? (l.newRange = s2, n.detail.newRange = s2) : (r.removeRange("grid-selection-expand"), r.addRange({ name: "grid-selection-expand", range: l.newRange, style: "background-color: rgba(100,100,100,0.1); border: 2px dotted rgba(100,100,100,0.5);" })));
        }
      }, s = function(e2) {
        r.removeRange("grid-selection-expand"), delete r.last.move, query("body").off(".w2ui-" + r.name), n.finish && n.finish();
      };
      let r = this, a;
      var e = Date.now(), o = query(this.box).find(`#grid_${this.name}_frecords`), h = query(this.box).find(`#grid_${this.name}_records`);
      for (let r2 = 0; r2 < this.ranges.length; r2++) {
        var d = this.ranges[r2], u = d.range[0], c = d.range[1];
        null == u.index && (u.index = this.get(u.recid, true)), null == c.index && (c.index = this.get(c.recid, true));
        let e2 = query(this.box).find("#grid_" + this.name + "_rec_" + w2utils.escapeId(u.recid) + ' td[col="' + u.column + '"]'), t = query(this.box).find("#grid_" + this.name + "_rec_" + w2utils.escapeId(c.recid) + ' td[col="' + c.column + '"]'), i2 = query(this.box).find("#grid_" + this.name + "_frec_" + w2utils.escapeId(u.recid) + ' td[col="' + u.column + '"]'), s2 = query(this.box).find("#grid_" + this.name + "_frec_" + w2utils.escapeId(c.recid) + ' td[col="' + c.column + '"]'), l = c.column;
        u.column < this.last.colStart && c.column > this.last.colStart && (e2 = query(this.box).find("#grid_" + this.name + "_rec_" + w2utils.escapeId(u.recid) + ' td[col="start"]')), u.column < this.last.colEnd && c.column > this.last.colEnd && (t = query(this.box).find("#grid_" + this.name + "_rec_" + w2utils.escapeId(c.recid) + ' td[col="end"]'), l = '"end"');
        var p = parseInt(query(this.box).find("#grid_" + this.name + "_rec_top").next().attr("index")), f = parseInt(query(this.box).find("#grid_" + this.name + "_rec_bottom").prev().attr("index")), m = parseInt(query(this.box).find("#grid_" + this.name + "_frec_top").next().attr("index")), g = parseInt(query(this.box).find("#grid_" + this.name + "_frec_bottom").prev().attr("index"));
        0 === e2.length && u.index < p && c.index > p && (e2 = query(this.box).find("#grid_" + this.name + "_rec_top").next().find('td[col="' + u.column + '"]')), 0 === t.length && c.index > f && u.index < f && (t = query(this.box).find("#grid_" + this.name + "_rec_bottom").prev().find('td[col="' + l + '"]')), 0 === i2.length && u.index < m && c.index > m && (i2 = query(this.box).find("#grid_" + this.name + "_frec_top").next().find('td[col="' + u.column + '"]')), 0 === s2.length && c.index > g && u.index < g && (s2 = query(this.box).find("#grid_" + this.name + "_frec_bottom").prev().find('td[col="' + c.column + '"]'));
        var y, p = query(this.box).find("#grid_" + this.name + "_editable").find(".w2ui-input"), f = p.attr("recid"), m = p.attr("column");
        "selection" == d.name && d.range[0].recid == f && d.range[0].column == m || (a = query(this.box).find("#grid_" + this.name + "_f" + d.name), (0 < i2.length || 0 < s2.length) && (0 === a.length ? (o.append('<div id="grid_' + this.name + "_f" + d.name + '" class="w2ui-selection" style="' + d.style + '">' + ("selection" == d.name ? '<div id="grid_' + this.name + '_resizer" class="w2ui-selection-resizer"></div>' : "") + "</div>"), a = query(this.box).find("#grid_" + this.name + "_f" + d.name)) : (a.attr("style", d.style), a.find(".w2ui-selection-resizer").show()), 0 === s2.length && (0 === (s2 = query(this.box).find("#grid_" + this.name + "_frec_" + w2utils.escapeId(c.recid) + " td:last-child")).length && (s2 = query(this.box).find("#grid_" + this.name + "_frec_bottom td:first-child")), a.css("border-right", "0px"), a.find(".w2ui-selection-resizer").hide()), null != u.recid) && null != c.recid && 0 < i2.length && 0 < s2.length ? (g = getComputedStyle(s2[0]), p = i2.prop("offsetTop") - i2.prop("scrollTop"), f = i2.prop("offsetLeft") + i2.prop("scrollLeft"), m = s2.prop("offsetTop") - s2.prop("scrollTop"), y = s2.prop("offsetLeft") + s2.prop("scrollLeft"), a.show().css({ top: (0 < p ? p : 0) + "px", left: (0 < f ? f : 0) + "px", width: y - f + parseFloat(g.width) + 2 + "px", height: m - p + parseFloat(g.height) + 1 + "px" })) : a.hide(), a = query(this.box).find("#grid_" + this.name + "_" + d.name), (0 < e2.length || 0 < t.length) && (0 === a.length ? (h.append('<div id="grid_' + this.name + "_" + d.name + '" class="w2ui-selection" style="' + d.style + '">' + ("selection" == d.name ? '<div id="grid_' + this.name + '_resizer" class="w2ui-selection-resizer"></div>' : "") + "</div>"), a = query(this.box).find("#grid_" + this.name + "_" + d.name)) : a.attr("style", d.style), 0 === e2.length && 0 === (e2 = query(this.box).find("#grid_" + this.name + "_rec_" + w2utils.escapeId(u.recid) + " td:first-child")).length && (e2 = query(this.box).find("#grid_" + this.name + "_rec_top td:first-child")), 0 !== s2.length && a.css("border-left", "0px"), null != u.recid) && null != c.recid && 0 < e2.length && 0 < t.length ? (y = getComputedStyle(t[0]), f = e2.prop("offsetTop") - e2.prop("scrollTop"), m = e2.prop("offsetLeft") + e2.prop("scrollLeft"), p = t.prop("offsetTop") - t.prop("scrollTop"), g = t.prop("offsetLeft") + t.prop("scrollLeft"), a.show().css({ top: (0 < f ? f : 0) + "px", left: (0 < m ? m : 0) + "px", width: g - m + parseFloat(y.width) + 2 + "px", height: p - f + parseFloat(y.height) + 1 + "px" })) : a.hide());
      }
      query(this.box).find(".w2ui-selection-resizer").off(".resizer").on("mousedown.resizer", function(e2) {
        var t = r.getSelection();
        r.last.move = { type: "expand", x: e2.screenX, y: e2.screenY, divX: 0, divY: 0, recid: t[0].recid, column: t[0].column, originalRange: [w2utils.clone(t[0]), w2utils.clone(t[t.length - 1])], newRange: [w2utils.clone(t[0]), w2utils.clone(t[t.length - 1])] }, query("body").off(".w2ui-" + r.name).on("mousemove.w2ui-" + r.name, i).on("mouseup.w2ui-" + r.name, s), e2.preventDefault();
      }).on("dblclick.resizer", (e2) => {
        e2 = this.trigger("resizerDblClick", { target: this.name, originalEvent: e2 });
        true !== e2.isCancelled && e2.finish();
      });
      let n = { target: this.name, originalRange: null, newRange: null };
      return Date.now() - e;
    }
  }
  select() {
    if (0 === arguments.length)
      return 0;
    let s = 0;
    var l = this.last.selection;
    this.multiSelect || this.selectNone(true);
    let t = Array.from(arguments);
    Array.isArray(t[0]) && (t = t[0]);
    var e = { target: this.name }, e = (1 == t.length ? (e.multiple = false, w2utils.isPlainObject(t[0]) ? e.clicked = { recid: t[0].recid, column: t[0].column } : e.recid = t[0]) : (e.multiple = true, e.clicked = { recids: t }), this.trigger("select", e));
    if (true === e.isCancelled)
      return 0;
    if ("row" == this.selectType)
      for (let e2 = 0; e2 < t.length; e2++) {
        var i = "object" == typeof t[e2] ? t[e2].recid : t[e2], r = this.get(i, true);
        if (null != r) {
          let e3 = null, t2 = null;
          (0 !== this.searchData.length || r + 1 >= this.last.range_start && r + 1 <= this.last.range_end) && (e3 = query(this.box).find("#grid_" + this.name + "_frec_" + w2utils.escapeId(i)), t2 = query(this.box).find("#grid_" + this.name + "_rec_" + w2utils.escapeId(i))), "row" == this.selectType && -1 == l.indexes.indexOf(r) && (l.indexes.push(r), e3 && t2 && (e3.addClass("w2ui-selected").find(".w2ui-col-number").addClass("w2ui-row-selected"), t2.addClass("w2ui-selected").find(".w2ui-col-number").addClass("w2ui-row-selected"), e3.find(".w2ui-grid-select-check").prop("checked", true)), s++);
        }
      }
    else {
      var a = {};
      for (let e2 = 0; e2 < t.length; e2++) {
        var n = "object" == typeof t[e2] ? t[e2].recid : t[e2], o = "object" == typeof t[e2] ? t[e2].column : null;
        if (a[n] = a[n] || [], Array.isArray(o))
          a[n] = o;
        else if (w2utils.isInt(o))
          a[n].push(o);
        else
          for (let e3 = 0; e3 < this.columns.length; e3++)
            this.columns[e3].hidden || a[n].push(parseInt(e3));
      }
      var h, d = [];
      for (h in a) {
        var u = this.get(h, true);
        if (null != u) {
          let t2 = null, i2 = null;
          u + 1 >= this.last.range_start && u + 1 <= this.last.range_end && (t2 = query(this.box).find("#grid_" + this.name + "_rec_" + w2utils.escapeId(h)), i2 = query(this.box).find("#grid_" + this.name + "_frec_" + w2utils.escapeId(h)));
          var c = l.columns[u] || [];
          -1 == l.indexes.indexOf(u) && l.indexes.push(u);
          for (let e2 = 0; e2 < a[h].length; e2++)
            -1 == c.indexOf(a[h][e2]) && c.push(a[h][e2]);
          c.sort((e2, t3) => e2 - t3);
          for (let e2 = 0; e2 < a[h].length; e2++) {
            var p = a[h][e2];
            -1 == d.indexOf(p) && d.push(p), t2 && (t2.find("#grid_" + this.name + "_data_" + u + "_" + p).addClass("w2ui-selected"), t2.find(".w2ui-col-number").addClass("w2ui-row-selected"), t2.find(".w2ui-grid-select-check").prop("checked", true)), i2 && (i2.find("#grid_" + this.name + "_data_" + u + "_" + p).addClass("w2ui-selected"), i2.find(".w2ui-col-number").addClass("w2ui-row-selected"), i2.find(".w2ui-grid-select-check").prop("checked", true)), s++;
          }
          l.columns[u] = c;
        }
      }
      for (let e2 = 0; e2 < d.length; e2++)
        query(this.box).find("#grid_" + this.name + "_column_" + d[e2] + " .w2ui-col-header").addClass("w2ui-col-selected");
    }
    l.indexes.sort((e2, t2) => e2 - t2);
    var f = 0 < this.records.length && l.indexes.length == this.records.length, m = 0 < l.indexes.length && 0 !== this.searchData.length && l.indexes.length == this.last.searchIds.length;
    return f || m ? query(this.box).find("#grid_" + this.name + "_check_all").prop("checked", true) : query(this.box).find("#grid_" + this.name + "_check_all").prop("checked", false), this.status(), this.addRange("selection"), this.updateToolbar(l, f), e.finish(), s;
  }
  unselect() {
    let s = 0;
    var l = this.last.selection;
    let t = Array.from(arguments);
    Array.isArray(t[0]) && (t = t[0]);
    var e = { target: this.name }, e = (1 == t.length ? (e.multiple = false, w2utils.isPlainObject(t[0]) ? e.clicked = { recid: t[0].recid, column: t[0].column } : e.clicked = { recid: t[0] }) : (e.multiple = true, e.recids = t), this.trigger("select", e));
    if (true === e.isCancelled)
      return 0;
    for (let e2 = 0; e2 < t.length; e2++) {
      var r = "object" == typeof t[e2] ? t[e2].recid : t[e2], a = this.get(r);
      if (null != a) {
        var a = this.get(a.recid, true), n = query(this.box).find("#grid_" + this.name + "_frec_" + w2utils.escapeId(r)), o = query(this.box).find("#grid_" + this.name + "_rec_" + w2utils.escapeId(r));
        if ("row" == this.selectType)
          -1 != l.indexes.indexOf(a) && (l.indexes.splice(l.indexes.indexOf(a), 1), n.removeClass("w2ui-selected w2ui-inactive").find(".w2ui-col-number").removeClass("w2ui-row-selected"), o.removeClass("w2ui-selected w2ui-inactive").find(".w2ui-col-number").removeClass("w2ui-row-selected"), 0 != n.length && (n[0].style.cssText = "height: " + this.recordHeight + "px; " + n.attr("custom_style"), o[0].style.cssText = "height: " + this.recordHeight + "px; " + o.attr("custom_style")), n.find(".w2ui-grid-select-check").prop("checked", false), s++);
        else {
          var h = t[e2].column;
          if (!w2utils.isInt(h)) {
            var i = [];
            for (let e3 = 0; e3 < this.columns.length; e3++)
              this.columns[e3].hidden || i.push({ recid: r, column: e3 });
            return this.unselect(i);
          }
          o = l.columns[a];
          if (Array.isArray(o) && -1 != o.indexOf(h)) {
            o.splice(o.indexOf(h), 1), query(this.box).find(`#grid_${this.name}_rec_${w2utils.escapeId(r)} > td[col="${h}"]`).removeClass("w2ui-selected w2ui-inactive"), query(this.box).find(`#grid_${this.name}_frec_${w2utils.escapeId(r)} > td[col="${h}"]`).removeClass("w2ui-selected w2ui-inactive");
            let t2 = false, i2 = false;
            var d = this.getSelection();
            for (let e3 = 0; e3 < d.length; e3++)
              d[e3].column == h && (t2 = true), d[e3].recid == r && (i2 = true);
            t2 || query(this.box).find(`.w2ui-grid-columns td[col="${h}"] .w2ui-col-header, .w2ui-grid-fcolumns td[col="${h}"] .w2ui-col-header`).removeClass("w2ui-col-selected"), i2 || query(this.box).find("#grid_" + this.name + "_frec_" + w2utils.escapeId(r)).find(".w2ui-col-number").removeClass("w2ui-row-selected"), s++, 0 === o.length && (delete l.columns[a], l.indexes.splice(l.indexes.indexOf(a), 1), n.find(".w2ui-grid-select-check").prop("checked", false));
          }
        }
      }
    }
    var u = 0 < this.records.length && l.indexes.length == this.records.length, c = 0 < l.indexes.length && 0 !== this.searchData.length && l.indexes.length == this.last.searchIds.length;
    return u || c ? query(this.box).find("#grid_" + this.name + "_check_all").prop("checked", true) : query(this.box).find("#grid_" + this.name + "_check_all").prop("checked", false), this.status(), this.addRange("selection"), this.updateToolbar(l, u), e.finish(), s;
  }
  selectAll() {
    var _a;
    var e = Date.now();
    if (false !== this.multiSelect) {
      var s = ((_a = this.url) == null ? void 0 : _a.get) ?? this.url;
      let i = w2utils.clone(this.last.selection);
      var l = [];
      for (let e2 = 0; e2 < this.columns.length; e2++)
        l.push(e2);
      if (i.indexes = [], s || 0 === this.searchData.length) {
        let t = this.records.length;
        0 == this.searchData.length || s || (t = this.last.searchIds.length);
        for (let e2 = 0; e2 < t; e2++)
          i.indexes.push(e2), "row" != this.selectType && (i.columns[e2] = l.slice());
      } else
        for (let e2 = 0; e2 < this.last.searchIds.length; e2++)
          i.indexes.push(this.last.searchIds[e2]), "row" != this.selectType && (i.columns[this.last.searchIds[e2]] = l.slice());
      s = this.trigger("select", { target: this.name, multiple: true, all: true, clicked: i });
      if (true !== s.isCancelled)
        return this.last.selection = i, "row" == this.selectType ? (query(this.box).find(".w2ui-grid-records tr:not(.w2ui-empty-record)").addClass("w2ui-selected").find(".w2ui-col-number").addClass("w2ui-row-selected"), query(this.box).find(".w2ui-grid-frecords tr:not(.w2ui-empty-record)").addClass("w2ui-selected").find(".w2ui-col-number").addClass("w2ui-row-selected")) : (query(this.box).find(".w2ui-grid-columns td .w2ui-col-header, .w2ui-grid-fcolumns td .w2ui-col-header").addClass("w2ui-col-selected"), query(this.box).find(".w2ui-grid-records tr .w2ui-col-number").addClass("w2ui-row-selected"), query(this.box).find(".w2ui-grid-records tr:not(.w2ui-empty-record)").find(".w2ui-grid-data:not(.w2ui-col-select)").addClass("w2ui-selected"), query(this.box).find(".w2ui-grid-frecords tr .w2ui-col-number").addClass("w2ui-row-selected"), query(this.box).find(".w2ui-grid-frecords tr:not(.w2ui-empty-record)").find(".w2ui-grid-data:not(.w2ui-col-select)").addClass("w2ui-selected")), query(this.box).find("input.w2ui-grid-select-check").prop("checked", true), i = this.getSelection(true), this.addRange("selection"), query(this.box).find("#grid_" + this.name + "_check_all").prop("checked", true), this.status(), this.updateToolbar({ indexes: i }, true), s.finish(), Date.now() - e;
    }
  }
  selectNone(e) {
    var t, i = Date.now();
    let s;
    if (e || true !== (s = this.trigger("select", { target: this.name, clicked: [] })).isCancelled)
      return t = this.last.selection, "row" == this.selectType ? (query(this.box).find(".w2ui-grid-records tr.w2ui-selected").removeClass("w2ui-selected w2ui-inactive").find(".w2ui-col-number").removeClass("w2ui-row-selected"), query(this.box).find(".w2ui-grid-frecords tr.w2ui-selected").removeClass("w2ui-selected w2ui-inactive").find(".w2ui-col-number").removeClass("w2ui-row-selected")) : (query(this.box).find(".w2ui-grid-columns td .w2ui-col-header, .w2ui-grid-fcolumns td .w2ui-col-header").removeClass("w2ui-col-selected"), query(this.box).find(".w2ui-grid-records tr .w2ui-col-number").removeClass("w2ui-row-selected"), query(this.box).find(".w2ui-grid-frecords tr .w2ui-col-number").removeClass("w2ui-row-selected"), query(this.box).find(".w2ui-grid-data.w2ui-selected").removeClass("w2ui-selected w2ui-inactive")), query(this.box).find("input.w2ui-grid-select-check").prop("checked", false), t.indexes = [], t.columns = {}, this.removeRange("selection"), query(this.box).find("#grid_" + this.name + "_check_all").prop("checked", false), this.status(), this.updateToolbar(t, false), e || s.finish(), Date.now() - i;
  }
  updateToolbar(s) {
    let l = this, r = s && s.indexes ? s.indexes.length : 0;
    function i(t, i2) {
      if (null != t.batch) {
        let e = false;
        true === t.batch ? 0 < r && (e = true) : "number" == typeof t.batch ? r === t.batch && (e = true) : "function" == typeof t.batch && (e = t.batch({ cnt: r, sel: s })), e ? l.toolbar.enable(i2 + t.id) : l.toolbar.disable(i2 + t.id);
      }
    }
    this.toolbar.items.forEach((t) => {
      i(t, ""), Array.isArray(t.items) && t.items.forEach((e) => {
        i(e, t.id + ":");
      });
    }), this.show.toolbarSave && (0 < this.getChanges().length ? this.toolbar.enable("w2ui-save") : this.toolbar.disable("w2ui-save"));
  }
  getSelection(t) {
    var i = [], s = this.last.selection;
    if ("row" == this.selectType)
      for (let e = 0; e < s.indexes.length; e++)
        this.records[s.indexes[e]] && i.push(true === t ? s.indexes[e] : this.records[s.indexes[e]].recid);
    else
      for (let t2 = 0; t2 < s.indexes.length; t2++) {
        var l = s.columns[s.indexes[t2]];
        if (this.records[s.indexes[t2]])
          for (let e = 0; e < l.length; e++)
            i.push({ recid: this.records[s.indexes[t2]].recid, index: parseInt(s.indexes[t2]), column: l[e] });
      }
    return i;
  }
  search(t, s) {
    var _a;
    var e = ((_a = this.url) == null ? void 0 : _a.get) ?? this.url, r = [];
    let a = this.last.multi, i = this.last.logic, l = this.last.field, n = this.last.search, o = false;
    var h = query(`#w2overlay-${this.name}-search-overlay`);
    for (let e2 = 0; e2 < this.searches.length; e2++)
      this.searches[e2].hidden && null != this.searches[e2].value && (r.push({ field: this.searches[e2].field, operator: this.searches[e2].operator || "is", type: this.searches[e2].type, value: this.searches[e2].value || "" }), o = true);
    if (0 === arguments.length && 0 === h.length && (s = this.multiSearch ? (t = this.searchData, this.last.logic) : (t = this.last.field, this.last.search)), 0 === arguments.length && 0 !== h.length) {
      this.focus(), i = h.find(`#grid_${this.name}_logic`).val(), n = "";
      for (let l2 = 0; l2 < this.searches.length; l2++) {
        var d = this.searches[l2], u = h.find("#grid_" + this.name + "_operator_" + l2).val(), c = h.find("#grid_" + this.name + "_field_" + l2), p = h.find("#grid_" + this.name + "_field2_" + l2);
        let t2 = c.val(), e2 = p.val(), i2 = null, s2 = null;
        if (-1 != ["int", "float", "money", "currency", "percent"].indexOf(d.type) && (f = c[0]._w2field, p = p[0]._w2field, f && (t2 = f.clean(t2)), p) && (e2 = p.clean(e2)), -1 != ["list", "enum"].indexOf(d.type) || -1 != ["in", "not in"].indexOf(u))
          if (t2 = c[0]._w2field.selected || {}, Array.isArray(t2)) {
            i2 = [];
            for (let e3 = 0; e3 < t2.length; e3++)
              i2.push(w2utils.isFloat(t2[e3].id) ? parseFloat(t2[e3].id) : String(t2[e3].id).toLowerCase()), delete t2[e3].hidden;
            0 === Object.keys(t2).length && (t2 = "");
          } else
            s2 = t2.text || "", t2 = t2.id || "";
        if ("" !== t2 && null != t2 || null != e2 && "" !== e2) {
          var f = { field: d.field, type: d.type, operator: u };
          "between" == u ? w2utils.extend(f, { value: [t2, e2] }) : "in" == u && "string" == typeof t2 || "not in" == u && "string" == typeof t2 ? w2utils.extend(f, { value: t2.split(",") }) : w2utils.extend(f, { value: t2 }), i2 && w2utils.extend(f, { svalue: i2 }), s2 && w2utils.extend(f, { text: s2 });
          try {
            "date" == d.type && "between" == u && (f.value[0] = t2, f.value[1] = e2), "date" == d.type && "is" == u && (f.value = t2);
          } catch (e3) {
          }
          r.push(f), a = true;
        }
      }
    }
    if ("string" == typeof t && (1 == arguments.length && (s = t, t = "all"), l = t, n = s, a = false, i = o ? "AND" : "OR", null != s))
      if ("all" == t.toLowerCase())
        if (0 < this.searches.length)
          for (let e2 = 0; e2 < this.searches.length; e2++) {
            var m, g = this.searches[e2];
            if (("text" == g.type || "alphanumeric" == g.type && w2utils.isAlphaNumeric(s) || "int" == g.type && w2utils.isInt(s) || "float" == g.type && w2utils.isFloat(s) || "percent" == g.type && w2utils.isFloat(s) || ("hex" == g.type || "color" == g.type) && w2utils.isHex(s) || "currency" == g.type && w2utils.isMoney(s) || "money" == g.type && w2utils.isMoney(s) || "date" == g.type && w2utils.isDate(s) || "time" == g.type && w2utils.isTime(s) || "datetime" == g.type && w2utils.isDateTime(s) || "datetime" == g.type && w2utils.isDate(s) || "enum" == g.type && w2utils.isAlphaNumeric(s) || "list" == g.type && w2utils.isAlphaNumeric(s)) && (m = this.defaultOperator[this.operatorsMap[g.type]], m = { field: g.field, type: g.type, operator: null != g.operator ? g.operator : m, value: s }, "" != String(s).trim()) && r.push(m), -1 != ["int", "float", "money", "currency", "percent"].indexOf(g.type) && 2 == String(s).trim().split("-").length && (m = String(s).trim().split("-"), y = { field: g.field, type: g.type, operator: null != g.operator ? g.operator : "between", value: [m[0], m[1]] }, r.push(y)), -1 != ["list", "enum"].indexOf(g.type)) {
              var y, w = [];
              null == g.options && (g.options = {}), Array.isArray(g.options.items) || (g.options.items = []);
              for (let e3 = 0; e3 < g.options.items; e3++) {
                var b = g.options.items[e3];
                try {
                  var v = new RegExp(s, "i");
                  v.test(b) && w.push(e3), b.text && v.test(b.text) && w.push(b.id);
                } catch (e4) {
                }
              }
              0 < w.length && (y = { field: g.field, type: g.type, operator: null != g.operator ? g.operator : "in", value: w }, r.push(y));
            }
          }
        else
          for (let e2 = 0; e2 < this.columns.length; e2++) {
            var x = { field: this.columns[e2].field, type: "text", operator: this.defaultOperator.text, value: s };
            r.push(x);
          }
      else {
        var _ = h.find("#grid_" + this.name + "_search_all");
        let i2 = this.getSearch(t);
        if ((i2 = null == i2 ? { field: t, type: "text" } : i2).field == t && (this.last.label = i2.label), "" !== s) {
          let e2 = this.defaultOperator[this.operatorsMap[i2.type]], t2 = s;
          if (-1 != ["date", "time", "datetime"].indexOf(i2.type) && (e2 = "is"), -1 != ["list", "enum"].indexOf(i2.type) && (e2 = "is", _ = _._w2field.get(), t2 = _ && 0 < Object.keys(_).length ? _.id : ""), "int" == i2.type && "" !== s) {
            if (e2 = "is", -1 != String(s).indexOf("-") && 2 == (_ = s.split("-")).length && (e2 = "between", t2 = [parseInt(_[0]), parseInt(_[1])]), -1 != String(s).indexOf(",")) {
              var q = s.split(",");
              e2 = "in", t2 = [];
              for (let e3 = 0; e3 < q.length; e3++)
                t2.push(q[e3]);
            }
          }
          null != i2.operator && (e2 = i2.operator);
          _ = { field: i2.field, type: i2.type, operator: e2, value: t2 };
          r.push(_);
        }
      }
    if (Array.isArray(t)) {
      let e2 = "AND";
      "string" == typeof s && "OR" != (e2 = s.toUpperCase()) && "AND" != e2 && (e2 = "AND"), n = "", a = true, i = e2;
      for (let e3 = 0; e3 < t.length; e3++) {
        var C = t[e3];
        "number" == typeof C.value && null == C.operator && (C.operator = this.defaultOperator.number), "string" == typeof C.value && null == C.operator && (C.operator = this.defaultOperator.text), Array.isArray(C.value) && null == C.operator && (C.operator = this.defaultOperator.enum), w2utils.isDate(C.value) && null == C.operator && (C.operator = this.defaultOperator.date), r.push(C);
      }
    }
    _ = this.trigger("search", { target: this.name, multi: 0 === arguments.length, searchField: t || "multi", searchValue: t ? s : "multi", searchData: r, searchLogic: i });
    true !== _.isCancelled && (this.searchData = _.detail.searchData, this.last.field = l, this.last.search = n, this.last.multi = a, this.last.logic = _.detail.searchLogic, this.last.scrollTop = 0, this.last.scrollLeft = 0, this.last.selection.indexes = [], this.last.selection.columns = {}, this.searchClose(), e ? (this.last.fetch.offset = 0, this.reload()) : (this.localSearch(), this.refresh()), _.finish());
  }
  searchOpen() {
    if (this.box && 0 !== this.searches.length) {
      let s = this.trigger("searchOpen", { target: this.name });
      if (true !== s.isCancelled) {
        let t = query(this.toolbar.box).find(".w2ui-grid-search-input .w2ui-search-drop");
        t.addClass("checked"), w2tooltip.show({ name: this.name + "-search-overlay", anchor: query(this.box).find("#grid_" + this.name + "_search_all").get(0), position: "bottom|top", html: this.getSearchesHTML(), align: "left", arrowSize: 12, class: "w2ui-grid-search-advanced", hideOn: ["doc-click"] }).then((e) => {
          this.initSearches(), this.last.search_opened = true;
          let t2 = query(`#w2overlay-${this.name}-search-overlay`);
          t2.data("gridName", this.name).off(".grid-search").on("click.grid-search", () => {
            t2.find("input, select").each((e2) => {
              e2 = query(e2).data("tooltipName");
              e2 && e2.forEach((e3) => {
                w2tooltip.hide(e3);
              });
            });
          }), w2utils.bindEvents(t2.find("select, input, button"), this);
          var i = query(`#w2overlay-${this.name}-search-overlay *[rel=search]`);
          0 < i.length && i[0].focus(), s.finish();
        }).hide((e) => {
          t.removeClass("checked"), this.last.search_opened = false;
        });
      }
    }
  }
  searchClose() {
    w2tooltip.hide(this.name + "-search-overlay");
  }
  searchFieldTooltip(e, t, i) {
    var e = this.searches[e], s = this.searchData[t];
    let l = s.operator, r = ("less" == (l = "more" == l && "date" == s.type ? "since" : l) && "date" == s.type && (l = "before"), ""), a = s.value;
    Array.isArray(s.value) ? (s.value.forEach((e2) => {
      r += `<span class="value">${e2.text || e2}</span>`;
    }), "date" == s.type && (r = "", s.value.forEach((e2) => {
      r += `<span class="value">${w2utils.formatDate(e2)}</span>`;
    }))) : "date" == s.type && (a = w2utils.formatDateTime(a)), w2tooltip.hide(this.name + "-search-props"), w2tooltip.show({ name: this.name + "-search-props", anchor: i, class: "w2ui-white", hideOn: "doc-click", html: `
                <div class="w2ui-grid-search-single">
                    <span class="field">${e.label}</span>
                    <span class="operator">${w2utils.lang(l)}</span>
                    ${Array.isArray(s.value) ? "" + r : `<span class="value">${a}</span>`}
                    <div class="buttons">
                        <button id="remove" class="w2ui-btn">${w2utils.lang("Remove This Field")}</button>
                    </div>
                </div>` }).then((e2) => {
      query(e2.detail.overlay.box).find("#remove").on("click", () => {
        this.searchData.splice("" + t, 1), this.reload(), this.localSearch(), w2tooltip.hide(this.name + "-search-props");
      });
    });
  }
  searchSuggest(e, t, i) {
    var _a, _b;
    clearTimeout(this.last.kbd_timer), clearTimeout(this.last.overlay_timer), this.searchShowFields(true), this.searchClose(), true === t ? w2tooltip.hide(this.name + "-search-suggest") : 0 < query(`#w2overlay-${this.name}-search-suggest`).length || (e ? (t = query(this.box).find(`#grid_${this.name}_search_all`).get(0), e = [...this.defaultSearches ?? [], ...0 < ((_a = this.defaultSearches) == null ? void 0 : _a.length) && 0 < ((_b = this.savedSearches) == null ? void 0 : _b.length) ? ["--"] : [], ...this.savedSearches ?? []], Array.isArray(e) && 0 < e.length && w2menu.show({ name: this.name + "-search-suggest", anchor: t, align: "both", items: e, hideOn: ["doc-click", "sleect", "remove"], render(e2) {
      let t2 = e2.text;
      return t2 = e2.isDefault ? `<b>${t2}</b>` : t2;
    } }).select((e2) => {
      var t2 = this.trigger("searchSelect", { target: this.name, index: e2.detail.index, item: e2.detail.item });
      true === t2.isCancelled ? e2.preventDefault() : (e2.detail.overlay.hide(), this.last.logic = e2.detail.item.logic || "AND", this.last.search = "", this.last.label = "[Multiple Fields]", this.searchData = w2utils.clone(e2.detail.item.data), this.searchSelected = w2utils.clone(e2.detail.item, { exclude: ["icon", "remove"] }), this.reload(), t2.finish());
    }).remove((e2) => {
      let i2 = e2.detail.item, s = this.trigger("searchRemove", { target: this.name, index: e2.detail.index, item: i2 });
      true === s.isCancelled ? e2.preventDefault() : (e2.detail.overlay.hide(), this.confirm(w2utils.lang('Do you want to delete search "${item}"?', { item: i2.text })).yes((e3) => {
        var t2 = this.savedSearches.findIndex((e4) => e4.id == i2.id);
        -1 !== t2 && this.savedSearches.splice(t2, 1), this.cacheSave("searches", this.savedSearches.map((e4) => w2utils.clone(e4, { exclude: ["remove", "icon"] }))), e3.detail.self.close(), s.finish();
      }).no((e3) => {
        e3.detail.self.close();
      }));
    })) : this.last.overlay_timer = setTimeout(() => {
      this.searchSuggest(true);
    }, 100));
  }
  searchSave() {
    let e = "", t = (this.searchSelected && (e = this.searchSelected.text), this.savedSearches.findIndex((e2) => {
      var _a;
      return e2.id == ((_a = this.searchSelected) == null ? void 0 : _a.id);
    })), s = this.trigger("searchSave", { target: this.name, saveLocalStorage: true });
    true !== s.isCancelled && this.message({ width: 350, height: 150, body: `<div class="w2ui-grid-save-search">
                        <span>${w2utils.lang(-1 != t ? "Update Search" : "Save New Search")}</span>
                        <input class="search-name w2ui-input" placeholder="${w2utils.lang("Search name")}">
                   </div>`, buttons: `
                <button id="grid-search-cancel" class="w2ui-btn">${w2utils.lang("Cancel")}</button>
                <button id="grid-search-save" class="w2ui-btn w2ui-btn-blue" ${"" == String(e).trim() ? "disabled" : ""}>${w2utils.lang("Save")}</button>
            ` }).open(async (i) => {
      query(i.detail.box).find("input, button").eq(0).val(e), await i.complete, query(i.detail.box).find("#grid-search-cancel").on("click", () => {
        this.message();
      }), query(i.detail.box).find("#grid-search-save").on("click", () => {
        var e2 = query(i.detail.box).find(".w2ui-message .search-name").val();
        this.searchSelected && -1 != t ? Object.assign(this.savedSearches[t], { id: e2, text: e2, logic: this.last.logic, data: w2utils.clone(this.searchData) }) : this.savedSearches.push({ id: e2, text: e2, icon: "w2ui-icon-search", remove: true, logic: this.last.logic, data: this.searchData }), this.cacheSave("searches", this.savedSearches.map((e3) => w2utils.clone(e3, { exclude: ["remove", "icon"] }))), this.message(), (this.searchSelected ? (this.searchSelected.text = e2, query(this.box).find(`#grid_${this.name}_search_name .name-text`)) : (this.searchSelected = { text: e2, logic: this.last.logic, data: w2utils.clone(this.searchData) }, query(i.detail.box).find(`#grid_${this.name}_search_all`).val(" ").prop("readOnly", true), query(i.detail.box).find(`#grid_${this.name}_search_name`).show().find(".name-text"))).html(e2), s.finish({ name: e2 });
      }), query(i.detail.box).find("input, button").off(".message").on("keydown.message", (e2) => {
        var t2 = String(query(i.detail.box).find(".w2ui-message-body input").val()).trim();
        13 == e2.keyCode && "" != t2 && query(i.detail.box).find("#grid-search-save").trigger("click"), 27 == e2.keyCode && this.message();
      }).eq(0).on("input.message", (e2) => {
        var t2 = query(i.detail.box).closest(".w2ui-message").find("#grid-search-save");
        "" === String(query(i.detail.box).val()).trim() ? t2.prop("disabled", true) : t2.prop("disabled", false);
      }).get(0).focus();
    });
  }
  cache(e) {
    var _a;
    if (w2utils.hasLocalStorage && this.useLocalStorage)
      try {
        var t = JSON.parse(localStorage.w2ui || "{}");
        return t[_a = this.stateId || this.name] ?? (t[_a] = {}), t[this.stateId || this.name][e];
      } catch (e2) {
      }
    return null;
  }
  cacheSave(e, t) {
    var _a;
    if (w2utils.hasLocalStorage && this.useLocalStorage)
      try {
        var i = JSON.parse(localStorage.w2ui || "{}");
        return i[_a = this.stateId || this.name] ?? (i[_a] = {}), i[this.stateId || this.name][e] = t, localStorage.w2ui = JSON.stringify(i), true;
      } catch (e2) {
        delete localStorage.w2ui;
      }
    return false;
  }
  searchReset(e) {
    var t = [];
    let i = false;
    for (let e2 = 0; e2 < this.searches.length; e2++)
      this.searches[e2].hidden && null != this.searches[e2].value && (t.push({ field: this.searches[e2].field, operator: this.searches[e2].operator || "is", type: this.searches[e2].type, value: this.searches[e2].value || "" }), i = true);
    var s = this.trigger("search", { reset: true, target: this.name, searchData: t });
    if (true !== s.isCancelled) {
      var l = query(this.box).find("#grid_" + this.name + "_search_all");
      if (this.searchData = s.detail.searchData, this.searchSelected = null, this.last.search = "", this.last.logic = i ? "AND" : "OR", l.next().hide(), 0 < this.searches.length)
        if (this.multiSearch && this.show.searchAll)
          this.last.field = "all", this.last.label = "All Fields", l.next().show();
        else {
          let e2 = 0;
          for (; e2 < this.searches.length && (this.searches[e2].hidden || false === this.searches[e2].simple); )
            e2++;
          e2 >= this.searches.length ? (this.last.field = "", this.last.label = "") : (this.last.field = this.searches[e2].field, this.last.label = this.searches[e2].label);
        }
      this.last.multi = false, this.last.fetch.offset = 0, this.last.scrollTop = 0, this.last.scrollLeft = 0, this.last.selection.indexes = [], this.last.selection.columns = {}, this.searchClose();
      l = l.val("").get(0);
      (l == null ? void 0 : l._w2field) && l._w2field.reset(), e || this.reload(), s.finish();
    }
  }
  searchShowFields(e) {
    if (true === e)
      w2tooltip.hide(this.name + "-search-fields");
    else {
      var l = [];
      for (let s = -1; s < this.searches.length; s++) {
        let e2 = this.searches[s];
        var r = e2 ? e2.field : null, r = this.getColumn(r);
        let t = false, i = null;
        if (1 == this.show.searchHiddenMsg && -1 != s && (null == r || true === r.hidden && false !== r.hideable) && (t = true, i = w2utils.lang("This column " + (null == r ? "does not exist" : "is hidden"))), -1 == s) {
          if (!this.multiSearch || !this.show.searchAll)
            continue;
          e2 = { field: "all", label: "All Fields" };
        } else {
          if (null != r && false === r.hideable)
            continue;
          if (true === e2.hidden && (i = w2utils.lang("This column is hidden"), false === e2.simple))
            continue;
        }
        null == e2.label && null != e2.caption && (console.log("NOTICE: grid search.caption property is deprecated, please use search.label. Search ->", e2), e2.label = e2.caption), l.push({ id: e2.field, text: w2utils.lang(e2.label), search: e2, tooltip: i, disabled: t, checked: e2.field == this.last.field });
      }
      w2menu.show({ type: "radio", name: this.name + "-search-fields", anchor: query(this.box).find("#grid_" + this.name + "_search_name").parent().find(".w2ui-search-down").get(0), items: l, align: "none", hideOn: ["doc-click", "select"] }).select((e2) => {
        this.searchInitInput(e2.detail.item.search.field);
      });
    }
  }
  searchInitInput(e, t) {
    let i;
    var s = query(this.box).find("#grid_" + this.name + "_search_all");
    if ("all" == e)
      i = { field: "all", label: w2utils.lang("All Fields") };
    else if (null == (i = this.getSearch(e)))
      return;
    "" != this.last.search ? (this.last.label = i.label, this.search(i.field, this.last.search)) : (this.last.field = i.field, this.last.label = i.label), s.attr("placeholder", w2utils.lang("Search") + " " + w2utils.lang(i.label || i.caption || i.field, true));
  }
  clear(e) {
    this.total = 0, this.records = [], this.summary = [], this.last.fetch.offset = 0, this.last.idCache = {}, this.last.selection = { indexes: [], columns: {} }, this.reset(true), e || this.refresh();
  }
  reset(e) {
    this.last.scrollTop = 0, this.last.scrollLeft = 0, this.last.range_start = null, this.last.range_end = null, query(this.box).find(`#grid_${this.name}_records`).prop("scrollTop", 0), e || this.refresh();
  }
  skip(e, t) {
    var _a;
    ((_a = this.url) == null ? void 0 : _a.get) ?? this.url ? (this.offset = parseInt(e), this.offset > this.total && (this.offset = this.total - this.limit), (this.offset < 0 || !w2utils.isInt(this.offset)) && (this.offset = 0), this.clear(true), this.reload(t)) : console.log("ERROR: grid.skip() can only be called when you have remote data source.");
  }
  load(e, t) {
    return null == e ? (console.log('ERROR: You need to provide url argument when calling .load() method of "' + this.name + '" object.'), new Promise((e2, t2) => {
      t2();
    })) : (this.clear(true), this.request("load", {}, e, t));
  }
  reload(e) {
    var _a;
    let t = this;
    var i = ((_a = this.url) == null ? void 0 : _a.get) ?? this.url;
    return t.selectionSave(), i ? this.load(i, () => {
      t.selectionRestore(), "function" == typeof e && e();
    }) : (this.reset(true), this.localSearch(), this.selectionRestore(), "function" == typeof e && e({ status: "success" }), new Promise((e2) => {
      e2();
    }));
  }
  request(i, e, t, s) {
    let l = this, r, a;
    var n = new Promise((e2, t2) => {
      r = e2, a = t2;
    });
    if (null == e && (e = {}), !(t = t || this.url))
      return new Promise((e2, t2) => {
        t2();
      });
    w2utils.isInt(this.offset) || (this.offset = 0), w2utils.isInt(this.last.fetch.offset) || (this.last.fetch.offset = 0);
    let o;
    var h = { limit: this.limit, offset: parseInt(this.offset) + parseInt(this.last.fetch.offset), searchLogic: this.last.logic, search: this.searchData.map((e2) => {
      e2 = w2utils.clone(e2);
      return this.searchMap && this.searchMap[e2.field] && (e2.field = this.searchMap[e2.field]), e2;
    }), sort: this.sortData.map((e2) => {
      e2 = w2utils.clone(e2);
      return this.sortMap && this.sortMap[e2.field] && (e2.field = this.sortMap[e2.field]), e2;
    }) };
    if (0 === this.searchData.length && (delete h.search, delete h.searchLogic), 0 === this.sortData.length && delete h.sort, w2utils.extend(h, this.postData), w2utils.extend(h, e), "delete" != i && "save" != i || (delete h.limit, delete h.offset, "delete" == (h.action = i) && (h[this.recid || "recid"] = this.getSelection())), "load" == i) {
      if (true === (o = this.trigger("request", { target: this.name, url: t, postData: h, httpMethod: "GET", httpHeaders: this.httpHeaders })).isCancelled)
        return new Promise((e2, t2) => {
          t2();
        });
    } else
      o = { detail: { url: t, postData: h, httpMethod: "save" == i ? "PUT" : "DELETE", httpHeaders: this.httpHeaders } };
    if (0 === this.last.fetch.offset && this.lock(w2utils.lang(this.msgRefresh), true), this.last.fetch.controller)
      try {
        this.last.fetch.controller.abort();
      } catch (e2) {
      }
    switch (t = o.detail.url, i) {
      case "save":
        (t == null ? void 0 : t.save) && (t = t.save);
        break;
      case "delete":
        (t == null ? void 0 : t.remove) && (t = t.remove);
        break;
      default:
        t = (t == null ? void 0 : t.get) ?? t;
    }
    if (0 < Object.keys(this.routeData).length) {
      var d = w2utils.parseRoute(t);
      if (0 < d.keys.length)
        for (let e2 = 0; e2 < d.keys.length; e2++)
          null != this.routeData[d.keys[e2].name] && (t = t.replace(new RegExp(":" + d.keys[e2].name, "g"), this.routeData[d.keys[e2].name]));
    }
    t = new URL(t, location);
    e = w2utils.prepareParams(t, { method: o.detail.httpMethod, headers: o.detail.httpHeaders, body: o.detail.postData }, this.dataType);
    return Object.assign(this.last.fetch, { action: i, options: e, controller: new AbortController(), start: Date.now(), loaded: false }), e.signal = this.last.fetch.controller.signal, fetch(t, e).catch(u).then((e2) => {
      null != e2 && (200 != (e2 == null ? void 0 : e2.status) ? u(e2 ?? {}) : (l.unlock(), e2.json().catch(u).then((e3) => {
        this.requestComplete(e3, i, s, r, a);
      })));
    }), "load" == i && o.finish(), n;
    function u(e2) {
      var t2;
      "AbortError" !== (e2 == null ? void 0 : e2.name) && (l.unlock(), true !== (t2 = l.trigger("error", { response: e2, lastFetch: l.last.fetch })).isCancelled) && (e2.status && 200 != e2.status ? l.error(e2.status + ": " + e2.statusText) : (console.log("ERROR: Server communication failed.", "\n   EXPECTED:", { total: 5, records: [{ recid: 1, field: "value" }] }, "\n         OR:", { error: true, message: "error message" }), l.requestComplete({ error: true, message: w2utils.lang(this.msgHTTPError), response: e2 }, i, s, r, a)), t2.finish());
    }
  }
  requestComplete(e, t, i, s, l) {
    var _a;
    let r = e.error ?? false, a = (null == e.error && "error" === e.status && (r = true), this.last.fetch.response = (Date.now() - this.last.fetch.start) / 1e3, setTimeout(() => {
      this.show.statusResponse && this.status(w2utils.lang("Server Response ${count} seconds", { count: this.last.fetch.response }));
    }, 10), this.last.pull_more = false, this.last.pull_refresh = true, "load");
    "save" == this.last.fetch.action && (a = "save"), "delete" == this.last.fetch.action && (a = "delete");
    var n = this.trigger(a, { target: this.name, error: r, data: e, lastFetch: this.last.fetch });
    if (true === n.isCancelled)
      l();
    else {
      if (r)
        this.error(w2utils.lang(e.message ?? this.msgServerError)), l(e);
      else if ("function" == typeof this.parser ? "object" != typeof (e = this.parser(e)) && console.log("ERROR: Your parser did not return proper object") : null == e ? e = { error: true, message: w2utils.lang(this.msgNotJSON) } : Array.isArray(e) && (e = { error: r, records: e, total: e.length }), "load" == t) {
        if (null == e.total && (e.total = -1), null == e.records && (e.records = []), e.records.length == this.limit ? (l = this.records.length + e.records.length, this.last.fetch.hasMore = l != this.total) : (this.last.fetch.hasMore = false, this.total = this.offset + this.last.fetch.offset + e.records.length), this.last.fetch.hasMore || query(this.box).find("#grid_" + this.name + "_rec_more, #grid_" + this.name + "_frec_more").hide(), 0 === this.last.fetch.offset)
          this.records = [], this.summary = [];
        else if (-1 != e.total && parseInt(e.total) != parseInt(this.total)) {
          let e2 = this;
          return this.message(w2utils.lang(this.msgNeedReload)).ok(() => {
            delete e2.last.fetch.offset, e2.reload();
          }), new Promise((e3) => {
            e3();
          });
        }
        w2utils.isInt(e.total) && (this.total = parseInt(e.total)), e.records && e.records.forEach((e2) => {
          var _a2;
          this.recid && (e2.recid = this.parseField(e2, this.recid)), null == e2.recid && (e2.recid = "recid-" + this.records.length), (true === ((_a2 = e2.w2ui) == null ? void 0 : _a2.summary) ? this.summary : this.records).push(e2);
        }), e.summary && (this.summary = [], e.summary.forEach((e2) => {
          this.recid && (e2.recid = this.parseField(e2, this.recid)), null == e2.recid && (e2.recid = "recid-" + this.summary.length), this.summary.push(e2);
        }));
      } else if ("delete" == t)
        return this.reset(), this.reload();
      (((_a = this.url) == null ? void 0 : _a.get) ?? this.url) || (this.localSort(), this.localSearch()), this.total = parseInt(this.total), 0 === this.last.fetch.offset ? this.refresh() : (this.scroll(), this.resize()), "function" == typeof i && i(e), s(e), n.finish(), this.last.fetch.loaded = true;
    }
  }
  error(e) {
    var t = this.trigger("error", { target: this.name, message: e });
    true !== t.isCancelled && (this.message(e), t.finish());
  }
  getChanges(t) {
    var i = [];
    void 0 === t && (t = this.records);
    for (let e = 0; e < t.length; e++) {
      var s, l = t[e];
      (l == null ? void 0 : l.w2ui) && (null != l.w2ui.changes && ((s = {})[this.recid || "recid"] = l.recid, i.push(w2utils.extend(s, l.w2ui.changes))), true !== l.w2ui.expanded) && l.w2ui.children && l.w2ui.children.length && i.push(...this.getChanges(l.w2ui.children));
    }
    return i;
  }
  mergeChanges() {
    var t = this.getChanges();
    for (let e = 0; e < t.length; e++) {
      var i, s = this.get(t[e][this.recid || "recid"]);
      for (i in t[e])
        if (!("recid" == i || this.recid && i == this.recid)) {
          "object" == typeof t[e][i] && (t[e][i] = t[e][i].text);
          try {
            !function e2(t2, i2, s2) {
              let l = i2.split(".");
              1 == l.length ? t2[i2] = s2 : (t2 = t2[l[0]], l.shift(), e2(t2, l.join("."), s2));
            }(s, i, t[e][i]);
          } catch (e2) {
            console.log("ERROR: Cannot merge. ", e2.message || "", e2);
          }
          s.w2ui && delete s.w2ui.changes;
        }
    }
    this.refresh();
  }
  save(t) {
    var _a;
    var e = this.getChanges(), i = ((_a = this.url) == null ? void 0 : _a.save) ?? this.url;
    let s = this.trigger("save", { target: this.name, changes: e });
    true !== s.isCancelled && (i ? this.request("save", { changes: s.detail.changes }, null, (e2) => {
      e2.error || this.mergeChanges(), s.finish(), "function" == typeof t && t(e2);
    }) : (this.mergeChanges(), s.finish()));
  }
  editField(d, u, c, p) {
    var _a, _b;
    let f = this;
    if (true === this.last.inEditMode)
      p && 13 == p.keyCode ? ({ index: m, column: g, value: y } = this.last._edit, this.editChange({ type: "custom", value: y }, m, g, p), this.editDone(m, g, p)) : 0 < (y = query(this.box).find("div.w2ui-edit-box .w2ui-input")).length && ("DIV" == y.get(0).tagName ? (y.text(y.text() + c), w2utils.setCursorPosition(y.get(0), y.text().length)) : (y.val(y.val() + c), w2utils.setCursorPosition(y.get(0), y.val().length)));
    else {
      let o = this.get(d, true), h = this.getCellEditable(o, u);
      if (h && !["checkbox", "check"].includes(h.type)) {
        let a = this.records[o], n = this.columns[u];
        var m = true === n.frozen ? "_f" : "_";
        if (-1 != ["enum", "file"].indexOf(h.type))
          console.log('ERROR: input types "enum" and "file" are not supported in inline editing.');
        else {
          var g = this.trigger("editField", { target: this.name, recid: d, column: u, value: c, index: o, originalEvent: p });
          if (true !== g.isCancelled) {
            let w = function(e2) {
              try {
                var t2 = getComputedStyle(e2), i2 = "DIV" == e2.tagName.toUpperCase() ? e2.innerText : e2.value, s2 = query(f.box).find("#grid_" + f.name + "_editable").get(0), l2 = `font-family: ${t2["font-family"]}; font-size: ${t2["font-size"]}; white-space: no-wrap;`, r2 = w2utils.getStrWidth(i2, l2);
                r2 + 20 > s2.clientWidth && query(s2).css("width", r2 + 20 + "px");
              } catch (e3) {
              }
            };
            c = g.detail.value, this.last.inEditMode = true, this.last.editColumn = u, this.last._edit = { value: c, index: o, column: u, recid: d }, this.selectNone(true), this.select({ recid: d, column: u });
            var y = query(this.box).find("#grid_" + this.name + m + "rec_" + w2utils.escapeId(d));
            let e = y.find('[col="' + u + '"] > div'), t = (this.last._edit.tr = y, this.last._edit.div = e, query(this.box).find("div.w2ui-edit-box").remove(), "row" != this.selectType && (query(this.box).find("#grid_" + this.name + m + "selection").attr("id", "grid_" + this.name + "_editable").removeClass("w2ui-selection").addClass("w2ui-edit-box").prepend('<div style="position: absolute; top: 0px; bottom: 0px; left: 0px; right: 0px;"></div>').find(".w2ui-selection-resizer").remove(), e = query(this.box).find("#grid_" + this.name + "_editable > div:first-child")), h.attr = h.attr ?? "", h.text = h.text ?? "", h.style = h.style ?? "", h.items = h.items ?? [], null != ((_b = (_a = a.w2ui) == null ? void 0 : _a.changes) == null ? void 0 : _b[n.field]) ? w2utils.stripTags(a.w2ui.changes[n.field]) : w2utils.stripTags(f.parseField(a, n.field))), i = "object" != typeof (t = null == t ? "" : t) ? t : "", s = (null != g.detail.prevValue && (i = g.detail.prevValue), null != c && (t = c), null != n.style ? n.style + ";" : "");
            "string" == typeof n.render && ["number", "int", "float", "money", "percent", "size"].includes(n.render.split(":")[0]) && (s += "text-align: right;"), 0 < h.items.length && !w2utils.isPlainObject(h.items[0]) && (h.items = w2utils.normMenu(h.items));
            let l, r = ["date", "time", "datetime", "color", "list", "combo"];
            p = getComputedStyle(y.find('[col="' + u + '"] > div').get(0)), m = `font-family: ${p["font-family"]}; font-size: ${p["font-size"]};`;
            "div" === h.type ? (e.addClass("w2ui-editable").html(w2utils.stripSpaces(`<div id="grid_${this.name}_edit_${d}_${u}" class="w2ui-input w2ui-focus"
                        contenteditable autocorrect="off" autocomplete="off" spellcheck="false"
                        style="${m + s + h.style}"
                        field="${n.field}" recid="${d}" column="${u}" ${h.attr}>
                    </div>` + h.text)), (l = e.find("div.w2ui-input").get(0)).innerText = "object" != typeof t ? t : "", null != c ? w2utils.setCursorPosition(l, l.innerText.length) : w2utils.setCursorPosition(l, 0, l.innerText.length)) : (e.addClass("w2ui-editable").html(w2utils.stripSpaces(`<input id="grid_${this.name}_edit_${d}_${u}" class="w2ui-input"
                        autocorrect="off" autocomplete="off" spellcheck="false" type="text"
                        style="${m + s + h.style}"
                        field="${n.field}" recid="${d}" column="${u}" ${h.attr}>` + h.text)), l = e.find("input").get(0), "number" == h.type && (t = w2utils.formatNumber(t)), "date" == h.type && (t = w2utils.formatDate(w2utils.isDate(t, h.format, true) || /* @__PURE__ */ new Date(), h.format)), l.value = "object" != typeof t ? t : "", y = (e2) => {
              var _a2, _b2, _c, _d;
              var t2 = (_a2 = this.last._edit) == null ? void 0 : _a2.escKey;
              let i2 = false;
              var s2 = query(l).data("tooltipName");
              s2 && null != ((_b2 = w2tooltip.get(s2[0])) == null ? void 0 : _b2.selected) && (i2 = true), !this.last.inEditMode || t2 || !r.includes(h.type) || ((_c = e2.detail.overlay.anchor) == null ? void 0 : _c.id) != ((_d = this.last._edit.input) == null ? void 0 : _d.id) && "list" != h.type || (this.editChange(), this.editDone(void 0, void 0, { keyCode: i2 ? 13 : 0 }));
            }, new w2field(w2utils.extend({}, h, { el: l, selected: t, onSelect: y, onHide: y })), null == c && l && l.select()), Object.assign(this.last._edit, { input: l, edit: h }), query(l).off(".w2ui-editable").on("blur.w2ui-editable", (e2) => {
              var t2, i2;
              this.last.inEditMode && (t2 = this.last._edit.edit.type, i2 = query(l).data("tooltipName"), r.includes(t2) && i2 || (this.editChange(l, o, u, e2), this.editDone()));
            }).on("mousedown.w2ui-editable", (e2) => {
              e2.stopPropagation();
            }).on("click.w2ui-editable", (e2) => {
              w.call(l, e2);
            }).on("paste.w2ui-editable", (e2) => {
              e2.preventDefault();
              e2 = e2.clipboardData.getData("text/plain");
              document.execCommand("insertHTML", false, e2);
            }).on("keyup.w2ui-editable", (e2) => {
              w.call(l, e2);
            }).on("keydown.w2ui-editable", (i2) => {
              switch (i2.keyCode) {
                case 8:
                  "list" != h.type || l._w2field || i2.preventDefault();
                  break;
                case 9:
                case 13:
                  i2.preventDefault();
                  break;
                case 27:
                  var e2 = query(l).data("tooltipName");
                  e2 && 0 < e2.length && (this.last._edit.escKey = true, w2tooltip.hide(e2[0]), i2.preventDefault()), i2.stopPropagation();
              }
              setTimeout(() => {
                var _a2, _b2;
                switch (i2.keyCode) {
                  case 9:
                    var e3 = i2.shiftKey ? f.prevCell(o, u, true) : f.nextCell(o, u, true);
                    null != e3 && (t2 = f.records[e3.index].recid, this.editChange(l, o, u, i2), this.editDone(o, u, i2), "row" != f.selectType ? (f.selectNone(true), f.select({ recid: t2, column: e3.colIndex })) : f.editField(t2, e3.colIndex, null, i2), i2.preventDefault) && i2.preventDefault();
                    break;
                  case 13: {
                    let e4 = false;
                    var t2 = query(l).data("tooltipName");
                    t2 && null != w2tooltip.get(t2[0]).selected && (e4 = true), t2 && e4 || (this.editChange(l, o, u, i2), this.editDone(o, u, i2));
                    break;
                  }
                  case 27: {
                    this.last._edit.escKey = false;
                    let e4 = f.parseField(a, n.field);
                    null != ((_b2 = (_a2 = a.w2ui) == null ? void 0 : _a2.changes) == null ? void 0 : _b2[n.field]) && (e4 = a.w2ui.changes[n.field]), null != l._prevValue && (e4 = l._prevValue), "DIV" == l.tagName ? l.innerText = null != e4 ? e4 : "" : l.value = null != e4 ? e4 : "", this.editDone(o, u, i2), setTimeout(() => {
                      f.select({ recid: d, column: u });
                    }, 1);
                    break;
                  }
                }
                w(l);
              }, 1);
            }), l && (l._prevValue = i), "list" != h.type && setTimeout(() => {
              this.last.inEditMode && l && (l.focus(), clearTimeout(this.last.kbd_timer), (l.resize = w)(l));
            }, 50), g.finish({ input: l });
          }
        }
      }
    }
  }
  editChange(e, t, i, s) {
    var _a, _b, _c, _d;
    e = e ?? this.last._edit.input, t = t ?? this.last._edit.index, i = i ?? this.last._edit.column, s = s ?? {};
    var l = (t < 0 ? this.summary : this.records)[t = t < 0 ? -t - 1 : t], r = this.columns[i];
    let a = "DIV" == (e == null ? void 0 : e.tagName) ? e.innerText : e.value;
    var n = e._w2field, o = (n && ("list" == n.type && (a = n.selected), 0 !== Object.keys(a).length && null != a || (a = ""), w2utils.isPlainObject(a) || (a = n.clean(a))), "checkbox" == e.type && (false === ((_a = l.w2ui) == null ? void 0 : _a.editable) && (e.checked = !e.checked), a = e.checked), this.parseField(l, r.field)), h = ((_b = l.w2ui) == null ? void 0 : _b.changes) && l.w2ui.changes.hasOwnProperty(r.field) ? l.w2ui.changes[r.field] : o;
    let d = { target: this.name, input: e, recid: l.recid, index: t, column: i, originalEvent: s, value: { new: a, previous: h, original: o } }, u = (null != ((_c = s.target) == null ? void 0 : _c._prevValue) && (d.value.previous = s.target._prevValue), 0);
    for (; u < 20; ) {
      if (u++, "object" != typeof (a = d.value.new) && String(o) != String(a) || "object" == typeof a && a && a.id != o && ("object" != typeof o || null == o || a.id != o.id)) {
        if (true !== (d = this.trigger("change", d)).isCancelled) {
          if (a !== d.detail.value.new)
            continue;
          ("" !== d.detail.value.new && null != d.detail.value.new || "" !== h && null != h) && (l.w2ui = l.w2ui ?? {}, l.w2ui.changes = l.w2ui.changes ?? {}, l.w2ui.changes[r.field] = d.detail.value.new), d.finish();
        }
      } else if (true !== (d = this.trigger("restore", d)).isCancelled) {
        if (a !== d.detail.value.new)
          continue;
        ((_d = l.w2ui) == null ? void 0 : _d.changes) && (delete l.w2ui.changes[r.field], 0 === Object.keys(l.w2ui.changes).length) && delete l.w2ui.changes, d.finish();
      }
      break;
    }
  }
  editDone(t, i, s) {
    var _a, _b;
    if (t = t ?? this.last._edit.index, i = i ?? this.last._edit.column, s = s ?? {}, this.advanceOnEdit && 13 == s.keyCode) {
      let e2 = s.shiftKey ? this.prevRow(t, i, 1) : this.nextRow(t, i, 1);
      null == e2 && (e2 = t), setTimeout(() => {
        "row" != this.selectType ? (this.selectNone(true), this.select({ recid: this.records[e2].recid, column: i })) : this.editField(this.records[e2].recid, i, null, s);
      }, 1);
    }
    var e = t < 0, l = query(this.last._edit.tr).find('[col="' + i + '"]'), r = this.records[t], a = this.columns[i];
    this.last.inEditMode = false, this.last._edit = null, e || (null != ((_b = (_a = r.w2ui) == null ? void 0 : _a.changes) == null ? void 0 : _b[a.field]) ? l.addClass("w2ui-changed") : l.removeClass("w2ui-changed"), l.replace(this.getCellHTML(t, i, e))), query(this.box).find("div.w2ui-edit-box").remove(), this.updateToolbar(), setTimeout(() => {
      var e2 = query(this.box).find(`#grid_${this.name}_focus`).get(0);
      document.activeElement === e2 || this.last.inEditMode || e2.focus();
    }, 10);
  }
  delete(e) {
    var _a;
    var t = this.trigger("delete", { target: this.name, force: e });
    if (e && this.message(), true !== t.isCancelled) {
      e = t.detail.force;
      var i = this.getSelection();
      if (0 !== i.length)
        if ("" == this.msgDelete || e) {
          if ("object" != typeof this.url ? this.url : this.url.remove)
            this.request("delete");
          else if ("object" != typeof i[0])
            this.selectNone(), this.remove.apply(this, i);
          else {
            for (let e2 = 0; e2 < i.length; e2++) {
              var s = this.columns[i[e2].column].field, l = this.get(i[e2].recid, true), r = this.records[l];
              null != l && "recid" != s && (this.records[l][s] = "", (_a = r.w2ui) == null ? void 0 : _a.changes) && delete r.w2ui.changes[s];
            }
            this.update();
          }
          t.finish();
        } else
          this.confirm({ text: w2utils.lang(this.msgDelete, { count: i.length, records: w2utils.lang(1 == i.length ? "record" : "records") }), width: 380, height: 170, yes_text: w2utils.lang("Delete"), yes_class: "w2ui-btn-red", no_text: w2utils.lang("Cancel") }).yes((e2) => {
            e2.detail.self.close(), this.delete(true);
          }).no((e2) => {
            e2.detail.self.close();
          });
    }
  }
  click(l, r) {
    var _a, _b, _c;
    var a = Date.now();
    let n = null;
    if (!(1 == this.last.cancelClick || r && r.altKey))
      if ("object" == typeof l && null !== l && (n = l.column, l = l.recid), null == r && (r = {}), a - parseInt(this.last.click_time) < 350 && this.last.click_recid == l && "click" == r.type)
        this.dblClick(l, r);
      else {
        this.last.bubbleEl && (this.last.bubbleEl = null), this.last.click_time = a;
        a = this.last.click_recid;
        if (this.last.click_recid = l, null == n && r.target) {
          let e = r.target;
          "TD" != e.tagName && (e = query(e).closest("td")[0]), null != query(e).attr("col") && (n = parseInt(query(e).attr("col")));
        }
        var o = this.trigger("click", { target: this.name, recid: l, column: n, originalEvent: r });
        if (true !== o.isCancelled) {
          var h = this.getSelection(), d = (query(this.box).find("#grid_" + this.name + "_check_all").prop("checked", false), this.get(l, true)), u = [];
          this.last.sel_ind = d, this.last.sel_col = n, this.last.sel_recid = l, this.last.sel_type = "click";
          let e, i, t, s;
          if (r.shiftKey && 0 < h.length && this.multiSelect) {
            if (h[0].recid) {
              e = this.get(h[0].recid, true), i = this.get(l, true), s = n > h[0].column ? (t = h[0].column, n) : (t = n, h[0].column);
              for (let e2 = t; e2 <= s; e2++)
                u.push(e2);
            } else
              e = this.get(a, true), i = this.get(l, true);
            var c = [], p = (e > i && (a = e, e = i, i = a), ((_a = this.url) == null ? void 0 : _a.get) ? this.url.get : this.url);
            for (let t2 = e; t2 <= i; t2++)
              if (!(0 < this.searchData.length) || p || this.last.searchIds.includes(t2))
                if ("row" == this.selectType)
                  c.push(this.records[t2].recid);
                else
                  for (let e2 = 0; e2 < u.length; e2++)
                    c.push({ recid: this.records[t2].recid, column: u[e2] });
            this.select(c);
          } else {
            a = this.last.selection;
            let e2 = -1 != a.indexes.indexOf(d), t2 = false;
            query(r.target).closest("td").hasClass("w2ui-col-select") && (t2 = true), (r.ctrlKey || r.shiftKey || r.metaKey || t2) && this.multiSelect || this.showSelectColumn ? true === (e2 = "row" == this.selectType || ((_b = a.columns[d]) == null ? void 0 : _b.includes(n)) ? e2 : false) ? this.unselect({ recid: l, column: n }) : this.select({ recid: l, column: n }) : ("row" == this.selectType || ((_c = a.columns[d]) == null ? void 0 : _c.includes(n)) || (e2 = false), this.selectNone(true), true === e2 && 1 == h.length ? this.unselect({ recid: l, column: n }) : this.select({ recid: l, column: n }));
          }
          this.status(), this.initResize(), o.finish();
        }
      }
  }
  columnClick(s, t) {
    if (true !== this.last.colResizing) {
      let e = this.trigger("columnClick", { target: this.name, field: s, originalEvent: t });
      if (true !== e.isCancelled) {
        if ("row" == this.selectType) {
          var l = this.getColumn(s);
          l && l.sortable && this.sort(s, null, !(!t || !t.ctrlKey && !t.metaKey)), "line-number" == e.detail.field && (this.getSelection().length >= this.records.length ? this.selectNone() : this.selectAll());
        } else if (t.altKey && (l = this.getColumn(s)) && l.sortable && this.sort(s, null, !(!t || !t.ctrlKey && !t.metaKey)), "line-number" == e.detail.field)
          this.getSelection().length >= this.records.length ? this.selectNone() : this.selectAll();
        else {
          t.shiftKey || t.metaKey || t.ctrlKey || this.selectNone(true);
          var l = this.getSelection(), s = this.getColumn(e.detail.field, true), i = [], r = [];
          if (0 != l.length && t.shiftKey) {
            let t2 = s, i2 = l[0].column;
            t2 > i2 && (t2 = l[0].column, i2 = s);
            for (let e2 = t2; e2 <= i2; e2++)
              r.push(e2);
          } else
            r.push(s);
          if (true !== (e = this.trigger("columnSelect", { target: this.name, columns: r })).isCancelled) {
            for (let e2 = 0; e2 < this.records.length; e2++)
              i.push({ recid: this.records[e2].recid, column: r });
            this.select(i);
          }
          e.finish();
        }
        e.finish();
      }
    }
  }
  columnDblClick(e, t) {
    e = this.trigger("columnDblClick", { target: this.name, field: e, originalEvent: t });
    true !== e.isCancelled && e.finish();
  }
  columnContextMenu(e, t) {
    e = this.trigger("columnContextMenu", { target: this.name, field: e, originalEvent: t });
    true !== e.isCancelled && (this.show.columnMenu && (w2menu.show({ type: "check", anchor: document.body, originalEvent: t, items: this.initColumnOnOff() }).then(() => {
      query("#w2overlay-context-menu .w2ui-grid-skip").off(".w2ui-grid").on("click.w2ui-grid", (e2) => {
        e2.stopPropagation();
      }).on("keypress", (e2) => {
        13 == e2.keyCode && (this.skip(e2.target.value), this.toolbar.click("w2ui-column-on-off"));
      });
    }).select((e2) => {
      var t2 = e2.detail.item.id;
      ["w2ui-stateSave", "w2ui-stateReset"].includes(t2) ? this[t2.substring(5)]() : "w2ui-skip" != t2 && this.columnOnOff(e2, e2.detail.item.id), clearTimeout(this.last.kbd_timer);
    }), clearTimeout(this.last.kbd_timer)), t.preventDefault(), e.finish());
  }
  focus(e) {
    e = this.trigger("focus", { target: this.name, originalEvent: e });
    if (true === e.isCancelled)
      return false;
    this.hasFocus = true, query(this.box).removeClass("w2ui-inactive").find(".w2ui-inactive").removeClass("w2ui-inactive"), setTimeout(() => {
      var e2 = query(this.box).find(`#grid_${this.name}_focus`).get(0);
      e2 && document.activeElement != e2 && e2.focus();
    }, 10), e.finish();
  }
  blur(e) {
    e = this.trigger("blur", { target: this.name, originalEvent: e });
    if (true === e.isCancelled)
      return false;
    this.hasFocus = false, query(this.box).addClass("w2ui-inactive").find(".w2ui-selected").addClass("w2ui-inactive"), query(this.box).find(".w2ui-selection").addClass("w2ui-inactive"), e.finish();
  }
  keydown(c) {
    let p = this, f = "object" != typeof this.url ? this.url : this.url.get;
    if (true === p.keyboard) {
      var m = p.trigger("keydown", { target: p.name, originalEvent: c });
      if (true !== m.isCancelled)
        if (0 < query(this.box).find(".w2ui-message").length)
          27 == c.keyCode && this.message();
        else {
          let b = function(e2) {
            if (t && x(), !(h.length <= 0)) {
              let t2 = p.prevRow(o, "row" == p.selectType ? 0 : r[0].column, e2);
              if (null != (t2 = u || null != t2 ? t2 : 0 == p.searchData.length || f ? 0 : p.last.searchIds[0])) {
                if (u && p.multiSelect) {
                  if (_())
                    return;
                  if ("row" == p.selectType)
                    p.last.sel_ind > t2 && p.last.sel_ind != l ? p.unselect(p.records[l].recid) : p.select(p.records[t2].recid);
                  else if (p.last.sel_ind > t2 && p.last.sel_ind != l) {
                    t2 = l;
                    var i2 = [];
                    for (let e3 = 0; e3 < n.length; e3++)
                      i2.push({ recid: p.records[t2].recid, column: n[e3] });
                    p.unselect(i2);
                  } else {
                    var s2 = [];
                    for (let e3 = 0; e3 < n.length; e3++)
                      s2.push({ recid: p.records[t2].recid, column: n[e3] });
                    p.select(s2);
                  }
                } else
                  p.selectNone(true), p.click({ recid: p.records[t2].recid, column: n[0] }, c);
                p.scrollIntoView(t2, null, true, 1 != e2), c.preventDefault && c.preventDefault();
              } else
                u || p.selectNone(true);
            }
          }, v = function(e2) {
            if (t && x(), !(h.length <= 0)) {
              let t2 = p.nextRow(l, "row" == p.selectType ? 0 : r[0].column, e2);
              if (null != (t2 = u || null != t2 ? t2 : 0 == p.searchData.length || f ? p.records.length - 1 : p.last.searchIds[p.last.searchIds.length - 1])) {
                if (u && p.multiSelect) {
                  if (_())
                    return;
                  if ("row" == p.selectType)
                    p.last.sel_ind < t2 && p.last.sel_ind != o ? p.unselect(p.records[o].recid) : p.select(p.records[t2].recid);
                  else if (p.last.sel_ind < t2 && p.last.sel_ind != o) {
                    t2 = o;
                    var i2 = [];
                    for (let e3 = 0; e3 < n.length; e3++)
                      i2.push({ recid: p.records[t2].recid, column: n[e3] });
                    p.unselect(i2);
                  } else {
                    var s2 = [];
                    for (let e3 = 0; e3 < n.length; e3++)
                      s2.push({ recid: p.records[t2].recid, column: n[e3] });
                    p.select(s2);
                  }
                } else
                  p.selectNone(true), p.click({ recid: p.records[t2].recid, column: n[0] }, c);
                p.scrollIntoView(t2, null, true, 1 != e2), d = true;
              } else
                u || p.selectNone(true);
            }
          }, x = function() {
            if (p.records && 0 !== p.records.length) {
              let e2 = Math.floor(i[0].scrollTop / p.recordHeight) + 1;
              (!p.records[e2] || e2 < 2) && (e2 = 0), void 0 !== p.records[e2] && p.select({ recid: p.records[e2].recid, column: 0 });
            }
          }, _ = function() {
            if ("click" == p.last.sel_type) {
              if ("row" == p.selectType)
                return p.last.sel_type = "key", 1 < r.length && (r.splice(r.indexOf(p.records[p.last.sel_ind].recid), 1), p.unselect(r), 1);
              if (p.last.sel_type = "key", 1 < r.length) {
                for (let e2 = 0; e2 < r.length; e2++)
                  if (r[e2].recid == p.last.sel_recid && r[e2].column == p.last.sel_col) {
                    r.splice(e2, 1);
                    break;
                  }
                return p.unselect(r), 1;
              }
            }
          };
          let t = false, i = query(p.box).find("#grid_" + p.name + "_records"), r = p.getSelection(), a = (0 === r.length && (t = true), r[0] || null), n = [], s = r[r.length - 1];
          if ("object" == typeof a && null != a) {
            a = r[0].recid, n = [];
            let e2 = 0;
            for (; ; ) {
              if (!r[e2] || r[e2].recid != a)
                break;
              n.push(r[e2].column), e2++;
            }
            s = r[r.length - 1].recid;
          }
          let o = p.get(a, true), l = p.get(s, true), h = query(p.box).find(`#grid_${p.name}_rec_` + (null != o ? w2utils.escapeId(p.records[o].recid) : "none"));
          var g, y = Math.floor(i[0].clientHeight / p.recordHeight);
          let d = false, e = c.keyCode, u = c.shiftKey;
          switch (e) {
            case 8:
            case 46:
              p.delete(), d = true, c.stopPropagation();
              break;
            case 27:
              p.selectNone(), d = true;
              break;
            case 65:
              (c.metaKey || c.ctrlKey) && (p.selectAll(), d = true);
              break;
            case 13:
              if ("row" == this.selectType && true === p.show.expandColumn) {
                if (h.length <= 0)
                  break;
                p.toggle(a, c), d = true;
              } else {
                for (let e2 = 0; e2 < this.columns.length; e2++)
                  if (this.getCellEditable(o, e2)) {
                    n.push(parseInt(e2));
                    break;
                  }
                0 < (n = "row" == this.selectType && this.last._edit && this.last._edit.column ? [this.last._edit.column] : n).length && (p.editField(a, this.last.editColumn || n[0], null, c), d = true);
              }
              break;
            case 37:
              !function() {
                if (t)
                  x();
                else {
                  if ("row" == p.selectType) {
                    if (h.length <= 0)
                      return;
                    var e2 = p.records[o].w2ui || {};
                    !e2 || null == e2.parent_recid || Array.isArray(e2.children) && 0 !== e2.children.length && e2.expanded ? p.collapse(a, c) : (p.unselect(a), p.collapse(e2.parent_recid, c), p.select(e2.parent_recid));
                  } else {
                    let t2 = p.prevCell(o, n[0]);
                    if (t2 = (t2 == null ? void 0 : t2.index) != o ? null : t2 == null ? void 0 : t2.colIndex, u || null != t2 || (p.selectNone(true), t2 = 0), null != t2)
                      if (u && p.multiSelect) {
                        if (_())
                          return;
                        var i2 = [], s2 = [], l2 = [];
                        if (0 === n.indexOf(p.last.sel_col) && 1 < n.length) {
                          for (let e3 = 0; e3 < r.length; e3++)
                            -1 == i2.indexOf(r[e3].recid) && i2.push(r[e3].recid), l2.push({ recid: r[e3].recid, column: n[n.length - 1] });
                          p.unselect(l2), p.scrollIntoView(o, n[n.length - 1], true);
                        } else {
                          for (let e3 = 0; e3 < r.length; e3++)
                            -1 == i2.indexOf(r[e3].recid) && i2.push(r[e3].recid), s2.push({ recid: r[e3].recid, column: t2 });
                          p.select(s2), p.scrollIntoView(o, t2, true);
                        }
                      } else
                        p.click({ recid: a, column: t2 }, c), p.scrollIntoView(o, t2, true);
                    else
                      u || p.selectNone(true);
                  }
                  d = true;
                }
              }();
              break;
            case 39:
              !function() {
                if (t)
                  x();
                else {
                  if ("row" == p.selectType) {
                    if (h.length <= 0)
                      return;
                    p.expand(a, c);
                  } else {
                    let t2 = p.nextCell(o, n[n.length - 1]);
                    if (t2 = t2.index != o ? null : t2.colIndex, u || null != t2 || (p.selectNone(true), t2 = p.columns.length - 1), null != t2)
                      if (u && 39 == e && p.multiSelect) {
                        if (_())
                          return;
                        var i2 = [], s2 = [], l2 = [];
                        if (n.indexOf(p.last.sel_col) == n.length - 1 && 1 < n.length) {
                          for (let e2 = 0; e2 < r.length; e2++)
                            -1 == i2.indexOf(r[e2].recid) && i2.push(r[e2].recid), l2.push({ recid: r[e2].recid, column: n[0] });
                          p.unselect(l2), p.scrollIntoView(o, n[0], true);
                        } else {
                          for (let e2 = 0; e2 < r.length; e2++)
                            -1 == i2.indexOf(r[e2].recid) && i2.push(r[e2].recid), s2.push({ recid: r[e2].recid, column: t2 });
                          p.select(s2), p.scrollIntoView(o, t2, true);
                        }
                      } else
                        p.click({ recid: a, column: t2 }, c), p.scrollIntoView(o, t2, true);
                    else
                      u || p.selectNone(true);
                  }
                  d = true;
                }
              }();
              break;
            case 33:
              b(y);
              break;
            case 34:
              v(y);
              break;
            case 35:
              v(-1);
              break;
            case 36:
              b(-1);
              break;
            case 38:
              b(c.metaKey || c.ctrlKey ? -1 : 1);
              break;
            case 40:
              v(c.metaKey || c.ctrlKey ? -1 : 1);
              break;
            case 17:
            case 91:
              t || w2utils.isSafari && (p.last.copy_event = p.copy(false, c), (g = query(p.box).find("#grid_" + p.name + "_focus")).val(p.last.copy_event.detail.text), g[0].select());
              break;
            case 67:
              (c.metaKey || c.ctrlKey) && (w2utils.isSafari || (p.last.copy_event = p.copy(false, c), (g = query(p.box).find("#grid_" + p.name + "_focus")).val(p.last.copy_event.detail.text), g[0].select()), p.copy(p.last.copy_event, c));
              break;
            case 88:
              t || (c.ctrlKey || c.metaKey) && (w2utils.isSafari || (p.last.copy_event = p.copy(false, c), (g = query(p.box).find("#grid_" + p.name + "_focus")).val(p.last.copy_event.detail.text), g[0].select()), p.copy(p.last.copy_event, c));
          }
          var w = [32, 187, 189, 192, 219, 220, 221, 186, 222, 188, 190, 191];
          for (let e2 = 48; e2 <= 111; e2++)
            w.push(e2);
          -1 == w.indexOf(e) || c.ctrlKey || c.metaKey || d || (0 === n.length && n.push(0), d = false, setTimeout(() => {
            var e2 = query(p.box).find("#grid_" + p.name + "_focus"), t2 = e2.val();
            e2.val(""), p.editField(a, n[0], t2, c);
          }, 1)), d && c.preventDefault && c.preventDefault(), m.finish();
        }
    }
  }
  scrollIntoView(e, s, t, i) {
    let l = this.records.length;
    if (0 !== (l = 0 == this.searchData.length || this.url ? l : this.last.searchIds.length)) {
      if (null == e) {
        var r = this.getSelection();
        if (0 === r.length)
          return;
        w2utils.isPlainObject(r[0]) ? (e = r[0].index, s = r[0].column) : e = this.get(r[0], true);
      }
      var r = query(this.box).find(`#grid_${this.name}_records`), a = r[0].clientWidth, n = r[0].clientHeight, o = r[0].scrollTop, h = r[0].scrollLeft, d = this.last.searchIds.length;
      if (0 < d && (e = this.last.searchIds.indexOf(e)), r.css({ "scroll-behavior": t ? "auto" : "smooth" }), n < this.recordHeight * (0 < d ? d : l) && 0 < r.length && (d = (t = Math.floor(o / this.recordHeight)) + Math.floor(n / this.recordHeight), e == t && r.prop("scrollTop", o - n / 1.3), e == d && r.prop("scrollTop", o + n / 1.3), (e < t || d < e) && r.prop("scrollTop", (e - 1) * this.recordHeight), true === i) && r.prop("scrollTop", e * this.recordHeight), null != s) {
        let t2 = 0, i2 = 0;
        o = w2utils.scrollBarSize();
        for (let e2 = 0; e2 <= s; e2++) {
          var u = this.columns[e2];
          u.frozen || u.hidden || (t2 = i2, i2 += parseInt(u.sizeCalculated));
        }
        a < i2 - h ? r.prop("scrollLeft", t2 - o) : t2 < h && r.prop("scrollLeft", i2 - a + 2 * o);
      }
    }
  }
  scrollToColumn(s) {
    if (null != s) {
      let t = 0, i = false;
      for (let e = 0; e < this.columns.length; e++) {
        var l = this.columns[e];
        if (l.field == s) {
          i = true;
          break;
        }
        l.frozen || l.hidden || (l = parseInt(l.sizeCalculated || l.size), t += l);
      }
      i && (this.last.scrollLeft = t + 1, this.scroll());
    }
  }
  dblClick(e, t) {
    let i = null;
    if ("object" == typeof e && null !== e && (i = e.column, e = e.recid), null == t && (t = {}), null == i && t.target) {
      let e2 = t.target;
      "TD" != e2.tagName.toUpperCase() && (e2 = query(e2).closest("td")[0]), i = parseInt(query(e2).attr("col"));
    }
    var s = this.get(e, true), l = this.records[s], r = this.trigger("dblClick", { target: this.name, recid: e, column: i, originalEvent: t });
    true !== r.isCancelled && (this.selectNone(true), this.getCellEditable(s, i) ? this.editField(e, i, null, t) : (this.select({ recid: e, column: i }), (this.show.expandColumn || l && l.w2ui && Array.isArray(l.w2ui.children)) && this.toggle(e)), r.finish());
  }
  showContextMenu(i, s, e) {
    if ("text" != this.last.userSelect) {
      null == (e = null == e ? { offsetX: 0, offsetY: 0, target: query(this.box).find(`#grid_${this.name}_rec_` + i)[0] } : e).offsetX && (e.offsetX = e.layerX - e.target.offsetLeft, e.offsetY = e.layerY - e.target.offsetTop), w2utils.isFloat(i) && (i = parseFloat(i));
      var l = this.getSelection();
      if ("row" == this.selectType)
        -1 == l.indexOf(i) && this.click(i);
      else {
        let t2 = false;
        for (let e2 = 0; e2 < l.length; e2++)
          l[e2].recid != i && l[e2].column != s || (t2 = true);
        t2 || null == i || this.click({ recid: i, column: s }), t2 || null == s || this.columnClick(this.columns[s].field, e);
      }
      var t = this.trigger("contextMenu", { target: this.name, originalEvent: e, recid: i, column: s });
      true !== t.isCancelled && (0 < this.contextMenu.length && (w2menu.show({ anchor: document.body, originalEvent: e, items: this.contextMenu }).select((e2) => {
        clearTimeout(this.last.kbd_timer), this.contextMenuClick(i, s, e2);
      }), clearTimeout(this.last.kbd_timer)), e.preventDefault(), t.finish());
    }
  }
  contextMenuClick(e, t, i) {
    e = this.trigger("contextMenuClick", { target: this.name, recid: e, column: t, originalEvent: i.detail.originalEvent, menuEvent: i, menuIndex: i.detail.index, menuItem: i.detail.item });
    true !== e.isCancelled && e.finish();
  }
  toggle(e) {
    var t = this.get(e);
    if (null != t)
      return t.w2ui = t.w2ui ?? {}, true === t.w2ui.expanded ? this.collapse(e) : this.expand(e);
  }
  expand(e, t) {
    var _a;
    var i = this.get(e, true);
    let s = this.records[i];
    s.w2ui = s.w2ui ?? {};
    var l = w2utils.escapeId(e), r = s.w2ui.children;
    let a;
    if (Array.isArray(r)) {
      if (true === s.w2ui.expanded || 0 === r.length)
        return false;
      if (true === (a = this.trigger("expand", { target: this.name, recid: e })).isCancelled)
        return false;
      s.w2ui.expanded = true, r.forEach((e2) => {
        e2.w2ui = e2.w2ui ?? {}, e2.w2ui.parent_recid = s.recid, null == e2.w2ui.children && (e2.w2ui.children = []);
      }), this.records.splice.apply(this.records, [i + 1, 0].concat(r)), -1 !== this.total && (this.total += r.length), ("object" != typeof this.url ? this.url : this.url.get) || (this.localSort(true, true), 0 < this.searchData.length && this.localSearch(true)), true !== t && this.refresh(), a.finish();
    } else {
      if (0 < query(this.box).find("#grid_" + this.name + "_rec_" + l + "_expanded_row").length || true !== this.show.expandColumn)
        return false;
      if ("none" == s.w2ui.expanded)
        return false;
      if (query(this.box).find("#grid_" + this.name + "_rec_" + l).after(`<tr id="grid_${this.name}_rec_${e}_expanded_row" class="w2ui-expanded-row">
                    <td colspan="100" class="w2ui-expanded2">
                        <div id="grid_${this.name}_rec_${e}_expanded"></div>
                    </td>
                    <td class="w2ui-grid-data-last"></td>
                </tr>`), query(this.box).find("#grid_" + this.name + "_frec_" + l).after(`<tr id="grid_${this.name}_frec_${e}_expanded_row" class="w2ui-expanded-row">
                    ${this.show.lineNumbers ? '<td class="w2ui-col-number"></td>' : ""}
                    <td class="w2ui-grid-data w2ui-expanded1" colspan="100">
                       <div id="grid_${this.name}_frec_${e}_expanded"></div>
                    </td>
                </tr>`), true === (a = this.trigger("expand", { target: this.name, recid: e, box_id: "grid_" + this.name + "_rec_" + e + "_expanded", fbox_id: "grid_" + this.name + "_frec_" + e + "_expanded" })).isCancelled)
        return query(this.box).find("#grid_" + this.name + "_rec_" + l + "_expanded_row").remove(), query(this.box).find("#grid_" + this.name + "_frec_" + l + "_expanded_row").remove(), false;
      i = query(this.box).find("#grid_" + this.name + "_rec_" + e + "_expanded"), r = query(this.box).find("#grid_" + this.name + "_frec_" + e + "_expanded"), t = ((_a = i.find(":scope div:first-child")[0]) == null ? void 0 : _a.clientHeight) ?? 50;
      i[0].clientHeight < t && i.css({ height: t + "px" }), r[0].clientHeight < t && r.css({ height: t + "px" }), query(this.box).find("#grid_" + this.name + "_rec_" + l).attr("expanded", "yes").addClass("w2ui-expanded"), query(this.box).find("#grid_" + this.name + "_frec_" + l).attr("expanded", "yes").addClass("w2ui-expanded"), query(this.box).find("#grid_" + this.name + "_cell_" + this.get(e, true) + "_expand div").html("-"), s.w2ui.expanded = true, a.finish(), this.resizeRecords();
    }
    return true;
  }
  collapse(t, i) {
    var s = this.get(t, true);
    let l = this.records[s], e = (l.w2ui = l.w2ui || {}, w2utils.escapeId(t));
    var r = l.w2ui.children;
    let a;
    if (Array.isArray(r)) {
      if (true !== l.w2ui.expanded)
        return false;
      if (true === (a = this.trigger("collapse", { target: this.name, recid: t })).isCancelled)
        return false;
      !function i2(s2) {
        s2.w2ui.expanded = false;
        for (let t2 = 0; t2 < s2.w2ui.children.length; t2++) {
          let e3 = s2.w2ui.children[t2];
          e3.w2ui.expanded && i2(e3);
        }
      }(l);
      var n = [];
      for (let e3 = l; null != e3; e3 = this.get(e3.w2ui.parent_recid))
        n.push(e3.w2ui.parent_recid);
      r = s + 1;
      let e2 = r;
      for (; ; ) {
        if (this.records.length <= e2 + 1 || null == this.records[e2 + 1].w2ui || 0 <= n.indexOf(this.records[e2 + 1].w2ui.parent_recid))
          break;
        e2++;
      }
      this.records.splice(r, e2 - r + 1), -1 !== this.total && (this.total -= e2 - r + 1), ("object" != typeof this.url ? this.url : this.url.get) || 0 < this.searchData.length && this.localSearch(true), true !== i && this.refresh(), a.finish();
    } else {
      if (0 === query(this.box).find("#grid_" + this.name + "_rec_" + e + "_expanded_row").length || true !== this.show.expandColumn)
        return false;
      if (true === (a = this.trigger("collapse", { target: this.name, recid: t, box_id: "grid_" + this.name + "_rec_" + t + "_expanded", fbox_id: "grid_" + this.name + "_frec_" + t + "_expanded" })).isCancelled)
        return false;
      query(this.box).find("#grid_" + this.name + "_rec_" + e).removeAttr("expanded").removeClass("w2ui-expanded"), query(this.box).find("#grid_" + this.name + "_frec_" + e).removeAttr("expanded").removeClass("w2ui-expanded"), query(this.box).find("#grid_" + this.name + "_cell_" + this.get(t, true) + "_expand div").html("+"), query(this.box).find("#grid_" + this.name + "_rec_" + e + "_expanded").css("height", "0px"), query(this.box).find("#grid_" + this.name + "_frec_" + e + "_expanded").css("height", "0px"), setTimeout(() => {
        query(this.box).find("#grid_" + this.name + "_rec_" + e + "_expanded_row").remove(), query(this.box).find("#grid_" + this.name + "_frec_" + e + "_expanded_row").remove(), l.w2ui.expanded = false, a.finish(), this.resizeRecords();
      }, 300);
    }
    return true;
  }
  sort(i, e, s) {
    var t = this.trigger("sort", { target: this.name, field: i, direction: e, multiField: s });
    if (true !== t.isCancelled) {
      if (null != i) {
        let t2 = this.sortData.length;
        for (let e2 = 0; e2 < this.sortData.length; e2++)
          if (this.sortData[e2].field == i) {
            t2 = e2;
            break;
          }
        null == e && (e = null != this.sortData[t2] && (null == this.sortData[t2].direction && (this.sortData[t2].direction = ""), "asc" === this.sortData[t2].direction.toLowerCase()) ? "desc" : "asc"), false === this.multiSort && (this.sortData = [], t2 = 0), 1 != s && (this.sortData = [], t2 = 0), null == this.sortData[t2] && (this.sortData[t2] = {}), this.sortData[t2].field = i, this.sortData[t2].direction = e;
      } else
        this.sortData = [];
      ("object" != typeof this.url ? this.url : this.url.get) ? (t.finish({ direction: e }), this.last.fetch.offset = 0, this.reload()) : (this.localSort(false, true), 0 < this.searchData.length && this.localSearch(true), this.last.scrollTop = 0, query(this.box).find(`#grid_${this.name}_records`).prop("scrollTop", 0), t.finish({ direction: e }), this.refresh());
    }
  }
  copy(e, t) {
    if (w2utils.isPlainObject(e))
      return e.finish(), e.text;
    var s = this.getSelection();
    if (0 === s.length)
      return "";
    let l = "";
    if ("object" == typeof s[0]) {
      let t2 = s[0].column, i2 = s[0].column;
      var r = [];
      for (let e2 = 0; e2 < s.length; e2++)
        s[e2].column < t2 && (t2 = s[e2].column), s[e2].column > i2 && (i2 = s[e2].column), -1 == r.indexOf(s[e2].index) && r.push(s[e2].index);
      r.sort((e2, t3) => e2 - t3);
      for (let e2 = 0; e2 < r.length; e2++) {
        var a = r[e2];
        for (let e3 = t2; e3 <= i2; e3++)
          true !== this.columns[e3].hidden && (l += this.getCellCopy(a, e3) + "	");
        l = l.substr(0, l.length - 1), l += "\n";
      }
    } else {
      for (let e2 = 0; e2 < this.columns.length; e2++) {
        var i = this.columns[e2];
        if (true !== i.hidden) {
          let e3 = i.text || i.field;
          i.text && i.text.length < 3 && i.tooltip && (e3 = i.tooltip), l += '"' + w2utils.stripTags(e3) + '"	';
        }
      }
      l = l.substr(0, l.length - 1), l += "\n";
      for (let e2 = 0; e2 < s.length; e2++) {
        var n = this.get(s[e2], true);
        for (let e3 = 0; e3 < this.columns.length; e3++)
          true !== this.columns[e3].hidden && (l += '"' + this.getCellCopy(n, e3) + '"	');
        l = l.substr(0, l.length - 1), l += "\n";
      }
    }
    l = l.substr(0, l.length - 1);
    let o;
    return null == e ? true === (o = this.trigger("copy", { target: this.name, text: l, cut: 88 == t.keyCode, originalEvent: t })).isCancelled ? "" : (l = o.detail.text, o.finish(), l) : false === e ? true === (o = this.trigger("copy", { target: this.name, text: l, cut: 88 == t.keyCode, originalEvent: t })).isCancelled ? "" : (l = o.detail.text, o) : void 0;
  }
  getCellCopy(e, t) {
    return w2utils.stripTags(this.getCellHTML(e, t));
  }
  paste(i, e) {
    var t = this.getSelection();
    let s = this.get(t[0].recid, true);
    var l, r, a, n = t[0].column, e = this.trigger("paste", { target: this.name, text: i, index: s, column: n, originalEvent: e });
    if (true !== e.isCancelled) {
      if (i = e.detail.text, "row" == this.selectType || 0 === t.length)
        console.log("ERROR: You can paste only if grid.selectType = 'cell' and when at least one cell selected.");
      else {
        if ("object" != typeof i) {
          var o = [];
          i = i.split("\n");
          for (let e2 = 0; e2 < i.length; e2++) {
            var h = i[e2].split("	");
            let t2 = 0;
            var d = this.records[s], u = [];
            if (null != d) {
              for (let e3 = 0; e3 < h.length; e3++)
                this.columns[n + t2] && (l = d, r = this.columns[n + t2].field, a = h[e3], l.w2ui = l.w2ui ?? {}, l.w2ui.changes = l.w2ui.changes || {}, l.w2ui.changes[r] = a, u.push(n + t2), t2++);
              for (let e3 = 0; e3 < u.length; e3++)
                o.push({ recid: d.recid, column: u[e3] });
              s++;
            }
          }
          this.selectNone(true), this.select(o);
        } else
          this.selectNone(true), this.select([{ recid: this.records[s], column: n }]);
        this.refresh();
      }
      e.finish();
    }
  }
  resize() {
    var e = Date.now();
    if (this.box && query(this.box).attr("name") == this.name) {
      var t = this.trigger("resize", { target: this.name });
      if (true !== t.isCancelled)
        return this.resizeBoxes(), this.resizeRecords(), t.finish(), Date.now() - e;
    }
  }
  update({ cells: t, fullCellRefresh: i, ignoreColumns: e } = {}) {
    var s = Date.now();
    let u = this;
    if (null == this.box)
      return 0;
    if (Array.isArray(t))
      for (let e2 = 0; e2 < t.length; e2++) {
        var l = t[e2].index, r = t[e2].column;
        if (!(l < 0))
          if (null == l || null == r)
            console.log("ERROR: Wrong argument for grid.update({ cells }), cells should be [{ index: X, column: Y }, ...]");
          else {
            var a = this.records[l] ?? {};
            a.w2ui = a.w2ui ?? {}, a.w2ui._update = a.w2ui._update ?? { cells: [] };
            let e3 = a.w2ui._update.row1, t2 = a.w2ui._update.row2;
            null != e3 && e3.isConnected && null != t2 && t2.isColSelected || (e3 = this.box.querySelector(`#grid_${this.name}_rec_` + w2utils.escapeId(a.recid)), t2 = this.box.querySelector(`#grid_${this.name}_frec_` + w2utils.escapeId(a.recid)), a.w2ui._update.row1 = e3, a.w2ui._update.row2 = t2), o(a, e3, t2, l, r);
          }
      }
    else
      for (let e2 = this.last.range_start - 1; e2 <= this.last.range_end; e2++) {
        let s2 = e2;
        s2 = 0 < this.last.searchIds.length ? this.last.searchIds[e2] : e2;
        var n = this.records[s2];
        if (!(s2 < 0 || null == n)) {
          n.w2ui = n.w2ui ?? {}, n.w2ui._update = n.w2ui._update ?? { cells: [] };
          let t2 = n.w2ui._update.row1, i2 = n.w2ui._update.row2;
          null != t2 && t2.isConnected && null != i2 && i2.isColSelected || (t2 = this.box.querySelector(`#grid_${this.name}_rec_` + w2utils.escapeId(n.recid)), i2 = this.box.querySelector(`#grid_${this.name}_frec_` + w2utils.escapeId(n.recid)), n.w2ui._update.row1 = t2, n.w2ui._update.row2 = i2);
          for (let e3 = 0; e3 < this.columns.length; e3++)
            o(n, t2, i2, s2, e3);
        }
      }
    return Date.now() - s;
    function o(s2, l2, r2, a2, t2) {
      var n2 = u.columns[t2];
      if (!Array.isArray(e) || !e.includes(t2) && !e.includes(n2.field)) {
        let e2 = s2.w2ui._update.cells[t2];
        if (null != e2 && e2.isConnected || (e2 = u.box.querySelector(`#grid_${u.name}_data_${a2}_` + t2), s2.w2ui._update.cells[t2] = e2), null != e2) {
          if (i)
            query(e2).replace(u.getCellHTML(a2, t2, false)), e2 = u.box.querySelector(`#grid_${u.name}_data_${a2}_` + t2), s2.w2ui._update.cells[t2] = e2;
          else {
            var o2 = e2.children[0], { value: a2, style: h, className: d } = u.getCellValue(a2, t2, false, true);
            if (o2.innerHTML != a2 && (o2.innerHTML = a2), "" != h && e2.style.cssText != h && (e2.style.cssText = h), "" != d) {
              let t3 = ["w2ui-grid-data"], i2 = [];
              o2 = d.split(" ").filter((e3) => !!e3);
              e2.classList.forEach((e3) => {
                t3.includes(e3) || i2.push(e3);
              }), e2.classList.remove(...i2), e2.classList.add(...o2);
            }
          }
          if (u.columns[t2].style && u.columns[t2].style != e2.style.cssText && (e2.style.cssText = u.columns[t2].style ?? ""), null != s2.w2ui.class) {
            if ("string" == typeof s2.w2ui.class) {
              let t3 = ["w2ui-odd", "w2ui-even", "w2ui-record"], i2 = [];
              a2 = s2.w2ui.class.split(" ").filter((e3) => !!e3);
              l2 && r2 && (l2.classList.forEach((e3) => {
                t3.includes(e3) || i2.push(e3);
              }), l2.classList.remove(...i2), l2.classList.add(...a2), r2.classList.remove(...i2), r2.classList.add(...a2));
            }
            if (w2utils.isPlainObject(s2.w2ui.class) && "string" == typeof s2.w2ui.class[n2.field]) {
              let t3 = ["w2ui-grid-data"], i2 = [];
              h = s2.w2ui.class[n2.field].split(" ").filter((e3) => !!e3);
              e2.classList.forEach((e3) => {
                t3.includes(e3) || i2.push(e3);
              }), e2.classList.remove(...i2), e2.classList.add(...h);
            }
          }
          null != s2.w2ui.style && (l2 && r2 && "string" == typeof s2.w2ui.style && l2.style.cssText !== s2.w2ui.style && (l2.style.cssText = "height: " + u.recordHeight + "px;" + s2.w2ui.style, l2.setAttribute("custom_style", s2.w2ui.style), r2.style.cssText = "height: " + u.recordHeight + "px;" + s2.w2ui.style, r2.setAttribute("custom_style", s2.w2ui.style)), w2utils.isPlainObject(s2.w2ui.style)) && "string" == typeof s2.w2ui.style[n2.field] && e2.style.cssText !== s2.w2ui.style[n2.field] && (e2.style.cssText = s2.w2ui.style[n2.field]);
        }
      }
    }
  }
  refreshCell(e, t) {
    var i = this.get(e, true), t = this.getColumn(t, true), e = !this.records[i] || this.records[i].recid != e, s = query(this.box).find(`${e ? ".w2ui-grid-summary " : ""}#grid_${this.name}_data_${i}_` + t);
    return 0 != s.length && (s.replace(this.getCellHTML(i, t, e)), true);
  }
  refreshRow(t, i = null) {
    let s = query(this.box).find("#grid_" + this.name + "_frec_" + w2utils.escapeId(t)), l = query(this.box).find("#grid_" + this.name + "_rec_" + w2utils.escapeId(t));
    if (0 < s.length) {
      null == i && (i = this.get(t, true));
      var r = s.attr("line"), a = !this.records[i] || this.records[i].recid != t, n = "object" != typeof this.url ? this.url : this.url.get;
      if (0 < this.searchData.length && !n)
        for (let e2 = 0; e2 < this.last.searchIds.length; e2++)
          this.last.searchIds[e2] == i && (i = e2);
      n = this.getRecordHTML(i, r, a);
      s.replace(n[0]), l.replace(n[1]);
      let e = this.records[i].w2ui ? this.records[i].w2ui.style : "";
      return "string" == typeof e && (s = query(this.box).find("#grid_" + this.name + "_frec_" + w2utils.escapeId(t)), l = query(this.box).find("#grid_" + this.name + "_rec_" + w2utils.escapeId(t)), s.attr("custom_style", e), l.attr("custom_style", e), s.hasClass("w2ui-selected") && (e = e.replace("background-color", "none")), s[0].style.cssText = "height: " + this.recordHeight + "px;" + e, l[0].style.cssText = "height: " + this.recordHeight + "px;" + e), a && this.resize(), true;
    }
    return false;
  }
  refresh() {
    var e = Date.now(), t = "object" != typeof this.url ? this.url : this.url.get;
    if (this.total <= 0 && !t && 0 === this.searchData.length && (this.total = this.records.length), this.box) {
      t = this.trigger("refresh", { target: this.name });
      if (true !== t.isCancelled) {
        this.show.header ? query(this.box).find(`#grid_${this.name}_header`).html(w2utils.lang(this.header) + "&#160;").show() : query(this.box).find(`#grid_${this.name}_header`).hide(), this.show.toolbar ? query(this.box).find("#grid_" + this.name + "_toolbar").show() : query(this.box).find("#grid_" + this.name + "_toolbar").hide(), this.searchClose();
        var i = query(this.box).find("#grid_" + this.name + "_search_all");
        !this.multiSearch && "all" == this.last.field && 0 < this.searches.length && (this.last.field = this.searches[0].field, this.last.label = this.searches[0].label);
        for (let e2 = 0; e2 < this.searches.length; e2++)
          this.searches[e2].field == this.last.field && (this.last.label = this.searches[e2].label);
        if (this.last.multi ? i.attr("placeholder", "[" + w2utils.lang("Multiple Fields") + "]") : i.attr("placeholder", w2utils.lang("Search") + " " + w2utils.lang(this.last.label, true)), i.val() != this.last.search) {
          let e2 = this.last.search;
          var s = i._w2field;
          s && (e2 = s.format(e2)), i.val(e2);
        }
        this.refreshSearch(), this.refreshBody(), this.show.footer ? query(this.box).find(`#grid_${this.name}_footer`).html(this.getFooterHTML()).show() : query(this.box).find(`#grid_${this.name}_footer`).hide();
        var s = this.last.selection, i = 0 < this.records.length && s.indexes.length == this.records.length, s = 0 < s.indexes.length && 0 !== this.searchData.length && s.indexes.length == this.last.searchIds.length, l = (i || s ? query(this.box).find("#grid_" + this.name + "_check_all").prop("checked", true) : query(this.box).find("#grid_" + this.name + "_check_all").prop("checked", false), this.status(), this.find({ "w2ui.expanded": true }, true, true));
        for (let e2 = 0; e2 < l.length; e2++) {
          var r = this.records[l[e2]].w2ui;
          r && !Array.isArray(r.children) && (r.expanded = false);
        }
        return this.markSearch && setTimeout(() => {
          var t2 = [];
          for (let e2 = 0; e2 < this.searchData.length; e2++) {
            var i2 = this.searchData[e2], s2 = this.getSearch(i2.field);
            s2 && !s2.hidden && (s2 = this.getColumn(i2.field, true), t2.push({ field: i2.field, search: i2.value, col: s2 }));
          }
          0 < t2.length && t2.forEach((e2) => {
            var t3 = query(this.box).find('td[col="' + e2.col + '"]:not(.w2ui-head)');
            w2utils.marker(t3, e2.search);
          });
        }, 50), this.updateToolbar(this.last.selection), t.finish(), this.resize(), this.addRange("selection"), setTimeout(() => {
          this.resize(), this.scroll();
        }, 1), this.reorderColumns && !this.last.columnDrag ? this.last.columnDrag = this.initColumnDrag() : !this.reorderColumns && this.last.columnDrag && this.last.columnDrag.remove(), Date.now() - e;
      }
    }
  }
  refreshSearch() {
    if (this.multiSearch && 0 < this.searchData.length) {
      0 == query(this.box).find(".w2ui-grid-searches").length && query(this.box).find(".w2ui-grid-toolbar").css("height", this.last.toolbar_height + 35 + "px").append(`<div id="grid_${this.name}_searches" class="w2ui-grid-searches"></div>`);
      let r = `
                <span id="grid_${this.name}_search_logic" class="w2ui-grid-search-logic"></span>
                <div class="grid-search-line"></div>`;
      this.searchData.forEach((i, e) => {
        var t = this.getSearch(i.field, true), s = this.searches[t];
        let l;
        if (l = Array.isArray(i.value) ? `<span class="grid-search-count">${i.value.length}</span>` : s && "list" == s.type && i.text && i.text !== i.value ? ": " + i.text : ": " + i.value, s && "date" == s.type)
          if ("between" == i.operator) {
            let e2 = i.value[0], t2 = i.value[1];
            Number(e2) === e2 && (e2 = w2utils.formatDate(e2)), Number(t2) === t2 && (t2 = w2utils.formatDate(t2)), l = `: ${e2} - ` + t2;
          } else {
            let e2 = i.value, t2 = (Number(e2) == e2 && (e2 = w2utils.formatDate(e2)), i.operator);
            "more:" == (t2 = "less" == (t2 = "more" == t2 ? "since" : t2) ? "before" : t2).substr(0, 5) && (t2 = "since"), l = `: ${t2} ` + e2;
          }
        r += `<span class="w2ui-action" data-click="searchFieldTooltip|${t}|${e}|this">
                    ${s ? s.label : ""}
                    ${l}
                    <span class="icon-chevron-down"></span>
                </span>`;
      }), r += `
                ${this.show.searchSave ? `<div class="grid-search-line"></div>
                       <button class="w2ui-btn grid-search-btn" data-click="searchSave">${w2utils.lang("Save")}</button>
                      ` : ""}
                <button class="w2ui-btn grid-search-btn btn-remove"
                    data-click="searchReset">X</button>
            `, query(this.box).find(`#grid_${this.name}_searches`).html(r), query(this.box).find(`#grid_${this.name}_search_logic`).html(w2utils.lang("AND" == this.last.logic ? "All" : "Any"));
    } else
      query(this.box).find(".w2ui-grid-toolbar").css("height", this.last.toolbar_height + "px").find(".w2ui-grid-searches").remove();
    this.searchSelected ? (query(this.box).find(`#grid_${this.name}_search_all`).val(" ").prop("readOnly", true), query(this.box).find(`#grid_${this.name}_search_name`).show().find(".name-text").html(this.searchSelected.text)) : (query(this.box).find(`#grid_${this.name}_search_all`).prop("readOnly", false), query(this.box).find(`#grid_${this.name}_search_name`).hide().find(".name-text").html("")), w2utils.bindEvents(query(this.box).find(`#grid_${this.name}_searches .w2ui-action, #grid_${this.name}_searches button`), this);
  }
  refreshBody() {
    this.scroll();
    var e = this.getRecordsHTML(), t = this.getColumnsHTML(), e = '<div id="grid_' + this.name + '_frecords" class="w2ui-grid-frecords" style="margin-bottom: ' + (w2utils.scrollBarSize() - 1) + 'px;">' + e[0] + '</div><div id="grid_' + this.name + '_records" class="w2ui-grid-records">' + e[1] + '</div><div id="grid_' + this.name + '_scroll1" class="w2ui-grid-scroll1" style="height: ' + w2utils.scrollBarSize() + 'px"></div><div id="grid_' + this.name + '_fcolumns" class="w2ui-grid-fcolumns">    <table><tbody>' + t[0] + '</tbody></table></div><div id="grid_' + this.name + '_columns" class="w2ui-grid-columns">    <table><tbody>' + t[1] + `</tbody></table></div><div class="w2ui-intersection-marker" style="display: none; height: ${this.recordHeight - 5}px">
               <div class="top-marker"></div>
               <div class="bottom-marker"></div>
            </div>`;
    let l = query(this.box).find(`#grid_${this.name}_body`, this.box).html(e);
    t = query(this.box).find(`#grid_${this.name}_records`, this.box), e = query(this.box).find(`#grid_${this.name}_frecords`, this.box);
    "row" == this.selectType && (t.on("mouseover mouseout", { delegate: "tr" }, (e2) => {
      var t2 = query(e2.delegate).attr("recid");
      query(this.box).find(`#grid_${this.name}_frec_` + w2utils.escapeId(t2)).toggleClass("w2ui-record-hover", "mouseover" == e2.type);
    }), e.on("mouseover mouseout", { delegate: "tr" }, (e2) => {
      var t2 = query(e2.delegate).attr("recid");
      query(this.box).find(`#grid_${this.name}_rec_` + w2utils.escapeId(t2)).toggleClass("w2ui-record-hover", "mouseover" == e2.type);
    })), w2utils.isIOS ? t.append(e).on("click", { delegate: "tr" }, (e2) => {
      var t2 = query(e2.delegate).attr("recid");
      this.dblClick(t2, e2);
    }) : t.add(e).on("click", { delegate: "tr" }, (e2) => {
      var t2 = query(e2.delegate).attr("recid");
      "-none-" != t2 && this.click(t2, e2);
    }).on("contextmenu", { delegate: "tr" }, (e2) => {
      var t2 = query(e2.delegate).attr("recid"), i = query(e2.target).closest("td"), i = parseInt(i.attr("col") ?? -1);
      this.showContextMenu(t2, i, e2);
    }).on("mouseover", { delegate: "tr" }, (e2) => {
      this.last.rec_out = false;
      let t2 = query(e2.delegate).attr("index"), i = query(e2.delegate).attr("recid");
      t2 !== this.last.rec_over && (this.last.rec_over = t2, setTimeout(() => {
        delete this.last.rec_out, this.trigger("mouseEnter", { target: this.name, originalEvent: e2, index: t2, recid: i }).finish();
      }));
    }).on("mouseout", { delegate: "tr" }, (t2) => {
      let i = query(t2.delegate).attr("index"), s = query(t2.delegate).attr("recid");
      this.last.rec_out = true, setTimeout(() => {
        let e2 = () => {
          this.trigger("mouseLeave", { target: this.name, originalEvent: t2, index: i, recid: s }).finish();
        };
        i !== this.last.rec_over && e2(), setTimeout(() => {
          this.last.rec_out && (delete this.last.rec_out, delete this.last.rec_over, e2());
        });
      });
    }), l.data("scroll", { lastDelta: 0, lastTime: 0 }).find(".w2ui-grid-frecords").on("mousewheel DOMMouseScroll ", (e2) => {
      e2.preventDefault();
      var t2 = l.data("scroll"), i = l.find(".w2ui-grid-records"), e2 = null != typeof e2.wheelDelta ? -e2.wheelDelta : e2.detail || e2.deltaY, s = i.prop("scrollTop");
      t2.lastDelta += e2, e2 = Math.round(t2.lastDelta), l.data("scroll", t2), i.get(0).scroll({ top: s + e2, behavior: "smooth" });
    }), t.off(".body-global").on("scroll.body-global", { delegate: ".w2ui-grid-records" }, (e2) => {
      this.scroll(e2);
    }), query(this.box).find(".w2ui-grid-body").off(".body-global").on("click.body-global dblclick.body-global contextmenu.body-global", { delegate: "td.w2ui-head" }, (e2) => {
      var t2 = query(e2.delegate).attr("col"), i = this.columns[t2] ?? { field: t2 };
      switch (e2.type) {
        case "click":
          this.columnClick(i.field, e2);
          break;
        case "dblclick":
          this.columnDblClick(i.field, e2);
          break;
        case "contextmenu":
          this.columnContextMenu(i.field, e2);
      }
    }).on("mouseover.body-global", { delegate: ".w2ui-col-header" }, (e2) => {
      let t2 = query(e2.delegate).parent().attr("col");
      this.columnTooltipShow(t2, e2), query(e2.delegate).off(".tooltip").on("mouseleave.tooltip", () => {
        this.columnTooltipHide(t2, e2);
      });
    }).on("click.body-global", { delegate: "input.w2ui-select-all" }, (e2) => {
      e2.delegate.checked ? this.selectAll() : this.selectNone(), e2.stopPropagation(), clearTimeout(this.last.kbd_timer);
    }).on("click.body-global", { delegate: ".w2ui-show-children, .w2ui-col-expand" }, (e2) => {
      e2.stopPropagation(), this.toggle(query(e2.target).parents("tr").attr("recid"));
    }).on("click.body-global mouseover.body-global", { delegate: ".w2ui-info" }, (e2) => {
      var _a, _b;
      var t2 = query(e2.delegate).closest("td"), i = t2.parent(), s = this.columns[t2.attr("col")], l2 = i.parents(".w2ui-grid-body").hasClass("w2ui-grid-summary");
      ["mouseenter", "mouseover"].includes((_b = (_a = s.info) == null ? void 0 : _a.showOn) == null ? void 0 : _b.toLowerCase()) && "mouseover" == e2.type ? this.showBubble(i.attr("index"), t2.attr("col"), l2).then(() => {
        query(e2.delegate).off(".tooltip").on("mouseleave.tooltip", () => {
          w2tooltip.hide(this.name + "-bubble");
        });
      }) : "click" == e2.type && (w2tooltip.hide(this.name + "-bubble"), this.showBubble(i.attr("index"), t2.attr("col"), l2));
    }).on("mouseover.body-global", { delegate: ".w2ui-clipboard-copy" }, (l2) => {
      if (!l2.delegate._tooltipShow) {
        let t2 = query(l2.delegate).parent(), i = t2.parent();
        var e2 = this.columns[t2.attr("col")];
        let s = i.parents(".w2ui-grid-body").hasClass("w2ui-grid-summary");
        w2tooltip.show({ name: this.name + "-bubble", anchor: l2.delegate, html: w2utils.lang("string" == typeof e2.clipboardCopy ? e2.clipboardCopy : "Copy to clipboard"), position: "top|bottom", offsetY: -2 }).hide((e3) => {
          l2.delegate._tooltipShow = false, query(l2.delegate).off(".tooltip");
        }), query(l2.delegate).off(".tooltip").on("mouseleave.tooltip", (e3) => {
          w2tooltip.hide(this.name + "-bubble");
        }).on("click.tooltip", (e3) => {
          e3.stopPropagation(), w2tooltip.update(this.name + "-bubble", w2utils.lang("Copied")), this.clipboardCopy(i.attr("index"), t2.attr("col"), s);
        }), l2.delegate._tooltipShow = true;
      }
    }).on("click.body-global", { delegate: ".w2ui-editable-checkbox" }, (e2) => {
      var t2 = query(e2.delegate).data();
      this.editChange.call(this, e2.delegate, t2.changeind, t2.colind, e2), this.updateToolbar();
    }), 0 === this.records.length && this.msgEmpty ? query(this.box).find(`#grid_${this.name}_body`).append(`<div id="grid_${this.name}_empty_msg" class="w2ui-grid-empty-msg"><div>${w2utils.lang(this.msgEmpty)}</div></div>`) : 0 < query(this.box).find(`#grid_${this.name}_empty_msg`).length && query(this.box).find(`#grid_${this.name}_empty_msg`).remove(), 0 < this.summary.length ? (e = this.getSummaryHTML(), query(this.box).find(`#grid_${this.name}_fsummary`).html(e[0]).show(), query(this.box).find(`#grid_${this.name}_summary`).html(e[1]).show()) : (query(this.box).find(`#grid_${this.name}_fsummary`).hide(), query(this.box).find(`#grid_${this.name}_summary`).hide());
  }
  render(e) {
    var i = Date.now();
    let p = this;
    "string" == typeof e && (e = query(e).get(0));
    var s = this.trigger("render", { target: this.name, box: e ?? this.box });
    if (true !== s.isCancelled && (null != e && (0 < query(this.box).find(`#grid_${this.name}_body`).length && query(this.box).removeAttr("name").removeClass("w2ui-reset w2ui-grid w2ui-inactive").html(""), this.box = e), this.box)) {
      let o = function(t2) {
        var _a, _b;
        if (t2.target.tagName) {
          var r = p.last.move;
          if (r && -1 != ["select", "select-column"].indexOf(r.type) && (r.divX = t2.screenX - r.x, r.divY = t2.screenY - r.y, !(Math.abs(r.divX) <= 1 && Math.abs(r.divY) <= 1)))
            if (p.last.cancelClick = true, 1 == p.reorderRows && p.last.move.reorder) {
              let e2 = query(t2.target).parents("tr").attr("recid");
              (e2 = "-none-" == e2 ? "bottom" : e2) != r.from && (n2 = query(p.box).find("#grid_" + p.name + "_rec_" + e2), query(p.box).find(".insert-before"), n2.addClass("insert-before"), r.lastY = t2.screenY, r.to = e2, n2 = { top: (_a = n2.get(0)) == null ? void 0 : _a.offsetTop, left: (_b = n2.get(0)) == null ? void 0 : _b.offsetLeft }, query(p.box).find("#grid_" + p.name + "_ghost_line").css({ top: n2.top + "px", left: r.pos.left + "px", "border-top": "2px solid #769EFC" })), void query(p.box).find("#grid_" + p.name + "_ghost").css({ top: r.pos.top + r.divY + "px", left: r.pos.left + "px" });
            } else {
              r.start && r.recid && (p.selectNone(), r.start = false);
              var a = [], n2 = ("TR" == t2.target.tagName.toUpperCase() ? query(t2.target) : query(t2.target).parents("tr")).attr("recid");
              if (null == n2) {
                if ("row" != p.selectType && (!p.last.move || "select" != p.last.move.type)) {
                  var o2 = parseInt(query(t2.target).parents("td").attr("col"));
                  if (isNaN(o2))
                    p.removeRange("column-selection"), query(p.box).find(".w2ui-grid-columns .w2ui-col-header, .w2ui-grid-fcolumns .w2ui-col-header").removeClass("w2ui-col-selected"), query(p.box).find(".w2ui-col-number").removeClass("w2ui-row-selected"), delete r.colRange;
                  else {
                    let e2 = o2 + "-" + o2;
                    r.column < o2 && (e2 = r.column + "-" + o2);
                    var i2 = [], s2 = (e2 = r.column > o2 ? o2 + "-" + r.column : e2).split("-");
                    for (let e3 = parseInt(s2[0]); e3 <= parseInt(s2[1]); e3++)
                      i2.push(e3);
                    if (r.colRange != e2 && true !== (c = p.trigger("columnSelect", { target: p.name, columns: i2 })).isCancelled) {
                      null == r.colRange && p.selectNone();
                      var l = e2.split("-");
                      query(p.box).find(".w2ui-grid-columns .w2ui-col-header, .w2ui-grid-fcolumns .w2ui-col-header").removeClass("w2ui-col-selected");
                      for (let e3 = parseInt(l[0]); e3 <= parseInt(l[1]); e3++)
                        query(p.box).find("#grid_" + p.name + "_column_" + e3 + " .w2ui-col-header").addClass("w2ui-col-selected");
                      query(p.box).find(".w2ui-col-number").not(".w2ui-head").addClass("w2ui-row-selected"), r.colRange = e2, p.removeRange("column-selection"), p.addRange({ name: "column-selection", range: [{ recid: p.records[0].recid, column: l[0] }, { recid: p.records[p.records.length - 1].recid, column: l[1] }], style: "background-color: rgba(90, 145, 234, 0.1)" });
                    }
                  }
                }
              } else {
                let l2 = p.get(r.recid, true);
                if (!(null == l2 || p.records[l2] && p.records[l2].recid != r.recid)) {
                  let e2 = p.get(n2, true);
                  if (null != e2) {
                    let i3 = parseInt(r.column), s3 = parseInt(("TD" == t2.target.tagName.toUpperCase() ? query(t2.target) : query(t2.target).parents("td")).attr("col"));
                    isNaN(i3) && isNaN(s3) && (i3 = 0, s3 = p.columns.length - 1), l2 > e2 && (o2 = l2, l2 = e2, e2 = o2);
                    var h2, n2 = "ind1:" + l2 + ",ind2;" + e2 + ",col1:" + i3 + ",col2:" + s3;
                    if (r.range != n2) {
                      r.range = n2;
                      for (let t3 = l2; t3 <= e2; t3++)
                        if (!(0 < p.last.searchIds.length && -1 == p.last.searchIds.indexOf(t3)))
                          if ("row" != p.selectType) {
                            i3 > s3 && (h2 = i3, i3 = s3, s3 = h2);
                            for (let e3 = i3; e3 <= s3; e3++)
                              p.columns[e3].hidden || a.push({ recid: p.records[t3].recid, column: parseInt(e3) });
                          } else
                            a.push(p.records[t3].recid);
                      if ("row" != p.selectType) {
                        var d = p.getSelection();
                        let e3 = [];
                        for (let i4 = 0; i4 < a.length; i4++) {
                          let t3 = false;
                          for (let e4 = 0; e4 < d.length; e4++)
                            a[i4].recid == d[e4].recid && a[i4].column == d[e4].column && (t3 = true);
                          t3 || e3.push({ recid: a[i4].recid, column: a[i4].column });
                        }
                        p.select(e3), e3 = [];
                        for (let i4 = 0; i4 < d.length; i4++) {
                          let t3 = false;
                          for (let e4 = 0; e4 < a.length; e4++)
                            a[e4].recid == d[i4].recid && a[e4].column == d[i4].column && (t3 = true);
                          t3 || e3.push({ recid: d[i4].recid, column: d[i4].column });
                        }
                        p.unselect(e3);
                      } else if (p.multiSelect) {
                        var u = p.getSelection();
                        for (let e3 = 0; e3 < a.length; e3++)
                          -1 == u.indexOf(a[e3]) && p.select(a[e3]);
                        for (let e3 = 0; e3 < u.length; e3++)
                          -1 == a.indexOf(u[e3]) && p.unselect(u[e3]);
                      }
                    }
                  }
                }
              }
            }
        }
      }, h = function(t2) {
        var i2 = p.last.move;
        if (setTimeout(() => {
          delete p.last.cancelClick;
        }, 1), !query(t2.target).parents().hasClass(".w2ui-head") && !query(t2.target).hasClass(".w2ui-head")) {
          if (i2 && -1 != ["select", "select-column"].indexOf(i2.type)) {
            if (null != i2.colRange && true !== c.isCancelled) {
              var s2 = i2.colRange.split("-"), l = [];
              for (let e2 = 0; e2 < p.records.length; e2++) {
                var r = [];
                for (let e3 = parseInt(s2[0]); e3 <= parseInt(s2[1]); e3++)
                  r.push(e3);
                l.push({ recid: p.records[e2].recid, column: r });
              }
              p.removeRange("column-selection"), c.finish(), p.select(l);
            }
            if (1 == p.reorderRows && p.last.move.reorder)
              if (null != i2.to) {
                t2 = p.trigger("reorderRow", { target: p.name, recid: i2.from, moveBefore: i2.to });
                if (true === t2.isCancelled)
                  return n(), void delete p.last.move;
                var a = p.get(i2.from, true);
                let e2 = p.get(i2.to, true);
                "bottom" == i2.to && (e2 = p.records.length);
                i2 = p.records[a];
                null != a && null != e2 && (p.records.splice(a, 1), a > e2 ? p.records.splice(e2, 0, i2) : p.records.splice(e2 - 1, 0, i2)), p.sortData = [], query(p.box).find(`#grid_${p.name}_columns .w2ui-col-header`).removeClass("w2ui-col-sorted"), n(), t2.finish();
              } else
                n();
          }
          delete p.last.move, query(document).off(".w2ui-" + p.name);
        }
      }, n = function() {
        query(p.box).find(`#grid_${p.name}_ghost`).remove(), query(p.box).find(`#grid_${p.name}_ghost_line`).remove(), p.refresh(), delete p.last.move;
      };
      e = "object" != typeof this.url ? this.url : this.url.get;
      if (this.reset(true), !this.last.field)
        if (this.multiSearch && this.show.searchAll)
          this.last.field = "all", this.last.label = "All Fields";
        else {
          let e2 = 0;
          for (; e2 < this.searches.length && (this.searches[e2].hidden || false === this.searches[e2].simple); )
            e2++;
          e2 >= this.searches.length ? (this.last.field = "", this.last.label = "") : (this.last.field = this.searches[e2].field, this.last.label = this.searches[e2].label);
        }
      if (query(this.box).attr("name", this.name).addClass("w2ui-reset w2ui-grid w2ui-inactive").html('<div class="w2ui-grid-box">    <div id="grid_' + this.name + '_header" class="w2ui-grid-header"></div>    <div id="grid_' + this.name + '_toolbar" class="w2ui-grid-toolbar"></div>    <div id="grid_' + this.name + '_body" class="w2ui-grid-body"></div>    <div id="grid_' + this.name + '_fsummary" class="w2ui-grid-body w2ui-grid-summary"></div>    <div id="grid_' + this.name + '_summary" class="w2ui-grid-body w2ui-grid-summary"></div>    <div id="grid_' + this.name + '_footer" class="w2ui-grid-footer"></div>    <textarea id="grid_' + this.name + '_focus" class="w2ui-grid-focus-input" ' + (this.tabIndex ? 'tabindex="' + this.tabIndex + '"' : "") + (w2utils.isIOS ? "readonly" : "") + "></textarea></div>"), "row" != this.selectType && query(this.box).addClass("w2ui-ss"), 0 < query(this.box).length && (query(this.box)[0].style.cssText += this.style), this.initToolbar(), null != this.toolbar && this.toolbar.render(query(this.box).find("#grid_" + this.name + "_toolbar")[0]), this.last.toolbar_height = query(this.box).find(`#grid_${this.name}_toolbar`).prop("offsetHeight"), this.last.field && "all" != this.last.field) {
        let e2 = this.searchData;
        setTimeout(() => {
          this.searchInitInput(this.last.field, 1 == e2.length ? e2[0].value : null);
        }, 1);
      }
      query(this.box).find(`#grid_${this.name}_footer`).html(this.getFooterHTML()), this.last.state || (this.last.state = this.stateSave(true)), this.stateRestore(), e && (this.clear(), this.refresh());
      let t = false;
      for (let e2 = 0; e2 < this.searches.length; e2++)
        if (this.searches[e2].hidden) {
          t = true;
          break;
        }
      t ? (this.searchReset(false), e || setTimeout(() => {
        this.searchReset();
      }, 1)) : this.reload(), query(this.box).find(`#grid_${this.name}_focus`).on("focus", (e2) => {
        clearTimeout(this.last.kbd_timer), this.hasFocus || this.focus();
      }).on("blur", (e2) => {
        clearTimeout(this.last.kbd_timer), this.last.kbd_timer = setTimeout(() => {
          this.hasFocus && this.blur();
        }, 100);
      }).on("paste", (i2) => {
        var s2 = i2.clipboardData || null;
        if (s2) {
          let e2 = s2.items, t2 = [];
          for (var l in e2 = 2 == e2.length && 2 == (e2 = 2 == e2.length && "file" == e2[1].kind ? [e2[1]] : e2).length && "text/plain" == e2[0].type && "text/html" == e2[1].type ? [e2[1]] : e2) {
            l = e2[l];
            if ("file" === l.kind) {
              var r = l.getAsFile();
              t2.push({ kind: "file", data: r });
            } else if ("string" === l.kind && ("text/plain" === l.type || "text/html" === l.type)) {
              i2.preventDefault();
              let e3 = s2.getData("text/plain");
              -1 != e3.indexOf("\r") && -1 == e3.indexOf("\n") && (e3 = e3.replace(/\r/g, "\n")), t2.push({ kind: "text/html" == l.type ? "html" : "text", data: e3 });
            }
          }
          1 === t2.length && "file" != t2[0].kind && (t2 = t2[0].data), w2ui[this.name].paste(t2, i2), i2.preventDefault();
        }
      }).on("keydown", function(e2) {
        w2ui[p.name].keydown.call(w2ui[p.name], e2);
      });
      let c;
      return query(this.box).off("mousedown.mouseStart").on("mousedown.mouseStart", function(l) {
        if (1 == l.which && ("text" == p.last.userSelect && (p.last.userSelect = "", query(p.box).find(".w2ui-grid-body").css("user-select", "none")), !("row" == p.selectType && (query(l.target).parents().hasClass("w2ui-head") || query(l.target).hasClass("w2ui-head")) || p.last.move && "expand" == p.last.move.type))) {
          if (l.altKey)
            query(p.box).find(".w2ui-grid-body").css("user-select", "text"), p.selectNone(), p.last.move = { type: "text-select" }, p.last.userSelect = "text";
          else {
            let e2 = l.target;
            var r = { x: l.offsetX - 10, y: l.offsetY - 10 };
            let t3 = false;
            for (; e2 && (!e2.classList || !e2.classList.contains("w2ui-grid")); )
              e2.tagName && "TD" == e2.tagName.toUpperCase() && (t3 = true), e2.tagName && "TR" != e2.tagName.toUpperCase() && 1 == t3 && (r.x += e2.offsetLeft, r.y += e2.offsetTop), e2 = e2.parentNode;
            p.last.move = { x: l.screenX, y: l.screenY, divX: 0, divY: 0, focusX: r.x, focusY: r.y, recid: query(l.target).parents("tr").attr("recid"), column: parseInt(("TD" == l.target.tagName.toUpperCase() ? query(l.target) : query(l.target).parents("td")).attr("col")), type: "select", ghost: false, start: true }, null == p.last.move.recid && (p.last.move.type = "select-column");
            let i3 = l.target, s3 = query(p.box).find("#grid_" + p.name + "_focus");
            if (p.last.move) {
              let e3 = p.last.move.focusX, t4 = p.last.move.focusY;
              var a = query(i3).parents("table").parent();
              (a.hasClass("w2ui-grid-records") || a.hasClass("w2ui-grid-frecords") || a.hasClass("w2ui-grid-columns") || a.hasClass("w2ui-grid-fcolumns") || a.hasClass("w2ui-grid-summary")) && (e3 = p.last.move.focusX - query(p.box).find("#grid_" + p.name + "_records").prop("scrollLeft"), t4 = p.last.move.focusY - query(p.box).find("#grid_" + p.name + "_records").prop("scrollTop")), (query(i3).hasClass("w2ui-grid-footer") || 0 < query(i3).parents("div.w2ui-grid-footer").length) && (t4 = query(p.box).find("#grid_" + p.name + "_footer").get(0).offsetTop), a.hasClass("w2ui-scroll-wrapper") && a.parent().hasClass("w2ui-toolbar") && (e3 = p.last.move.focusX - a.prop("scrollLeft")), s3.css({ left: e3 - 10, top: t4 });
            }
            setTimeout(() => {
              var _a;
              p.last.inEditMode || (["INPUT", "TEXTAREA", "SELECT"].includes(i3.tagName) ? i3.focus() : s3.get(0) !== document.active && ((_a = s3.get(0)) == null ? void 0 : _a.focus({ preventScroll: true })));
            }, 50), p.multiSelect || p.reorderRows || "drag" != p.last.move.type || delete p.last.move;
          }
          if (1 == p.reorderRows) {
            let e2 = l.target;
            var t2, i2, s2, n2;
            "TD" != e2.tagName.toUpperCase() && (e2 = query(e2).parents("td")[0]), query(e2).hasClass("w2ui-col-number") || query(e2).hasClass("w2ui-col-order") ? (p.selectNone(), p.last.move.reorder = true, a = query(p.box).find(".w2ui-even.w2ui-empty-record").css("background-color"), t2 = query(p.box).find(".w2ui-odd.w2ui-empty-record").css("background-color"), query(p.box).find(".w2ui-even td").filter(":not(.w2ui-col-number)").css("background-color", a), query(p.box).find(".w2ui-odd td").filter(":not(.w2ui-col-number)").css("background-color", t2), t2 = p.last.move, i2 = query(p.box).find(".w2ui-grid-records"), t2.ghost || (s2 = query(p.box).find(`#grid_${p.name}_rec_` + t2.recid), n2 = s2.parents("table").find("tr:first-child").get(0).cloneNode(true), t2.offsetY = l.offsetY, t2.from = t2.recid, t2.pos = { top: s2.get(0).offsetTop - 1, left: s2.get(0).offsetLeft }, t2.ghost = query(s2.get(0).cloneNode(true)), t2.ghost.removeAttr("id"), t2.ghost.find("td").css({ "border-top": "1px solid silver", "border-bottom": "1px solid silver" }), s2.find("td").remove(), s2.append(`<td colspan="1000"><div class="w2ui-reorder-empty" style="height: ${p.recordHeight - 2}px"></div></td>`), i2.append('<div id="grid_' + p.name + '_ghost_line" style="position: absolute; z-index: 999999; pointer-events: none; width: 100%;"></div>'), i2.append('<table id="grid_' + p.name + '_ghost" style="position: absolute; z-index: 999998; opacity: 0.9; pointer-events: none;"></table>'), query(p.box).find("#grid_" + p.name + "_ghost").append(n2).append(t2.ghost)), query(p.box).find("#grid_" + p.name + "_ghost").css({ top: t2.pos.top + "px", left: t2.pos.left + "px" })) : p.last.move.reorder = false;
          }
          query(document).on("mousemove.w2ui-" + p.name, o).on("mouseup.w2ui-" + p.name, h), l.stopPropagation();
        }
      }), this.updateToolbar(), s.finish(), this.last.observeResize = new ResizeObserver(() => {
        this.resize();
      }), this.last.observeResize.observe(this.box), Date.now() - i;
    }
  }
  destroy() {
    var _a;
    var e = this.trigger("destroy", { target: this.name });
    true !== e.isCancelled && (query(this.box).off(), "object" == typeof this.toolbar && this.toolbar.destroy && this.toolbar.destroy(), 0 < query(this.box).find(`#grid_${this.name}_body`).length && query(this.box).removeAttr("name").removeClass("w2ui-reset w2ui-grid w2ui-inactive").html(""), (_a = this.last.observeResize) == null ? void 0 : _a.disconnect(), delete w2ui[this.name], e.finish());
  }
  initColumnOnOff() {
    var e, i = [{ id: "line-numbers", text: "Line #", checked: this.show.lineNumbers }];
    for (let t2 = 0; t2 < this.columns.length; t2++) {
      var s = this.columns[t2];
      let e2 = this.columns[t2].text;
      false !== s.hideable && (e2 = (e2 = !e2 && this.columns[t2].tooltip ? this.columns[t2].tooltip : e2) || "- column " + (parseInt(t2) + 1) + " -", i.push({ id: s.field, text: w2utils.stripTags(e2), checked: !s.hidden }));
    }
    (("object" != typeof this.url ? this.url : this.url.get) && this.show.skipRecords || this.show.saveRestoreState) && i.push({ text: "--" }), this.show.skipRecords && (e = w2utils.lang("Skip") + `<input id="${this.name}_skip" type="text" class="w2ui-input w2ui-grid-skip" value="${this.offset}">` + w2utils.lang("records"), i.push({ id: "w2ui-skip", text: e, group: false, icon: "w2ui-icon-empty" })), this.show.saveRestoreState && i.push({ id: "w2ui-stateSave", text: w2utils.lang("Save Grid State"), icon: "w2ui-icon-empty", group: false }, { id: "w2ui-stateReset", text: w2utils.lang("Restore Default State"), icon: "w2ui-icon-empty", group: false });
    let t = [];
    return i.forEach((e2) => {
      e2.text = w2utils.lang(e2.text), e2.checked && t.push(e2.id);
    }), this.toolbar.set("w2ui-column-on-off", { selected: t, items: i }), i;
  }
  initColumnDrag(e) {
    if (this.columnGroups && this.columnGroups.length)
      throw "Draggable columns are not currently supported with column groups.";
    let r = this, a = { pressed: false, targetPos: null, columnHead: null }, n = (t, e2) => {
      var i = ["w2ui-col-number", "w2ui-col-expand", "w2ui-col-select"];
      true !== e2 && i.push("w2ui-head-last");
      for (let e3 = 0; e3 < i.length; e3++)
        if (query(t).closest(".w2ui-head").hasClass(i[e3]))
          return true;
      return false;
    };
    function o(e2) {
      var t, i, s, l;
      a.pressed && a.columnHead && (t = e2.pageX, i = e2.pageY, n(e2.target, true) || (e2 = e2, 0 != query(e2.target).closest("td").length && (l = query(r.box).find(".w2ui-grid-body").get(0).getBoundingClientRect(), s = query(e2.target).closest("td").get(0).getBoundingClientRect(), query(r.box).find(".w2ui-intersection-marker").show().css({ left: s.left - l.left + "px" }), s = query(e2.target).closest("td"), a.targetPos = s.hasClass("w2ui-head-last") ? r.columns.length : parseInt(s.attr("col")))), l = t, e2 = i, query(a.ghost).css({ left: l - 10 + "px", top: e2 - 10 + "px" }).show());
    }
    function h(e2) {
      if (a.pressed && a.columnHead) {
        a.pressed = false;
        var t, i, s = () => {
          var e3 = query(r.box).find(".w2ui-grid-ghost");
          query(r.box).find(".w2ui-intersection-marker").hide(), query(a.ghost).remove(), e3.remove(), query(document).off(".colDrag"), a = {};
        };
        if (e2.pageX == a.initialX && e2.pageY == a.initialY)
          r.columnClick(r.columns[a.originalPos].field, e2), s();
        else {
          if (true === (e2 = r.trigger("columnDragEnd", { originalEvent: e2, target: a.columnHead[0], dragData: a })).isCancelled)
            return false;
          t = r.columns[a.originalPos], i = r.columns, a.originalPos != a.targetPos && null != a.targetPos && (i.splice(a.targetPos, 0, w2utils.clone(t)), i.splice(i.indexOf(t), 1)), s(), r.refresh(), e2.finish({ targetColumn: NaN });
        }
      }
    }
    return query(r.box).off(".colDrag").on("mousedown.colDrag", function(e2) {
      if (!a.pressed && 0 !== a.numberPreColumnsPresent && 0 === e2.button) {
        var i, t;
        if (query(e2.target).parents().hasClass("w2ui-head") && !n(e2.target)) {
          if (a.pressed = true, a.initialX = e2.pageX, a.initialY = e2.pageY, a.numberPreColumnsPresent = query(r.box).find(".w2ui-head.w2ui-col-number, .w2ui-head.w2ui-col-expand, .w2ui-head.w2ui-col-select").length, a.columnHead = s = query(e2.target).closest(".w2ui-head"), a.originalPos = t = parseInt(s.attr("col"), 10), true === (t = r.trigger("columnDragStart", { originalEvent: e2, origColumnNumber: t, target: s[0] })).isCancelled)
            return false;
          i = a.columns = query(r.box).find(".w2ui-head:not(.w2ui-head-last)"), query(document).on("mouseup.colDrag", h), query(document).on("mousemove.colDrag", o);
          var s = r.columns[a.originalPos], s = w2utils.lang("function" == typeof s.text ? s.text(s) : s.text);
          a.ghost = query.html(`<span col="${a.originalPos}">${s}</span>`)[0], query(document.body).append(a.ghost), query(a.ghost).css({ display: "none", left: e2.pageX, top: e2.pageY, opacity: 1, margin: "3px 0 0 20px", padding: "3px", "background-color": "white", position: "fixed", "z-index": 999999 }).addClass(".w2ui-grid-ghost"), a.offsets = [];
          for (let e3 = 0, t2 = i.length; e3 < t2; e3++) {
            var l = i[e3].getBoundingClientRect();
            a.offsets.push(l.left);
          }
          t.finish();
        }
      }
    }), { remove() {
      query(r.box).off(".colDrag"), r.last.columnDrag = false;
    } };
  }
  columnOnOff(e, t) {
    e = this.trigger("columnOnOff", { target: this.name, field: t, originalEvent: e });
    if (true !== e.isCancelled) {
      var i = this.find({ "w2ui.expanded": true }, true);
      for (let e2 = 0; e2 < i.length; e2++) {
        var s = this.records[e2].w2ui;
        s && !Array.isArray(s.children) && (this.records[e2].w2ui.expanded = false);
      }
      "line-numbers" == t ? (this.show.lineNumbers = !this.show.lineNumbers, this.refresh()) : (t = this.getColumn(t)).hidden ? this.showColumn(t.field) : this.hideColumn(t.field), e.finish();
    }
  }
  initToolbar() {
    if (null == this.toolbar.render) {
      let e = this.toolbar.items || [];
      var t;
      this.toolbar.items = [], this.toolbar = new w2toolbar(w2utils.extend({}, this.toolbar, { name: this.name + "_toolbar", owner: this })), this.show.toolbarReload && this.toolbar.items.push(w2utils.extend({}, this.buttons.reload)), this.show.toolbarColumns && this.toolbar.items.push(w2utils.extend({}, this.buttons.columns)), this.show.toolbarSearch && (t = `
                <div class="w2ui-grid-search-input">
                    ${this.buttons.search.html}
                    <div id="grid_${this.name}_search_name" class="w2ui-grid-search-name">
                        <span class="name-icon w2ui-icon-search"></span>
                        <span class="name-text"></span>
                        <span class="name-cross w2ui-action" data-click="searchReset">x</span>
                    </div>
                    <input type="text" id="grid_${this.name}_search_all" class="w2ui-search-all" tabindex="-1"
                        autocapitalize="off" autocomplete="off" autocorrect="off" spellcheck="false"
                        placeholder="${w2utils.lang(this.last.label, true)}" value="${this.last.search}"
                        data-focus="searchSuggest" data-click="stop"
                    >
                    <div class="w2ui-search-drop w2ui-action" data-click="searchOpen"
                            style="${this.multiSearch ? "" : "display: none"}">
                        <span class="w2ui-icon-drop"></span>
                    </div>
                </div>`, this.toolbar.items.push({ id: "w2ui-search", type: "html", html: t, onRefresh: async (e2) => {
        await e2.complete;
        var e2 = query(this.box).find(`#grid_${this.name}_search_all`), t2 = (w2utils.bindEvents(query(this.box).find(`#grid_${this.name}_search_all, .w2ui-action`), this), w2utils.debounce((e3) => {
          var t3 = e3.target.value;
          this.liveSearch && this.last.liveText != t3 && (this.last.liveText = t3, this.search(this.last.field, t3)), 40 == e3.keyCode && this.searchSuggest(true);
        }, 250));
        e2.on("change", (e3) => {
          this.liveSearch || (this.search(this.last.field, e3.target.value), this.searchSuggest(true, true, this));
        }).on("blur", () => {
          this.last.liveText = "";
        }).on("keyup", t2);
      } })), Array.isArray(e) && (t = e.map((e2) => e2.id), this.show.toolbarAdd && !t.includes(this.buttons.add.id) && this.toolbar.items.push(w2utils.extend({}, this.buttons.add)), this.show.toolbarEdit && !t.includes(this.buttons.edit.id) && this.toolbar.items.push(w2utils.extend({}, this.buttons.edit)), this.show.toolbarDelete && !t.includes(this.buttons.delete.id) && this.toolbar.items.push(w2utils.extend({}, this.buttons.delete)), this.show.toolbarSave && !t.includes(this.buttons.save.id) && ((this.show.toolbarAdd || this.show.toolbarDelete || this.show.toolbarEdit) && this.toolbar.items.push({ type: "break", id: "w2ui-break2" }), this.toolbar.items.push(w2utils.extend({}, this.buttons.save))), e = e.map((e2) => this.buttons[e2.name] ? w2utils.extend({}, this.buttons[e2.name], e2) : e2)), this.toolbar.items.push(...e), this.toolbar.on("click", (e2) => {
        var i = this.trigger("toolbar", { target: e2.target, originalEvent: e2 });
        if (true !== i.isCancelled) {
          let t2;
          switch (e2.detail.item.id) {
            case "w2ui-reload":
              if (true === (t2 = this.trigger("reload", { target: this.name })).isCancelled)
                return false;
              this.reload(), t2.finish();
              break;
            case "w2ui-column-on-off":
              e2.detail.subItem ? (s = e2.detail.subItem.id, ["w2ui-stateSave", "w2ui-stateReset"].includes(s) ? this[s.substring(5)]() : "w2ui-skip" != s && this.columnOnOff(e2, e2.detail.subItem.id)) : (this.initColumnOnOff(), setTimeout(() => {
                query(`#w2overlay-${this.name}_toolbar-drop .w2ui-grid-skip`).off(".w2ui-grid").on("click.w2ui-grid", (e3) => {
                  e3.stopPropagation();
                }).on("keypress", (e3) => {
                  13 == e3.keyCode && (this.skip(e3.target.value), this.toolbar.click("w2ui-column-on-off"));
                });
              }, 100));
              break;
            case "w2ui-add":
              if (true === (t2 = this.trigger("add", { target: this.name, recid: null })).isCancelled)
                return false;
              t2.finish();
              break;
            case "w2ui-edit": {
              var s = this.getSelection();
              let e3 = null;
              if (1 == s.length && (e3 = s[0]), true === (t2 = this.trigger("edit", { target: this.name, recid: e3 })).isCancelled)
                return false;
              t2.finish();
              break;
            }
            case "w2ui-delete":
              this.delete();
              break;
            case "w2ui-save":
              this.save();
          }
          i.finish();
        }
      }), this.toolbar.on("refresh", (e2) => {
        if ("w2ui-search" == e2.target) {
          let e3 = this.searchData;
          setTimeout(() => {
            this.searchInitInput(this.last.field, 1 == e3.length ? e3[0].value : null);
          }, 1);
        }
      });
    }
  }
  initResize() {
    let r = this;
    query(this.box).find(".w2ui-resizer").off(".grid-col-resize").on("click.grid-col-resize", function(e) {
      e.stopPropagation ? e.stopPropagation() : e.cancelBubble = true, e.preventDefault && e.preventDefault();
    }).on("mousedown.grid-col-resize", function(e) {
      e = e || window.event, r.last.colResizing = true, r.last.tmp = { x: e.screenX, y: e.screenY, gx: e.screenX, gy: e.screenY, col: parseInt(query(this).attr("name")) }, r.last.tmp.tds = query(r.box).find("#grid_" + r.name + '_body table tr:first-child td[col="' + r.last.tmp.col + '"]'), e.stopPropagation ? e.stopPropagation() : e.cancelBubble = true, e.preventDefault && e.preventDefault();
      for (let e2 = 0; e2 < r.columns.length; e2++)
        r.columns[e2].hidden || (null == r.columns[e2].sizeOriginal && (r.columns[e2].sizeOriginal = r.columns[e2].size), r.columns[e2].size = r.columns[e2].sizeCalculated);
      let i = { phase: "before", type: "columnResize", target: r.name, column: r.last.tmp.col, field: r.columns[r.last.tmp.col].field };
      i = r.trigger(w2utils.extend(i, { resizeBy: 0, originalEvent: e }));
      let s;
      query(document).off(".grid-col-resize").on("mousemove.grid-col-resize", function(e2) {
        var t;
        1 == r.last.colResizing && (e2 = e2 || window.event, true === (i = r.trigger(w2utils.extend(i, { resizeBy: e2.screenX - r.last.tmp.gx, originalEvent: e2 }))).isCancelled ? i.isCancelled = false : (r.last.tmp.x = e2.screenX - r.last.tmp.x, r.last.tmp.y = e2.screenY - r.last.tmp.y, t = parseInt(r.columns[r.last.tmp.col].size) + r.last.tmp.x + "px", r.columns[r.last.tmp.col].size = t, s && clearTimeout(s), s = setTimeout(() => {
          r.resizeRecords(), r.scroll();
        }, 100), r.last.tmp.tds.css({ width: t }), r.last.tmp.x = e2.screenX, r.last.tmp.y = e2.screenY));
      }).on("mouseup.grid-col-resize", function(e2) {
        query(document).off(".grid-col-resize"), r.resizeRecords(), r.scroll(), i.finish({ originalEvent: e2 }), setTimeout(() => {
          r.last.colResizing = false;
        }, 1);
      });
    }).on("dblclick.grid-col-resize", function(e) {
      let t = parseInt(query(this).attr("name")), i = r.columns[t], s = 0;
      if (false === i.autoResize)
        return true;
      e.stopPropagation ? e.stopPropagation() : e.cancelBubble = true, e.preventDefault && e.preventDefault(), query(r.box).find('.w2ui-grid-records td[col="' + t + '"] > div', r.box).each(() => {
        var e2 = this.offsetWidth - this.scrollWidth;
        e2 < s && (s = e2 - 3);
      });
      var l = { phase: "before", type: "columnAutoResize", target: r.name, column: i, field: i.field };
      true === (l = r.trigger(w2utils.extend(l, { resizeBy: Math.abs(s), originalEvent: e }))).isCancelled ? l.isCancelled = false : (s < 0 && (i.size = Math.min(parseInt(i.size) + Math.abs(s), i.max || 1 / 0) + "px", r.resizeRecords(), r.resizeRecords(), r.scroll()), l.finish({ originalEvent: e }));
    }).each((e) => {
      var t = query(e).get(0).parentNode;
      query(e).css({ height: t.clientHeight + "px", "margin-left": t.clientWidth - 3 + "px" });
    });
  }
  resizeBoxes() {
    var e = query(this.box).find(`#grid_${this.name}_header`), t = query(this.box).find(`#grid_${this.name}_toolbar`), i = query(this.box).find(`#grid_${this.name}_fsummary`), s = query(this.box).find(`#grid_${this.name}_summary`), l = query(this.box).find(`#grid_${this.name}_footer`), r = query(this.box).find(`#grid_${this.name}_body`);
    this.show.header && e.css({ top: "0px", left: "0px", right: "0px" }), this.show.toolbar && t.css({ top: 0 + (this.show.header ? w2utils.getSize(e, "height") : 0) + "px", left: "0px", right: "0px" }), 0 < this.summary.length && (i.css({ bottom: 0 + (this.show.footer ? w2utils.getSize(l, "height") : 0) + "px" }), s.css({ bottom: 0 + (this.show.footer ? w2utils.getSize(l, "height") : 0) + "px", right: "0px" })), this.show.footer && l.css({ bottom: "0px", left: "0px", right: "0px" }), r.css({ top: 0 + (this.show.header ? w2utils.getSize(e, "height") : 0) + (this.show.toolbar ? w2utils.getSize(t, "height") : 0) + "px", bottom: 0 + (this.show.footer ? w2utils.getSize(l, "height") : 0) + (0 < this.summary.length ? w2utils.getSize(s, "height") : 0) + "px", left: "0px", right: "0px" });
  }
  resizeRecords() {
    var _a, _b, _c, _d, _e, _f;
    let i = this;
    query(this.box).find(".w2ui-empty-record").remove();
    var t, e, s = query(this.box), l = query(this.box).find(":scope > div.w2ui-grid-box"), r = query(this.box).find(`#grid_${this.name}_header`), a = query(this.box).find(`#grid_${this.name}_toolbar`), n = query(this.box).find(`#grid_${this.name}_summary`), o = query(this.box).find(`#grid_${this.name}_fsummary`), h = query(this.box).find(`#grid_${this.name}_footer`), d = query(this.box).find(`#grid_${this.name}_body`), u = query(this.box).find(`#grid_${this.name}_columns`), c = query(this.box).find(`#grid_${this.name}_fcolumns`), p = query(this.box).find(`#grid_${this.name}_records`), f = query(this.box).find(`#grid_${this.name}_frecords`), m = query(this.box).find(`#grid_${this.name}_scroll1`);
    let g = 8 * String(this.total).length + 10, y = (g < 34 && (g = 34), null != this.lineNumberWidth && (g = this.lineNumberWidth), false), w = false, b = 0;
    for (let e2 = 0; e2 < this.columns.length; e2++)
      this.columns[e2].frozen || this.columns[e2].hidden || (t = parseInt(this.columns[e2].sizeCalculated || this.columns[e2].size), b += t);
    ((_a = p[0]) == null ? void 0 : _a.clientWidth) < b && (y = true), ((_b = d[0]) == null ? void 0 : _b.clientHeight) - (((_c = u[0]) == null ? void 0 : _c.clientHeight) ?? 0) < (((_d = query(p).find(":scope > table")[0]) == null ? void 0 : _d.clientHeight) ?? 0) + (y ? w2utils.scrollBarSize() : 0) && (w = true), this.fixedBody ? (e = ((_e = l[0]) == null ? void 0 : _e.clientHeight) - (this.show.header ? w2utils.getSize(r, "height") : 0) - (this.show.toolbar ? w2utils.getSize(a, "height") : 0) - ("none" != n.css("display") ? w2utils.getSize(n, "height") : 0) - (this.show.footer ? w2utils.getSize(h, "height") : 0), d.css("height", e + "px")) : (r = (e = w2utils.getSize(u, "height") + w2utils.getSize(query(this.box).find("#grid_" + this.name + "_records table"), "height") + (y ? w2utils.scrollBarSize() : 0)) + (this.show.header ? w2utils.getSize(r, "height") : 0) + (this.show.toolbar ? w2utils.getSize(a, "height") : 0) + ("none" != n.css("display") ? w2utils.getSize(n, "height") : 0) + (this.show.footer ? w2utils.getSize(h, "height") : 0), l.css("height", r + "px"), d.css("height", e + "px"), s.css("height", w2utils.getSize(l, "height") + "px"));
    let v = this.records.length;
    a = "object" != typeof this.url ? this.url : this.url.get;
    if (0 == this.searchData.length || a || (v = this.last.searchIds.length), this.fixedBody || (w = false), y || w ? (u.find(":scope > table > tbody > tr:nth-child(1) td.w2ui-head-last").css("width", w2utils.scrollBarSize() + "px").show(), p.css({ top: (0 < this.columnGroups.length && this.show.columns ? 1 : 0) + w2utils.getSize(u, "height") + "px", "-webkit-overflow-scrolling": "touch", "overflow-x": y ? "auto" : "hidden", "overflow-y": w ? "auto" : "hidden" })) : (u.find(":scope > table > tbody > tr:nth-child(1) td.w2ui-head-last").hide(), p.css({ top: (0 < this.columnGroups.length && this.show.columns ? 1 : 0) + w2utils.getSize(u, "height") + "px", overflow: "hidden" }), 0 < p.length && (this.last.scrollTop = 0, this.last.scrollLeft = 0)), y ? (f.css("margin-bottom", w2utils.scrollBarSize() + "px"), m.show()) : (f.css("margin-bottom", 0), m.hide()), f.css({ overflow: "hidden", top: p.css("top") }), this.show.emptyRecords && !w) {
      let t2 = Math.floor((((_f = p[0]) == null ? void 0 : _f.clientHeight) ?? 0) / this.recordHeight) - 1, e2 = 0;
      if ((e2 = p[0] ? p[0].scrollHeight - t2 * this.recordHeight : e2) >= this.recordHeight && (e2 -= this.recordHeight, t2++), this.fixedBody) {
        for (let e3 = v; e3 < t2; e3++)
          x(e3, this.recordHeight, this);
        x(t2, e2, this);
      }
    }
    function x(e2, t2, i2) {
      let s2 = "", l2 = "";
      var r2;
      s2 += '<tr class="' + (e2 % 2 ? "w2ui-even" : "w2ui-odd") + ' w2ui-empty-record" recid="-none-" style="height: ' + t2 + 'px">', l2 += '<tr class="' + (e2 % 2 ? "w2ui-even" : "w2ui-odd") + ' w2ui-empty-record" recid="-none-" style="height: ' + t2 + 'px">', i2.show.lineNumbers && (s2 += '<td class="w2ui-col-number"></td>'), i2.show.selectColumn && (s2 += '<td class="w2ui-grid-data w2ui-col-select"></td>'), i2.show.expandColumn && (s2 += '<td class="w2ui-grid-data w2ui-col-expand"></td>'), l2 += '<td class="w2ui-grid-data-spacer" col="start" style="border-right: 0"></td>', i2.reorderRows && (l2 += '<td class="w2ui-grid-data w2ui-col-order" col="order"></td>');
      for (let e3 = 0; e3 < i2.columns.length; e3++) {
        var a2 = i2.columns[e3];
        (a2.hidden || e3 < i2.last.colStart || e3 > i2.last.colEnd) && !a2.frozen || (r2 = '<td class="w2ui-grid-data" ' + (null != a2.attr ? a2.attr : "") + ' col="' + e3 + '"></td>', a2.frozen ? s2 += r2 : l2 += r2);
      }
      s2 += '<td class="w2ui-grid-data-last"></td> </tr>', l2 += '<td class="w2ui-grid-data-last" col="end"></td> </tr>', query(i2.box).find("#grid_" + i2.name + "_frecords > table").append(s2), query(i2.box).find("#grid_" + i2.name + "_records > table").append(l2);
    }
    let _, q;
    if (0 < d.length) {
      let t2 = parseInt(d[0].clientWidth) - (w ? w2utils.scrollBarSize() : 0) - (this.show.lineNumbers ? g : 0) - (this.reorderRows ? 26 : 0) - (this.show.selectColumn ? 26 : 0) - (this.show.expandColumn ? 26 : 0) - 1, i2 = (_ = t2, false);
      for (let e2 = q = 0; e2 < this.columns.length; e2++) {
        var C = this.columns[e2];
        0 < C.gridMinWidth && (C.gridMinWidth > _ && true !== C.hidden && (C.hidden = true, i2 = true), C.gridMinWidth < _) && true === C.hidden && (C.hidden = false, i2 = true);
      }
      if (true === i2)
        return void this.refresh();
      for (let e2 = 0; e2 < this.columns.length; e2++) {
        var k = this.columns[e2];
        k.hidden || ("px" == String(k.size).substr(String(k.size).length - 2).toLowerCase() ? (t2 -= parseFloat(k.size), this.columns[e2].sizeCalculated = k.size, this.columns[e2].sizeType = "px") : (q += parseFloat(k.size), this.columns[e2].sizeType = "%", delete k.sizeCorrected));
      }
      if (100 != q && 0 < q)
        for (let e2 = 0; e2 < this.columns.length; e2++) {
          var S = this.columns[e2];
          S.hidden || "%" == S.sizeType && (S.sizeCorrected = Math.round(100 * parseFloat(S.size) * 100 / q) / 100 + "%");
        }
      for (let e2 = 0; e2 < this.columns.length; e2++) {
        var T = this.columns[e2];
        T.hidden || "%" == T.sizeType && (null != this.columns[e2].sizeCorrected ? this.columns[e2].sizeCalculated = Math.floor(t2 * parseFloat(T.sizeCorrected) / 100) - 1 + "px" : this.columns[e2].sizeCalculated = Math.floor(t2 * parseFloat(T.size) / 100) - 1 + "px");
      }
    }
    let $ = 0;
    for (let e2 = 0; e2 < this.columns.length; e2++) {
      var E = this.columns[e2];
      E.hidden || (null == E.min && (E.min = 20), parseInt(E.sizeCalculated) < parseInt(E.min) && (E.sizeCalculated = E.min + "px"), parseInt(E.sizeCalculated) > parseInt(E.max) && (E.sizeCalculated = E.max + "px"), $ += parseInt(E.sizeCalculated));
    }
    let z = parseInt(_) - parseInt($);
    if (0 < z && 0 < q) {
      let e2 = 0;
      for (; ; ) {
        var D = this.columns[e2];
        if (null == D)
          e2 = 0;
        else {
          if (!D.hidden && "px" != D.sizeType && (D.sizeCalculated = parseInt(D.sizeCalculated) + 1 + "px", 0 === --z))
            break;
          e2++;
        }
      }
    } else
      0 < z && u.find(":scope > table > tbody > tr:nth-child(1) td.w2ui-head-last").css("width", w2utils.scrollBarSize() + "px").show();
    let O = 1;
    this.show.lineNumbers && (O += g), this.show.selectColumn && (O += 26), this.show.expandColumn && (O += 26);
    for (let e2 = 0; e2 < this.columns.length; e2++)
      this.columns[e2].hidden || this.columns[e2].frozen && (O += parseInt(this.columns[e2].sizeCalculated));
    c.css("width", O + "px"), f.css("width", O + "px"), o.css("width", O + "px"), m.css("width", O + "px"), u.css("left", O + "px"), p.css("left", O + "px"), n.css("left", O + "px"), u.find(":scope > table > tbody > tr:nth-child(1) td").add(c.find(":scope > table > tbody > tr:nth-child(1) td")).each((e2) => {
      query(e2).hasClass("w2ui-col-number") && query(e2).css("width", g + "px");
      var t2 = query(e2).attr("col");
      if (null != t2) {
        if ("start" == t2) {
          let t3 = 0;
          for (let e3 = 0; e3 < i.last.colStart; e3++)
            !i.columns[e3] || i.columns[e3].frozen || i.columns[e3].hidden || (t3 += parseInt(i.columns[e3].sizeCalculated));
          query(e2).css("width", t3 + "px");
        }
        i.columns[t2] && query(e2).css("width", i.columns[t2].sizeCalculated);
      }
      if (query(e2).hasClass("w2ui-head-last"))
        if (i.last.colEnd + 1 < i.columns.length) {
          let t3 = 0;
          for (let e3 = i.last.colEnd + 1; e3 < i.columns.length; e3++)
            !i.columns[e3] || i.columns[e3].frozen || i.columns[e3].hidden || (t3 += parseInt(i.columns[e3].sizeCalculated));
          query(e2).css("width", t3 + "px");
        } else
          query(e2).css("width", w2utils.scrollBarSize() + (0 < z && 0 === q ? z : 0) + "px");
    }), 3 == u.find(":scope > table > tbody > tr").length && u.find(":scope > table > tbody > tr:nth-child(1) td").add(c.find(":scope > table > tbody > tr:nth-child(1) td")).html("").css({ height: "0", border: "0", padding: "0", margin: "0" }), p.find(":scope > table > tbody > tr:nth-child(1) td").add(f.find(":scope > table > tbody > tr:nth-child(1) td")).each((e2) => {
      query(e2).hasClass("w2ui-col-number") && query(e2).css("width", g + "px");
      var t2 = query(e2).attr("col");
      if (null != t2) {
        if ("start" == t2) {
          let t3 = 0;
          for (let e3 = 0; e3 < i.last.colStart; e3++)
            !i.columns[e3] || i.columns[e3].frozen || i.columns[e3].hidden || (t3 += parseInt(i.columns[e3].sizeCalculated));
          query(e2).css("width", t3 + "px");
        }
        i.columns[t2] && query(e2).css("width", i.columns[t2].sizeCalculated);
      }
      if (query(e2).hasClass("w2ui-grid-data-last") && 0 === query(e2).parents(".w2ui-grid-frecords").length)
        if (i.last.colEnd + 1 < i.columns.length) {
          let t3 = 0;
          for (let e3 = i.last.colEnd + 1; e3 < i.columns.length; e3++)
            !i.columns[e3] || i.columns[e3].frozen || i.columns[e3].hidden || (t3 += parseInt(i.columns[e3].sizeCalculated));
          query(e2).css("width", t3 + "px");
        } else
          query(e2).css("width", (0 < z && 0 === q ? z : 0) + "px");
    }), n.find(":scope > table > tbody > tr:nth-child(1) td").add(o.find(":scope > table > tbody > tr:nth-child(1) td")).each((e2) => {
      query(e2).hasClass("w2ui-col-number") && query(e2).css("width", g + "px");
      var t2 = query(e2).attr("col");
      if (null != t2) {
        if ("start" == t2) {
          let t3 = 0;
          for (let e3 = 0; e3 < i.last.colStart; e3++)
            !i.columns[e3] || i.columns[e3].frozen || i.columns[e3].hidden || (t3 += parseInt(i.columns[e3].sizeCalculated));
          query(e2).css("width", t3 + "px");
        }
        i.columns[t2] && query(e2).css("width", i.columns[t2].sizeCalculated);
      }
      query(e2).hasClass("w2ui-grid-data-last") && 0 === query(e2).parents(".w2ui-grid-frecords").length && query(e2).css("width", w2utils.scrollBarSize() + (0 < z && 0 === q ? z : 0) + "px");
    }), this.initResize(), this.refreshRanges(), (this.last.scrollTop || this.last.scrollLeft) && 0 < p.length && (u.prop("scrollLeft", this.last.scrollLeft), p.prop("scrollTop", this.last.scrollTop), p.prop("scrollLeft", this.last.scrollLeft)), u.css("will-change", "scroll-position");
  }
  getSearchesHTML() {
    let i = `
            <div class="search-title">
                ${w2utils.lang("Advanced Search")}
                <span class="search-logic" style="${this.show.searchLogic ? "" : "display: none"}">
                    <select id="grid_${this.name}_logic" class="w2ui-input">
                        <option value="AND" ${"AND" == this.last.logic ? "selected" : ""}>${w2utils.lang("All")}</option>
                        <option value="OR" ${"OR" == this.last.logic ? "selected" : ""}>${w2utils.lang("Any")}</option>
                    </select>
                </span>
            </div>
            <table cellspacing="0"><tbody>
        `;
    for (let t = 0; t < this.searches.length; t++) {
      var s = this.searches[t];
      if (s.type = String(s.type).toLowerCase(), !s.hidden) {
        null == s.attr && (s.attr = ""), null == s.text && (s.text = ""), null == s.style && (s.style = ""), null == s.type && (s.type = "text"), null == s.label && null != s.caption && (console.log("NOTICE: grid search.caption property is deprecated, please use search.label. Search ->", s), s.label = s.caption);
        var l = `<select id="grid_${this.name}_operator_${t}" class="w2ui-input" data-change="initOperator|${t}">
                    ${this.getOperators(s.type, s.operators)}
                </select>`;
        i += `<tr>
                        <td class="caption">${w2utils.lang(s.label) || ""}</td>
                        <td class="operator">${l}</td>
                        <td class="value">`;
        let e;
        switch (s.type) {
          case "text":
          case "alphanumeric":
          case "hex":
          case "color":
          case "list":
          case "combo":
          case "enum":
            e = "width: 250px;", -1 != ["hex", "color"].indexOf(s.type) && (e = "width: 90px;"), i += `<input rel="search" type="text" id="grid_${this.name}_field_${t}" name="${s.field}"
                               class="w2ui-input" style="${e + s.style}" ${s.attr}>`;
            break;
          case "int":
          case "float":
          case "money":
          case "currency":
          case "percent":
          case "date":
          case "time":
          case "datetime":
            e = "width: 90px;", "datetime" == s.type && (e = "width: 140px;"), i += `<input id="grid_${this.name}_field_${t}" name="${s.field}" ${s.attr} rel="search" type="text"
                                class="w2ui-input" style="${e + s.style}">
                            <span id="grid_${this.name}_range_${t}" style="display: none">&#160;-&#160;&#160;
                                <input rel="search" type="text" class="w2ui-input" style="${e + s.style}" id="grid_${this.name}_field2_${t}" name="${s.field}" ${s.attr}>
                            </span>`;
            break;
          case "select":
            i += `<select rel="search" class="w2ui-input" style="${s.style}" id="grid_${this.name}_field_${t}"
                                name="${s.field}" ${s.attr}></select>`;
        }
        i += s.text + "    </td></tr>";
      }
    }
    return i += `<tr>
            <td colspan="2" class="actions">
                <button type="button" class="w2ui-btn close-btn" data-click="searchClose">${w2utils.lang("Close")}</button>
            </td>
            <td class="actions">
                <button type="button" class="w2ui-btn" data-click="searchReset">${w2utils.lang("Reset")}</button>
                <button type="button" class="w2ui-btn w2ui-btn-blue" data-click="search">${w2utils.lang("Search")}</button>
            </td>
        </tr></tbody></table>`;
  }
  getOperators(e, t) {
    let i = this.operators[this.operatorsMap[e]] || [], s = (null != t && Array.isArray(t) && (i = t), "");
    return i.forEach((e2) => {
      let t2 = e2, i2 = e2;
      Array.isArray(e2) ? (t2 = e2[1], i2 = e2[0]) : w2utils.isPlainObject(e2) && (t2 = e2.text, i2 = e2.oper), null == t2 && (t2 = e2), s += `<option name="11" value="${i2}">${w2utils.lang(t2)}</option>
`;
    }), s;
  }
  initOperator(e) {
    let i;
    var t = this.searches[e], s = this.getSearchData(t.field), l = query(`#w2overlay-${this.name}-search-overlay`), r = l.find(`#grid_${this.name}_range_` + e);
    let a = l.find(`#grid_${this.name}_field_` + e), n = l.find(`#grid_${this.name}_field2_` + e);
    var o = l.find(`#grid_${this.name}_operator_` + e).val();
    switch (a.show(), r.hide(), o) {
      case "between":
        r.show();
        break;
      case "null":
      case "not null":
        a.hide(), a.val(o), a.trigger("change");
    }
    switch (t.type) {
      case "text":
      case "alphanumeric":
        var h = a[0]._w2field;
        h && h.reset();
        break;
      case "int":
      case "float":
      case "hex":
      case "color":
      case "money":
      case "currency":
      case "percent":
      case "date":
      case "time":
      case "datetime":
        a[0]._w2field || (new w2field(t.type, { el: a[0], ...t.options }), new w2field(t.type, { el: n[0], ...t.options }), setTimeout(() => {
          a.trigger("keydown"), n.trigger("keydown");
        }, 1));
        break;
      case "list":
      case "combo":
      case "enum":
        i = t.options, "list" == t.type && (i.selected = {}), "enum" == t.type && (i.selected = []), s && (i.selected = s.value), a[0]._w2field || (h = new w2field(t.type, { el: a[0], ...i }), s && null != s.text && h.set({ id: s.value, text: s.text }));
        break;
      case "select":
        i = '<option value="">--</option>';
        for (let e2 = 0; e2 < t.options.items.length; e2++) {
          var d = t.options.items[e2];
          if (w2utils.isPlainObject(t.options.items[e2])) {
            let e3 = d.id, t2 = d.text;
            null == e3 && null != d.value && (e3 = d.value), null == t2 && null != d.text && (t2 = d.text), null == e3 && (e3 = ""), i += '<option value="' + e3 + '">' + t2 + "</option>";
          } else
            i += '<option value="' + d + '">' + d + "</option>";
        }
        a.html(i);
    }
  }
  initSearches() {
    var s = query(`#w2overlay-${this.name}-search-overlay`);
    for (let t = 0; t < this.searches.length; t++) {
      var l = this.searches[t], r = this.getSearchData(l.field);
      l.type = String(l.type).toLowerCase(), "object" != typeof l.options && (l.options = {});
      let e = l.operator, i = [...this.operators[this.operatorsMap[l.type]]];
      l.operators && (i = l.operators), w2utils.isPlainObject(e) && (e = e.oper), i.forEach((e2, t2) => {
        w2utils.isPlainObject(e2) && (i[t2] = e2.oper);
      }), r && r.operator && (e = r.operator);
      var l = this.defaultOperator[this.operatorsMap[l.type]], l = (-1 == i.indexOf(e) && (e = l), s.find(`#grid_${this.name}_operator_` + t).val(e), this.initOperator(t), s.find(`#grid_${this.name}_field_` + t)), a = s.find(`#grid_${this.name}_field2_` + t);
      null != r && (Array.isArray(r.value) ? ["in", "not in"].includes(r.operator) ? l[0]._w2field.set(r.value) : (l.val(r.value[0]).trigger("change"), a.val(r.value[1]).trigger("change")) : null != r.value && l.val(r.value).trigger("change"));
    }
    s.find(".w2ui-grid-search-advanced *[rel=search]").on("keypress", (e) => {
      13 == e.keyCode && (this.search(), w2tooltip.hide(this.name + "-search-overlay"));
    });
  }
  getColumnsHTML() {
    let h = this, e = "", t = "";
    var i, s, l;
    return this.show.columnHeaders && (t = 0 < this.columnGroups.length ? (l = r(true), i = function() {
      let t2 = "<tr>", s2 = "<tr>", l2 = "", e2 = h.columnGroups.length - 1;
      null == h.columnGroups[e2].text && null != h.columnGroups[e2].caption && (console.log("NOTICE: grid columnGroup.caption property is deprecated, please use columnGroup.text. Group -> ", h.columnGroups[e2]), h.columnGroups[e2].text = h.columnGroups[e2].caption);
      "" != h.columnGroups[h.columnGroups.length - 1].text && h.columnGroups.push({ text: "" });
      h.show.lineNumbers && (t2 += '<td class="w2ui-head w2ui-col-number" col="line-number">    <div>&#160;</div></td>');
      h.show.selectColumn && (t2 += '<td class="w2ui-head w2ui-col-select" col="select">    <div style="height: 25px">&#160;</div></td>');
      h.show.expandColumn && (t2 += '<td class="w2ui-head w2ui-col-expand" col="expand">    <div style="height: 25px">&#160;</div></td>');
      let r2 = 0;
      s2 += `<td id="grid_${h.name}_column_start" class="w2ui-head" col="start" style="border-right: 0"></td>`, h.reorderRows && (s2 += '<td class="w2ui-head w2ui-col-order" col="order">    <div style="height: 25px">&#160;</div></td>');
      for (let e3 = 0; e3 < h.columnGroups.length; e3++) {
        var a = h.columnGroups[e3], n = h.columns[r2] || {};
        null != a.colspan && (a.span = a.colspan), null != a.span && a.span == parseInt(a.span) || (a.span = 1), null == n.text && null != n.caption && (console.log("NOTICE: grid column.caption property is deprecated, please use column.text. Column ->", n), n.text = n.caption);
        let i2 = 0;
        for (let e4 = r2; e4 < r2 + a.span; e4++)
          h.columns[e4] && !h.columns[e4].hidden && i2++;
        if (!((i2 = e3 == h.columnGroups.length - 1 ? 100 : i2) <= 0)) {
          if (true === a.main) {
            let t3 = "";
            for (let e5 = 0; e5 < h.sortData.length; e5++)
              h.sortData[e5].field == n.field && ("asc" === (h.sortData[e5].direction || "").toLowerCase() && (t3 = "w2ui-sort-up"), "desc" === (h.sortData[e5].direction || "").toLowerCase()) && (t3 = "w2ui-sort-down");
            let e4 = "";
            false !== n.resizable && (e4 = `<div class="w2ui-resizer" name="${r2}"></div>`);
            var o = w2utils.lang("function" == typeof n.text ? n.text(n) : n.text);
            l2 = `<td id="grid_${h.name}_column_${r2}" class="w2ui-head ${t3}" col="${r2}"     rowspan="2" colspan="${i2}">` + e4 + `    <div class="w2ui-col-group w2ui-col-header ${t3 ? "w2ui-col-sorted" : ""}">        <div class="${t3}"></div>` + (o || "&#160;") + "    </div></td>";
          } else {
            o = w2utils.lang("function" == typeof a.text ? a.text(a) : a.text);
            l2 = `<td id="grid_${h.name}_column_${r2}" class="w2ui-head" col="${r2}" colspan="${i2}">    <div class="w2ui-col-group" style="${a.style ?? ""}">${o || "&#160;"}</div></td>`;
          }
          n && n.frozen ? t2 += l2 : s2 += l2;
        }
        r2 += a.span;
      }
      return t2 += "<td></td></tr>", s2 += `<td id="grid_${h.name}_column_end" class="w2ui-head" col="end"></td></tr>`, [t2, s2];
    }(), s = r(false), e = l[0] + i[0] + s[0], l[1] + i[1] + s[1]) : (l = r(true), e = l[0], l[1])), [e, t];
    function r(t2) {
      let i2 = "<tr>", s2 = "<tr>", l2 = (h.show.lineNumbers && (i2 += '<td class="w2ui-head w2ui-col-number" col="line-number">    <div>#</div></td>'), h.show.selectColumn && (i2 += `<td class="w2ui-head w2ui-col-select" col="select">    <div>        <input type="checkbox" id="grid_${h.name}_check_all" class="w2ui-select-all" tabindex="-1"            style="${0 == h.multiSelect ? "display: none;" : ""}"        >    </div></td>`), h.show.expandColumn && (i2 += '<td class="w2ui-head w2ui-col-expand" col="expand">    <div>&#160;</div></td>'), 0), r2 = 0, a;
      s2 += `<td id="grid_${h.name}_column_start" class="w2ui-head" col="start" style="border-right: 0"></td>`, h.reorderRows && (s2 += '<td class="w2ui-head w2ui-col-order" col="order">    <div>&#160;</div></td>');
      for (let e2 = 0; e2 < h.columns.length; e2++) {
        var n, o = h.columns[e2];
        null == o.text && null != o.caption && (console.log("NOTICE: grid column.caption property is deprecated, please use column.text. Column -> ", o), o.text = o.caption), null == o.size && (o.size = "100%"), e2 == r2 && (a = h.columnGroups[l2++] || {}, r2 += a.span), (e2 < h.last.colStart || e2 > h.last.colEnd) && !o.frozen || o.hidden || true === a.main && !t2 || (n = h.getColumnCellHTML(e2), o && o.frozen ? i2 += n : s2 += n);
      }
      return i2 += '<td class="w2ui-head w2ui-head-last"><div>&#160;</div></td>', s2 += '<td class="w2ui-head w2ui-head-last" col="end"><div>&#160;</div></td>', i2 += "</tr>", s2 += "</tr>", [i2, s2];
    }
  }
  getColumnCellHTML(t) {
    var i = this.columns[t];
    if (null == i)
      return "";
    var e = !this.reorderColumns || this.columnGroups && this.columnGroups.length ? "" : " w2ui-col-reorderable ";
    let s = "";
    for (let e2 = 0; e2 < this.sortData.length; e2++)
      this.sortData[e2].field == i.field && ("asc" === (this.sortData[e2].direction || "").toLowerCase() && (s = "w2ui-sort-up"), "desc" === (this.sortData[e2].direction || "").toLowerCase()) && (s = "w2ui-sort-down");
    var l, r = this.last.selection.columns;
    let a = false;
    for (l in r)
      for (let e2 = 0; e2 < r[l].length; e2++)
        r[l][e2] == t && (a = true);
    var n = w2utils.lang("function" == typeof i.text ? i.text(i) : i.text);
    return '<td id="grid_' + this.name + "_column_" + t + '" col="' + t + '" class="w2ui-head ' + s + e + '">' + (false !== i.resizable ? '<div class="w2ui-resizer" name="' + t + '"></div>' : "") + '    <div class="w2ui-col-header ' + (s ? "w2ui-col-sorted" : "") + " " + (a ? "w2ui-col-selected" : "") + '">        <div class="' + s + '"></div>' + (n || "&#160;") + "    </div></td>";
  }
  columnTooltipShow(e, t) {
    var i = query(this.box).find("#grid_" + this.name + "_column_" + e), e = this.columns[e], s = this.columnTooltip;
    w2tooltip.show({ name: this.name + "-column-tooltip", anchor: i.get(0), html: e == null ? void 0 : e.tooltip, position: s });
  }
  columnTooltipHide(e, t) {
    w2tooltip.hide(this.name + "-column-tooltip");
  }
  getRecordsHTML() {
    var _a;
    let e = this.records.length;
    var t = "object" != typeof this.url ? this.url : this.url.get, t = ((e = 0 == this.searchData.length || t ? e : this.last.searchIds.length) > this.vs_start ? this.last.show_extra = this.vs_extra : this.last.show_extra = this.vs_start, query(this.box).find(`#grid_${this.name}_records`));
    let i = Math.floor((((_a = t.get(0)) == null ? void 0 : _a.clientHeight) || 0) / this.recordHeight) + this.last.show_extra + 1;
    (!this.fixedBody || i > e) && (i = e);
    var s = this.getRecordHTML(-1, 0);
    let l = "<table><tbody>" + s[0], r = "<table><tbody>" + s[1];
    l += '<tr id="grid_' + this.name + '_frec_top" line="top" style="height: 0px">    <td colspan="2000"></td></tr>', r += '<tr id="grid_' + this.name + '_rec_top" line="top" style="height: 0px">    <td colspan="2000"></td></tr>';
    for (let e2 = 0; e2 < i; e2++)
      s = this.getRecordHTML(e2, e2 + 1), l += s[0], r += s[1];
    t = (e - i) * this.recordHeight;
    return l += '<tr id="grid_' + this.name + '_frec_bottom" rec="bottom" line="bottom" style="height: ' + t + 'px; vertical-align: top">    <td colspan="2000" style="border-right: 1px solid #D6D5D7;"></td></tr><tr id="grid_' + this.name + '_frec_more" style="display: none; ">    <td colspan="2000" class="w2ui-load-more"></td></tr></tbody></table>', r += '<tr id="grid_' + this.name + '_rec_bottom" rec="bottom" line="bottom" style="height: ' + t + 'px; vertical-align: top">    <td colspan="2000" style="border: 0"></td></tr><tr id="grid_' + this.name + '_rec_more" style="display: none">    <td colspan="2000" class="w2ui-load-more"></td></tr></tbody></table>', this.last.range_start = 0, this.last.range_end = i, [l, r];
  }
  getSummaryHTML() {
    if (0 !== this.summary.length) {
      var s = this.getRecordHTML(-1, 0);
      let t = "<table><tbody>" + s[0], i = "<table><tbody>" + s[1];
      for (let e = 0; e < this.summary.length; e++)
        s = this.getRecordHTML(e, e + 1, true), t += s[0], i += s[1];
      return t += "</tbody></table>", i += "</tbody></table>", [t, i];
    }
  }
  scroll(o) {
    let h = this;
    var i = "object" != typeof this.url ? this.url : this.url.get, d = query(this.box).find(`#grid_${this.name}_records`), u = query(this.box).find(`#grid_${this.name}_frecords`);
    o && (w = o.target.scrollTop, o = o.target.scrollLeft, this.last.scrollTop = w, this.last.scrollLeft = o, c = query(this.box).find(`#grid_${this.name}_columns`)[0], p = query(this.box).find(`#grid_${this.name}_summary`)[0], c && (c.scrollLeft = o), p && (p.scrollLeft = o), u[0]) && (u[0].scrollTop = w), this.last.bubbleEl && (w2tooltip.hide(this.name + "-bubble"), this.last.bubbleEl = null);
    let l = null, r = null;
    if (this.disableCVS || 0 < this.columnGroups.length)
      l = 0, r = this.columns.length - 1;
    else {
      var s, a = d.prop("clientWidth");
      let t2 = 0;
      for (let e2 = 0; e2 < this.columns.length; e2++)
        this.columns[e2].frozen || this.columns[e2].hidden || (s = parseInt(this.columns[e2].sizeCalculated || this.columns[e2].size), t2 + s + 30 > this.last.scrollLeft && null == l && (l = e2), t2 + s - 30 > this.last.scrollLeft + a && null == r && (r = e2), t2 += s);
      null == r && (r = this.columns.length - 1);
    }
    if (null != l && (l < 0 && (l = 0), r < 0 && (r = 0), l == r && (0 < l ? l-- : r++), l != this.last.colStart || r != this.last.colEnd)) {
      var n = query(this.box), c = Math.abs(l - this.last.colStart), p = Math.abs(r - this.last.colEnd);
      if (c < 5 && p < 5) {
        var e = n.find(`.w2ui-grid-columns #grid_${this.name}_column_start`), t = n.find(".w2ui-grid-columns .w2ui-head-last"), f = n.find(`#grid_${this.name}_records .w2ui-grid-data-spacer`), m = n.find(`#grid_${this.name}_records .w2ui-grid-data-last`), g = n.find(`#grid_${this.name}_summary .w2ui-grid-data-spacer`), y = n.find(`#grid_${this.name}_summary .w2ui-grid-data-last`);
        if (l > this.last.colStart)
          for (let e2 = this.last.colStart; e2 < l; e2++)
            n.find("#grid_" + this.name + "_columns #grid_" + this.name + "_column_" + e2).remove(), n.find("#grid_" + this.name + '_records td[col="' + e2 + '"]').remove(), n.find("#grid_" + this.name + '_summary td[col="' + e2 + '"]').remove();
        if (r < this.last.colEnd)
          for (let e2 = this.last.colEnd; e2 > r; e2--)
            n.find("#grid_" + this.name + "_columns #grid_" + this.name + "_column_" + e2).remove(), n.find("#grid_" + this.name + '_records td[col="' + e2 + '"]').remove(), n.find("#grid_" + this.name + '_summary td[col="' + e2 + '"]').remove();
        if (l < this.last.colStart)
          for (let s2 = this.last.colStart - 1; s2 >= l; s2--)
            this.columns[s2] && (this.columns[s2].frozen || this.columns[s2].hidden) || (e.after(this.getColumnCellHTML(s2)), f.each((e2) => {
              var t2 = query(e2).parent().attr("index");
              let i2 = '<td class="w2ui-grid-data" col="' + s2 + '" style="height: 0px"></td>';
              null != t2 && (i2 = this.getCellHTML(parseInt(t2), s2, false)), query(e2).after(i2);
            }), g.each((e2) => {
              var t2 = query(e2).parent().attr("index");
              let i2 = '<td class="w2ui-grid-data" col="' + s2 + '" style="height: 0px"></td>';
              null != t2 && (i2 = this.getCellHTML(parseInt(t2), s2, true)), query(e2).after(i2);
            }));
        if (r > this.last.colEnd)
          for (let s2 = this.last.colEnd + 1; s2 <= r; s2++)
            this.columns[s2] && (this.columns[s2].frozen || this.columns[s2].hidden) || (t.before(this.getColumnCellHTML(s2)), m.each((e2) => {
              var t2 = query(e2).parent().attr("index");
              let i2 = '<td class="w2ui-grid-data" col="' + s2 + '" style="height: 0px"></td>';
              null != t2 && (i2 = this.getCellHTML(parseInt(t2), s2, false)), query(e2).before(i2);
            }), y.each((e2) => {
              var t2 = query(e2).parent().attr("index") || -1, t2 = this.getCellHTML(parseInt(t2), s2, true);
              query(e2).before(t2);
            }));
        this.last.colStart = l, this.last.colEnd = r;
      } else {
        this.last.colStart = l, this.last.colEnd = r;
        var o = this.getColumnsHTML(), w = this.getRecordsHTML(), c = this.getSummaryHTML(), p = n.find(`#grid_${this.name}_columns`);
        let e2 = n.find(`#grid_${this.name}_records`);
        var b = n.find(`#grid_${this.name}_frecords`);
        let t2 = n.find(`#grid_${this.name}_summary`);
        p.find("tbody").html(o[1]), b.html(w[0]), e2.prepend(w[1]), null != c && t2.html(c[1]), setTimeout(() => {
          e2.find(":scope > table").filter(":not(table:first-child)").remove(), t2[0] && (t2[0].scrollLeft = this.last.scrollLeft);
        }, 1);
      }
      this.resizeRecords();
    }
    let v = this.records.length;
    if (v > this.total && -1 !== this.total && (v = this.total), 0 !== (v = 0 == this.searchData.length || i ? v : this.last.searchIds.length) && 0 !== d.length && 0 !== d.prop("clientHeight")) {
      v > this.vs_start ? this.last.show_extra = this.vs_extra : this.last.show_extra = this.vs_start;
      let e2 = Math.round(d.prop("scrollTop") / this.recordHeight + 1), t2 = e2 + (Math.round(d.prop("clientHeight") / this.recordHeight) - 1);
      if (e2 > v && (e2 = v), t2 >= v - 1 && (t2 = v), query(this.box).find("#grid_" + this.name + "_footer .w2ui-footer-right").html((this.show.statusRange ? w2utils.formatNumber(this.offset + e2) + "-" + w2utils.formatNumber(this.offset + t2) + (-1 != this.total ? " " + w2utils.lang("of") + " " + w2utils.formatNumber(this.total) : "") : "") + (i && this.show.statusBuffered ? " (" + w2utils.lang("buffered") + " " + w2utils.formatNumber(v) + (0 < this.offset ? ", skip " + w2utils.formatNumber(this.offset) : "") + ")" : "")), i || this.fixedBody && !(-1 != this.total && this.total <= this.vs_start)) {
        let k = function() {
          h.markSearch && (clearTimeout(h.last.marker_timer), h.last.marker_timer = setTimeout(() => {
            var t4 = [];
            for (let e4 = 0; e4 < h.searchData.length; e4++) {
              var i3 = h.searchData[e4], s3 = h.getSearch(i3.field);
              s3 && !s3.hidden && (s3 = h.getColumn(i3.field, true), t4.push({ field: i3.field, search: i3.value, col: s3 }));
            }
            0 < t4.length && t4.forEach((e4) => {
              var t5 = query(h.box).find('td[col="' + e4.col + '"]:not(.w2ui-head)');
              w2utils.marker(t5, e4.search);
            });
          }, 50));
        };
        let t3 = Math.floor(d.prop("scrollTop") / this.recordHeight) - this.last.show_extra, i2 = t3 + Math.floor(d.prop("clientHeight") / this.recordHeight) + 2 * this.last.show_extra + 1;
        t3 < 1 && (t3 = 1), i2 > this.total && -1 != this.total && (i2 = this.total);
        var x = d.find("#grid_" + this.name + "_rec_top"), _ = d.find("#grid_" + this.name + "_rec_bottom"), q = u.find("#grid_" + this.name + "_frec_top"), C = u.find("#grid_" + this.name + "_frec_bottom"), p = (-1 != String(x.next().prop("id")).indexOf("_expanded_row") && (x.next().remove(), q.next().remove()), this.total > i2 && -1 != String(_.prev().prop("id")).indexOf("_expanded_row") && (_.prev().remove(), C.prev().remove()), parseInt(x.next().attr("line"))), o = parseInt(_.prev().attr("line"));
        let e3, s2, l2, r2, a2;
        if (p < t3 || 1 == p || this.last.pull_refresh) {
          if (i2 <= o + this.last.show_extra - 2 && i2 != this.total)
            return;
          for (this.last.pull_refresh = false; ; ) {
            if (s2 = u.find("#grid_" + this.name + "_frec_top").next(), "bottom" == (l2 = d.find("#grid_" + this.name + "_rec_top").next()).attr("line"))
              break;
            if (!(parseInt(l2.attr("line")) < t3))
              break;
            s2.remove(), l2.remove();
          }
          e3 = d.find("#grid_" + this.name + "_rec_bottom").prev(), "top" == (r2 = e3.attr("line")) && (r2 = t3);
          for (let e4 = parseInt(r2) + 1; e4 <= i2; e4++)
            this.records[e4 - 1] && ((l2 = this.records[e4 - 1].w2ui) && !Array.isArray(l2.children) && (l2.expanded = false), a2 = this.getRecordHTML(e4 - 1, e4), _.before(a2[1]), C.before(a2[0]));
        } else {
          if (t3 >= p - this.last.show_extra + 2 && 1 < t3)
            return;
          for (; ; ) {
            if (s2 = u.find("#grid_" + this.name + "_frec_bottom").prev(), "top" == (l2 = d.find("#grid_" + this.name + "_rec_bottom").prev()).attr("line"))
              break;
            if (!(parseInt(l2.attr("line")) > i2))
              break;
            s2.remove(), l2.remove();
          }
          e3 = d.find("#grid_" + this.name + "_rec_top").next(), "bottom" == (r2 = e3.attr("line")) && (r2 = i2);
          for (let e4 = parseInt(r2) - 1; e4 >= t3; e4--)
            this.records[e4 - 1] && ((l2 = this.records[e4 - 1].w2ui) && !Array.isArray(l2.children) && (l2.expanded = false), a2 = this.getRecordHTML(e4 - 1, e4), x.after(a2[1]), q.after(a2[0]));
        }
        k(), setTimeout(() => {
          this.refreshRanges();
        }, 0);
        b = (t3 - 1) * this.recordHeight;
        let n2 = (v - i2) * this.recordHeight;
        n2 < 0 && (n2 = 0), x.css("height", b + "px"), q.css("height", b + "px"), _.css("height", n2 + "px"), C.css("height", n2 + "px"), this.last.range_start = t3, this.last.range_end = i2, Math.floor(d.prop("scrollTop") / this.recordHeight) + Math.floor(d.prop("clientHeight") / this.recordHeight) + 10 > v && true !== this.last.pull_more && (v < this.total - this.offset || -1 == this.total && this.last.fetch.hasMore) && (true === this.autoLoad && (this.last.pull_more = true, this.last.fetch.offset += this.limit, this.request("load")), query(this.box).find("#grid_" + this.name + "_rec_more, #grid_" + this.name + "_frec_more").show().eq(1).off(".load-more").on("click.load-more", function() {
          query(this).find("td").html('<div><div style="width: 20px; height: 20px;" class="w2ui-spinner"></div></div>'), h.last.pull_more = true, h.last.fetch.offset += h.limit, h.request("load");
        }).find("td").html(h.autoLoad ? '<div><div style="width: 20px; height: 20px;" class="w2ui-spinner"></div></div>' : '<div style="padding-top: 15px">' + w2utils.lang("Load ${count} more...", { count: h.limit }) + "</div>"));
      }
    }
  }
  getRecordHTML(r, a, n) {
    var _a, _b, _c, _d, _e;
    let o = "", h = "";
    var d = this.last.selection;
    let u;
    if (-1 == r) {
      o += '<tr line="0">', h += '<tr line="0">', this.show.lineNumbers && (o += '<td class="w2ui-col-number" style="height: 0px"></td>'), this.show.selectColumn && (o += '<td class="w2ui-col-select" style="height: 0px"></td>'), this.show.expandColumn && (o += '<td class="w2ui-col-expand" style="height: 0px"></td>'), h += '<td class="w2ui-grid-data w2ui-grid-data-spacer" col="start" style="height: 0px; width: 0px"></td>', this.reorderRows && (h += '<td class="w2ui-col-order" style="height: 0px"></td>');
      for (let e = 0; e < this.columns.length; e++) {
        var t = this.columns[e], i = '<td class="w2ui-grid-data" col="' + e + '" style="height: 0px;"></td>';
        t.frozen && !t.hidden ? o += i : t.hidden || e < this.last.colStart || e > this.last.colEnd || (h += i);
      }
      o += '<td class="w2ui-grid-data-last" style="height: 0px"></td>', h += '<td class="w2ui-grid-data-last" col="end" style="height: 0px"></td>';
    } else {
      var c = "object" != typeof this.url ? this.url : this.url.get;
      if (true !== n) {
        if (0 < this.searchData.length && !c) {
          if (r >= this.last.searchIds.length)
            return "";
          r = this.last.searchIds[r];
        } else if (r >= this.records.length)
          return "";
        u = this.records[r];
      } else {
        if (r >= this.summary.length)
          return "";
        u = this.summary[r];
      }
      if (!u)
        return "";
      null == u.recid && null != this.recid && null != (c = this.parseField(u, this.recid)) && (u.recid = c);
      let e = false, t2 = (-1 != d.indexes.indexOf(r) && (e = true), u.w2ui ? u.w2ui.style : ""), i2 = (null != t2 && "string" == typeof t2 || (t2 = ""), u.w2ui ? u.w2ui.class : "");
      if (null != i2 && "string" == typeof i2 || (i2 = ""), o += '<tr id="grid_' + this.name + "_frec_" + u.recid + '" recid="' + u.recid + '" line="' + a + '" index="' + r + '"  class="' + (a % 2 == 0 ? "w2ui-even" : "w2ui-odd") + " w2ui-record " + i2 + (e && "row" == this.selectType ? " w2ui-selected" : "") + (u.w2ui && false === u.w2ui.editable ? " w2ui-no-edit" : "") + (u.w2ui && true === u.w2ui.expanded ? " w2ui-expanded" : "") + '"  style="height: ' + this.recordHeight + "px; " + (e || "" == t2 ? t2.replace("background-color", "none") : t2) + '" ' + ("" != t2 ? 'custom_style="' + t2 + '"' : "") + ">", h += '<tr id="grid_' + this.name + "_rec_" + u.recid + '" recid="' + u.recid + '" line="' + a + '" index="' + r + '"  class="' + (a % 2 == 0 ? "w2ui-even" : "w2ui-odd") + " w2ui-record " + i2 + (e && "row" == this.selectType ? " w2ui-selected" : "") + (u.w2ui && false === u.w2ui.editable ? " w2ui-no-edit" : "") + (u.w2ui && true === u.w2ui.expanded ? " w2ui-expanded" : "") + '"  style="height: ' + this.recordHeight + "px; " + (e || "" == t2 ? t2.replace("background-color", "none") : t2) + '" ' + ("" != t2 ? 'custom_style="' + t2 + '"' : "") + ">", this.show.lineNumbers && (o += '<td id="grid_' + this.name + "_cell_" + r + "_number" + (n ? "_s" : "") + '"    class="w2ui-col-number ' + (e ? " w2ui-row-selected" : "") + '"' + (this.reorderRows ? ' style="cursor: move"' : "") + ">" + (true !== n ? this.getLineHTML(a, u) : "") + "</td>"), this.show.selectColumn && (o += '<td id="grid_' + this.name + "_cell_" + r + "_select" + (n ? "_s" : "") + '" class="w2ui-grid-data w2ui-col-select">' + (true === n || u.w2ui && true === u.w2ui.hideCheckBox ? "" : '    <div>        <input class="w2ui-grid-select-check" type="checkbox" tabindex="-1" ' + (e ? 'checked="checked"' : "") + ' style="pointer-events: none"/>    </div>') + "</td>"), this.show.expandColumn) {
        let e2 = "";
        e2 = true === ((_a = u.w2ui) == null ? void 0 : _a.expanded) ? "-" : "+", "none" != ((_b = u.w2ui) == null ? void 0 : _b.expanded) && Array.isArray((_c = u.w2ui) == null ? void 0 : _c.children) && ((_d = u.w2ui) == null ? void 0 : _d.children.length) || (e2 = "+"), "spinner" == ((_e = u.w2ui) == null ? void 0 : _e.expanded) && (e2 = '<div class="w2ui-spinner" style="width: 16px; margin: -2px 2px;"></div>'), o += '<td id="grid_' + this.name + "_cell_" + r + "_expand" + (n ? "_s" : "") + '" class="w2ui-grid-data w2ui-col-expand">' + (true !== n ? `<div>${e2}</div>` : "") + "</td>";
      }
      h += '<td class="w2ui-grid-data-spacer" col="start" style="border-right: 0"></td>', this.reorderRows && (h += '<td id="grid_' + this.name + "_cell_" + r + "_order" + (n ? "_s" : "") + '" class="w2ui-grid-data w2ui-col-order" col="order">' + (true !== n ? '<div title="Drag to reorder">&nbsp;</div>' : "") + "</td>");
      let s = 0, l = 0;
      for (; ; ) {
        let e2 = 1;
        var p, f = this.columns[s];
        if (null == f)
          break;
        if (f.hidden)
          s++, 0 < l && l--;
        else if (0 < l) {
          if (s++, null == this.columns[s])
            break;
          u.w2ui.colspan[this.columns[s - 1].field] = 0, l--;
        } else {
          if (u.w2ui && (g = u.w2ui.colspan, p = this.columns[s].field, g) && 0 === g[p] && delete g[p], !(s < this.last.colStart || s > this.last.colEnd) || f.frozen) {
            if (u.w2ui && "object" == typeof u.w2ui.colspan) {
              var m = parseInt(u.w2ui.colspan[f.field]) || null;
              if (1 < m) {
                let t3 = 0;
                for (let e3 = s; e3 < s + m && !(e3 >= this.columns.length); e3++)
                  this.columns[e3].hidden && t3++;
                e2 = m - t3, l = m - 1;
              }
            }
            var g = this.getCellHTML(r, s, n, e2);
            f.frozen ? o += g : h += g;
          }
          s++;
        }
      }
      o += '<td class="w2ui-grid-data-last"></td>', h += '<td class="w2ui-grid-data-last" col="end"></td>';
    }
    return o += "</tr>", h += "</tr>", [o, h];
  }
  getLineHTML(e) {
    return "<div>" + e + "</div>";
  }
  getCellHTML(i, s, l, e) {
    var _a, _b, _c, _d;
    let r = this, a = this.columns[s];
    if (null == a)
      return "";
    let n = (true !== l ? this.records : this.summary)[i], { value: t, style: o, className: h, attr: d, divAttr: u } = this.getCellValue(i, s, l, true);
    var c = -1 !== i ? this.getCellEditable(i, s) : "";
    let p = "max-height: " + parseInt(this.recordHeight) + "px;" + (a.clipboardCopy ? "margin-right: 20px" : "");
    var f = !l && ((_a = n == null ? void 0 : n.w2ui) == null ? void 0 : _a.changes) && null != n.w2ui.changes[a.field], m = this.last.selection;
    let g = false, y = "";
    if (-1 != m.indexes.indexOf(i) && (g = true), null == e && (e = ((_b = n == null ? void 0 : n.w2ui) == null ? void 0 : _b.colspan) && n.w2ui.colspan[a.field] ? n.w2ui.colspan[a.field] : 1), 0 === s && Array.isArray((_c = n == null ? void 0 : n.w2ui) == null ? void 0 : _c.children)) {
      let t2 = 0, e2 = this.get(n.w2ui.parent_recid, true);
      for (; ; ) {
        if (null == e2)
          break;
        t2++;
        var w = this.records[e2].w2ui;
        if (null == w || null == w.parent_recid)
          break;
        e2 = this.get(w.parent_recid, true);
      }
      if (n.w2ui.parent_recid)
        for (let e3 = 0; e3 < t2; e3++)
          y += '<span class="w2ui-show-children w2ui-icon-empty"></span>';
      var b = 0 < n.w2ui.children.length ? n.w2ui.expanded ? "w2ui-icon-collapse" : "w2ui-icon-expand" : "w2ui-icon-empty";
      y += `<span class="w2ui-show-children ${b}"></span>`;
    }
    if (true === a.info && (a.info = {}), null != a.info) {
      let e2 = "w2ui-icon-info", t2 = ("function" == typeof a.info.icon ? e2 = a.info.icon(n, { self: this, index: i, colIndex: s, summary: !!l }) : "object" == typeof a.info.icon ? e2 = a.info.icon[this.parseField(n, a.field)] || "" : "string" == typeof a.info.icon && (e2 = a.info.icon), a.info.style || "");
      "function" == typeof a.info.style ? t2 = a.info.style(n, { self: this, index: i, colIndex: s, summary: !!l }) : "object" == typeof a.info.style ? t2 = a.info.style[this.parseField(n, a.field)] || "" : "string" == typeof a.info.style && (t2 = a.info.style), y += `<span class="w2ui-info ${e2}" style="${t2}"></span>`;
    }
    let v = t, x = (c && -1 != ["checkbox", "check"].indexOf(c.type) && (p += "text-align: center;", v = `<input tabindex="-1" type="checkbox" class="w2ui-editable-checkbox"
                            data-changeInd="${l ? -(i + 1) : i}" data-colInd="${s}" ${v ? 'checked="checked"' : ""}>`, y = ""), null == (v = `<div style="${p}" ${function(e2) {
      let t2;
      r.show.recordTitles && (null != a.title ? ("function" == typeof a.title && (t2 = a.title.call(r, n, { self: this, index: i, colIndex: s, summary: !!l })), "string" == typeof a.title && (t2 = a.title)) : t2 = w2utils.stripTags(String(e2).replace(/"/g, "''")));
      return null != t2 ? 'title="' + String(t2) + '"' : "";
    }(v)} ${u}>${y}${String(v)}</div>`) && (v = ""), "string" == typeof a.render && (b = a.render.toLowerCase().split(":"), -1 != ["number", "int", "float", "money", "currency", "percent", "size"].indexOf(b[0])) && (o += "text-align: right;"), (n == null ? void 0 : n.w2ui) && ("object" == typeof n.w2ui.style && ("string" == typeof n.w2ui.style[s] && (o += n.w2ui.style[s] + ";"), "string" == typeof n.w2ui.style[a.field]) && (o += n.w2ui.style[a.field] + ";"), "object" == typeof n.w2ui.class) && ("string" == typeof n.w2ui.class[s] && (h += n.w2ui.class[s] + " "), "string" == typeof n.w2ui.class[a.field]) && (h += n.w2ui.class[a.field] + " "), false);
    g && ((_d = m.columns[i]) == null ? void 0 : _d.includes(s)) && (x = true);
    let _;
    return a.clipboardCopy && (_ = '<span class="w2ui-clipboard-copy w2ui-icon-paste"></span>'), v = '<td class="w2ui-grid-data' + (x ? " w2ui-selected" : "") + " " + h + (f ? " w2ui-changed" : "") + '"    id="grid_' + this.name + "_data_" + i + "_" + s + '" col="' + s + '"    style="' + o + (null != a.style ? a.style : "") + '" ' + (null != a.attr ? a.attr : "") + d + (1 < e ? 'colspan="' + e + '"' : "") + ">" + v + (_ && w2utils.stripTags(v) ? _ : "") + "</td>", v = -1 === i && true === l ? '<td class="w2ui-grid-data" col="' + s + '" style="height: 0px; ' + o + '" ' + (1 < e ? 'colspan="' + e + '"' : "") + "></td>" : v;
  }
  clipboardCopy(e, t, i) {
    var s = (i ? this.summary : this.records)[e], l = this.columns[t];
    let r = l ? this.parseField(s, l.field) : "";
    "function" == typeof l.clipboardCopy && (r = l.clipboardCopy(s, { self: this, index: e, colIndex: t, summary: !!i })), query(this.box).find("#grid_" + this.name + "_focus").text(r).get(0).select(), document.execCommand("copy");
  }
  showBubble(s, l, r) {
    var a = this.columns[l].info;
    if (a) {
      let i = "";
      var n = this.records[s], e = query(this.box).find(`${r ? ".w2ui-grid-summary" : ""} #grid_${this.name}_data_${s}_${l} .w2ui-info`);
      if (this.last.bubbleEl && w2tooltip.hide(this.name + "-bubble"), this.last.bubbleEl = e, null == a.fields) {
        a.fields = [];
        for (let e2 = 0; e2 < this.columns.length; e2++) {
          var o = this.columns[e2];
          a.fields.push(o.field + ("string" == typeof o.render ? ":" + o.render : ""));
        }
      }
      let t = a.fields;
      if ("function" == typeof t && (t = t(n, { self: this, index: s, colIndex: l, summary: !!r })), "function" == typeof a.render)
        i = a.render(n, { self: this, index: s, colIndex: l, summary: !!r });
      else if (Array.isArray(t)) {
        i = '<table cellpadding="0" cellspacing="0">';
        for (let e2 = 0; e2 < t.length; e2++) {
          var h = String(t[e2]).split(":");
          if ("" == h[0] || "-" == h[0] || "--" == h[0] || "---" == h[0])
            i += '<tr><td colspan=2><div style="border-top: ' + ("" == h[0] ? "0" : "1") + 'px solid #C1BEBE; margin: 6px 0px;"></div></td></tr>';
          else {
            let e3 = this.getColumn(h[0]), t2 = (e3 = null == e3 ? { field: h[0], caption: h[0] } : e3) ? this.parseField(n, e3.field) : "";
            1 < h.length && (w2utils.formatters[h[1]] ? t2 = w2utils.formatters[h[1]](t2, h[2] || null, n) : console.log('ERROR: w2utils.formatters["' + h[1] + '"] does not exists.')), (true === a.showEmpty || null != t2 && "" != t2) && (null != a.maxLength && "string" == typeof t2 && t2.length > a.maxLength && (t2 = t2.substr(0, a.maxLength) + "..."), i += "<tr><td>" + e3.text + "</td><td>" + ((0 === t2 ? "0" : t2) || "") + "</td></tr>");
          }
        }
        i += "</table>";
      } else if (w2utils.isPlainObject(t)) {
        for (var d in i = '<table cellpadding="0" cellspacing="0">', t) {
          var u = t[d];
          if ("" == u || "-" == u || "--" == u || "---" == u)
            i += '<tr><td colspan=2><div style="border-top: ' + ("" == u ? "0" : "1") + 'px solid #C1BEBE; margin: 6px 0px;"></div></td></tr>';
          else {
            var c = String(u).split(":");
            let e2 = this.getColumn(c[0]), t2 = (e2 = null == e2 ? { field: c[0], caption: c[0] } : e2) ? this.parseField(n, e2.field) : "";
            1 < c.length && (w2utils.formatters[c[1]] ? t2 = w2utils.formatters[c[1]](t2, c[2] || null, n) : console.log('ERROR: w2utils.formatters["' + c[1] + '"] does not exists.')), "function" == typeof u && (t2 = u(n, { self: this, index: s, colIndex: l, summary: !!r })), (true === a.showEmpty || null != t2 && "" != t2) && (null != a.maxLength && "string" == typeof t2 && t2.length > a.maxLength && (t2 = t2.substr(0, a.maxLength) + "..."), i += "<tr><td>" + d + "</td><td>" + ((0 === t2 ? "0" : t2) || "") + "</td></tr>");
          }
        }
        i += "</table>";
      }
      return w2tooltip.show(w2utils.extend({ name: this.name + "-bubble", html: i, anchor: e.get(0), position: "top|bottom", class: "w2ui-info-bubble", style: "", hideOn: ["doc-click"] }, a.options ?? {})).hide(() => [this.last.bubbleEl = null]);
    }
  }
  getCellEditable(e, t) {
    var i = this.columns[t], s = this.records[e];
    if (!s || !i)
      return null;
    let l = s.w2ui ? s.w2ui.editable : null;
    return false === l ? null : (null != l && true !== l || "function" == typeof (l = 0 < Object.keys(i.editable ?? {}).length ? i.editable : null) && (i = this.getCellValue(e, t, false), l = l.call(this, s, { self: this, value: i, index: e, colIndex: t })), l);
  }
  getCellValue(t, i, s, e) {
    var _a, _b;
    var l = this.columns[i], r = (true !== s ? this.records : this.summary)[t];
    let a = this.parseField(r, l.field), n = "", o = "", h = "", d = "";
    if (null != ((_b = (_a = r == null ? void 0 : r.w2ui) == null ? void 0 : _a.changes) == null ? void 0 : _b[l.field]) && (a = r.w2ui.changes[l.field]), null != l.render && -1 !== t) {
      if ("function" == typeof l.render && null != r) {
        let e2;
        try {
          e2 = l.render(r, { self: this, value: a, index: t, colIndex: i, summary: !!s });
        } catch (e3) {
          throw new Error(`Render function for column "${l.field}" in grid "${this.name}": -- ` + e3.message);
        }
        null != e2 && "object" == typeof e2 && "function" != typeof e2 ? (null != e2.id && null != e2.text ? a = e2.text : "string" == typeof e2.html ? a = (e2.html || "").trim() : (a = "", console.log("ERROR: render function should return a primitive or an object of the following structure.", { html: "", attr: "", style: "", class: "", divAttr: "" })), h = e2.attr ?? "", o = e2.style ?? "", n = e2.class ?? "", d = e2.divAttr ?? "") : a = String(e2 || "").trim();
      }
      if ("object" == typeof l.render && null != (t = l.render[a]) && "" !== t && (a = t), "string" == typeof l.render) {
        i = l.render.toLowerCase().indexOf(":"), s = [];
        -1 == i ? (s[0] = l.render.toLowerCase(), s[1] = "") : (s[0] = l.render.toLowerCase().substr(0, i), s[1] = l.render.toLowerCase().substr(i + 1));
        let e2 = w2utils.formatters[s[0]];
        l.options && false === l.options.autoFormat && (e2 = null), a = "function" == typeof e2 ? e2(a, s[1], r) : "";
      }
    }
    return null == a && (a = ""), e ? { value: a, attr: h, style: o, className: n, divAttr: d } : a;
  }
  getFooterHTML() {
    return '<div>    <div class="w2ui-footer-left"></div>    <div class="w2ui-footer-right"></div>    <div class="w2ui-footer-center"></div></div>';
  }
  status(i) {
    if (null != i)
      query(this.box).find(`#grid_${this.name}_footer`).find(".w2ui-footer-left").html(i);
    else {
      let t = "";
      i = this.getSelection();
      if (0 < i.length && (this.show.statusSelection && 1 < i.length && (t = String(i.length).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + w2utils.settings.groupSymbol) + " " + w2utils.lang("selected")), this.show.statusRecordID) && 1 == i.length) {
        let e = i[0];
        "object" == typeof e && (e = e.recid + ", " + w2utils.lang("Column") + ": " + e.column), t = w2utils.lang("Record ID") + ": " + e + " ";
      }
      query(this.box).find("#grid_" + this.name + "_footer .w2ui-footer-left").html(t);
    }
  }
  lock(e, t) {
    let i = Array.from(arguments);
    i.unshift(this.box), setTimeout(() => {
      query(this.box).find("#grid_" + this.name + "_empty_msg").remove(), w2utils.lock(...i);
    }, 10);
  }
  unlock(e) {
    setTimeout(() => {
      query(this.box).find(".w2ui-message").hasClass("w2ui-closing") || w2utils.unlock(this.box, e);
    }, 25);
  }
  stateSave(e) {
    var t = { columns: [], show: w2utils.clone(this.show), last: { search: this.last.search, multi: this.last.multi, logic: this.last.logic, label: this.last.label, field: this.last.field, scrollTop: this.last.scrollTop, scrollLeft: this.last.scrollLeft }, sortData: [], searchData: [] };
    let l;
    for (let e2 = 0; e2 < this.columns.length; e2++) {
      let i2 = this.columns[e2], s = {};
      Object.keys(this.stateColProps).forEach((e3, t2) => {
        this.stateColProps[e3] && (l = void 0 !== i2[e3] ? i2[e3] : this.colTemplate[e3] || null, s[e3] = l);
      }), t.columns.push(s);
    }
    for (let e2 = 0; e2 < this.sortData.length; e2++)
      t.sortData.push(w2utils.clone(this.sortData[e2]));
    for (let e2 = 0; e2 < this.searchData.length; e2++)
      t.searchData.push(w2utils.clone(this.searchData[e2]));
    var i = this.trigger("stateSave", { target: this.name, state: t });
    if (true !== i.isCancelled)
      return true !== e && this.cacheSave("state", t), i.finish(), t;
  }
  stateRestore(i) {
    var _a, _b, _c;
    let s = "object" != typeof this.url ? this.url : this.url.get;
    i = i || this.cache("state");
    var e = this.trigger("stateRestore", { target: this.name, state: i });
    if (true !== e.isCancelled) {
      if (w2utils.isPlainObject(i)) {
        w2utils.extend(this.show, i.show ?? {}), w2utils.extend(this.last, i.last ?? {});
        let e2 = this.last.scrollTop, t = this.last.scrollLeft;
        for (let e3 = 0; e3 < ((_a = i.columns) == null ? void 0 : _a.length); e3++) {
          var l = i.columns[e3], r = this.getColumn(l.field, true);
          null !== r && (w2utils.extend(this.columns[r], l), e3 !== r) && this.columns.splice(e3, 0, this.columns.splice(r, 1)[0]);
        }
        this.sortData.splice(0, this.sortData.length);
        for (let e3 = 0; e3 < ((_b = i.sortData) == null ? void 0 : _b.length); e3++)
          this.sortData.push(i.sortData[e3]);
        this.searchData.splice(0, this.searchData.length);
        for (let e3 = 0; e3 < ((_c = i.searchData) == null ? void 0 : _c.length); e3++)
          this.searchData.push(i.searchData[e3]);
        setTimeout(() => {
          s || (0 < this.sortData.length && this.localSort(), 0 < this.searchData.length && this.localSearch()), this.last.scrollTop = e2, this.last.scrollLeft = t, this.refresh();
        }, 1), console.log(`INFO (w2ui): state restored for "${this.name}"`);
      }
      return e.finish(), true;
    }
  }
  stateReset() {
    this.stateRestore(this.last.state), this.cacheSave("state", null);
  }
  parseField(e, i) {
    if (this.nestedFields) {
      let t = "";
      try {
        t = e;
        var s = String(i).split(".");
        for (let e2 = 0; e2 < s.length; e2++)
          t = t[s[e2]];
      } catch (e2) {
        t = "";
      }
      return t;
    }
    return e ? e[i] : "";
  }
  prepareData() {
    let t = this;
    for (let e = 0; e < this.records.length; e++)
      !function i(s) {
        var _a, _b;
        for (let e2 = 0; e2 < t.columns.length; e2++) {
          let i2 = t.columns[e2];
          if (null != s[i2.field] && "string" == typeof i2.render) {
            if (-1 != ["number", "int", "float", "money", "currency", "percent"].indexOf(i2.render.split(":")[0]) && "number" != typeof s[i2.field] && (s[i2.field] = parseFloat(s[i2.field])), -1 != ["date", "age"].indexOf(i2.render.split(":")[0]) && !s[i2.field + "_"]) {
              let e3 = s[i2.field];
              w2utils.isInt(e3) && (e3 = parseInt(e3)), s[i2.field + "_"] = new Date(e3);
            }
            if (-1 != ["time"].indexOf(i2.render))
              if (w2utils.isTime(s[i2.field])) {
                let e3 = w2utils.isTime(s[i2.field], true), t2 = /* @__PURE__ */ new Date();
                t2.setHours(e3.hours, e3.minutes, e3.seconds || 0, 0), s[i2.field + "_"] || (s[i2.field + "_"] = t2);
              } else {
                let e3 = s[i2.field], t2 = (e3 = null != (e3 = w2utils.isInt(e3) ? parseInt(e3) : e3) ? new Date(e3) : /* @__PURE__ */ new Date(), /* @__PURE__ */ new Date());
                t2.setHours(e3.getHours(), e3.getMinutes(), e3.getSeconds(), 0), s[i2.field + "_"] || (s[i2.field + "_"] = t2);
              }
          }
        }
        if (((_a = s.w2ui) == null ? void 0 : _a.children) && true !== ((_b = s.w2ui) == null ? void 0 : _b.expanded))
          for (let t2 = 0; t2 < s.w2ui.children.length; t2++) {
            let e2 = s.w2ui.children[t2];
            i(e2);
          }
      }(this.records[e]);
  }
  nextCell(e, t, i) {
    t += 1;
    if (t >= this.columns.length)
      return null == (e = this.nextRow(e)) ? e : this.nextCell(e, -1, i);
    var s = this.records[e].w2ui, l = this.columns[t], s = s && s.colspan && !isNaN(s.colspan[l.field]) ? parseInt(s.colspan[l.field]) : 1;
    if (null == l)
      return null;
    if (l && l.hidden || 0 === s)
      return this.nextCell(e, t, i);
    if (i) {
      l = this.getCellEditable(e, t);
      if (null == l || -1 != ["checkbox", "check"].indexOf(l.type))
        return this.nextCell(e, t, i);
    }
    return { index: e, colIndex: t };
  }
  prevCell(e, t, i) {
    t -= 1;
    if (t < 0)
      return null == (e = this.prevRow(e)) ? e : this.prevCell(e, this.columns.length, i);
    if (t < 0)
      return null;
    var s = this.records[e].w2ui, l = this.columns[t], s = s && s.colspan && !isNaN(s.colspan[l.field]) ? parseInt(s.colspan[l.field]) : 1;
    if (null == l)
      return null;
    if (l && l.hidden || 0 === s)
      return this.prevCell(e, t, i);
    if (i) {
      l = this.getCellEditable(e, t);
      if (null == l || -1 != ["checkbox", "check"].indexOf(l.type))
        return this.prevCell(e, t, i);
    }
    return { index: e, colIndex: t };
  }
  nextRow(e, t, i) {
    var s = this.last.searchIds;
    let l = null;
    if (-1 == (i = null == i ? 1 : i))
      return this.records.length - 1;
    if (e + i < this.records.length && 0 === s.length || 0 < s.length && e < s[s.length - i]) {
      if (e += i, 0 < s.length)
        for (; ; ) {
          if (s.includes(e) || e > this.records.length)
            break;
          e += i;
        }
      var r = this.records[e].w2ui, a = this.columns[t], r = r && r.colspan && null != a && !isNaN(r.colspan[a.field]) ? parseInt(r.colspan[a.field]) : 1;
      l = 0 === r ? this.nextRow(e, t, i) : e;
    }
    return l;
  }
  prevRow(e, t, i) {
    var s = this.last.searchIds;
    let l = null;
    if (-1 == (i = null == i ? 1 : i))
      return 0;
    if (0 <= e - i && 0 === s.length || 0 < s.length && e > s[0]) {
      if (e -= i, 0 < s.length)
        for (; ; ) {
          if (s.includes(e) || e < 0)
            break;
          e -= i;
        }
      var r = this.records[e].w2ui, a = this.columns[t], r = r && r.colspan && null != a && !isNaN(r.colspan[a.field]) ? parseInt(r.colspan[a.field]) : 1;
      l = 0 === r ? this.prevRow(e, t, i) : e;
    }
    return l;
  }
  selectionSave() {
    return this.last.saved_sel = this.getSelection(), this.last.saved_sel;
  }
  selectionRestore(e) {
    var t, i = Date.now(), s = (this.last.selection = { indexes: [], columns: {} }, this.last.selection), l = this.last.saved_sel;
    if (l)
      for (let e2 = 0; e2 < l.length; e2++)
        w2utils.isPlainObject(l[e2]) ? null != (t = this.get(l[e2].recid, true)) && (-1 == s.indexes.indexOf(t) && s.indexes.push(t), s.columns[t] || (s.columns[t] = []), s.columns[t].push(l[e2].column)) : null != (t = this.get(l[e2], true)) && s.indexes.push(t);
    return delete this.last.saved_sel, true !== e && this.refresh(), Date.now() - i;
  }
  message(e) {
    return w2utils.message({ owner: this, box: this.box, after: ".w2ui-grid-header" }, e);
  }
  confirm(e) {
    return w2utils.confirm({ owner: this, box: this.box, after: ".w2ui-grid-header" }, e);
  }
};
var w2form = class extends w2base {
  constructor(e) {
    super(e.name), this.name = null, this.header = "", this.box = null, this.url = "", this.method = null, this.routeData = {}, this.formURL = "", this.formHTML = "", this.page = 0, this.pageStyle = "", this.recid = null, this.fields = [], this.actions = {}, this.record = {}, this.original = null, this.dataType = null, this.postData = {}, this.httpHeaders = {}, this.toolbar = {}, this.tabs = {}, this.style = "", this.focus = 0, this.autosize = true, this.nestedFields = true, this.tabindexBase = 0, this.isGenerated = false, this.last = { fetchCtrl: null, fetchOptions: null, errors: [] }, this.onRequest = null, this.onLoad = null, this.onValidate = null, this.onSubmit = null, this.onProgress = null, this.onSave = null, this.onChange = null, this.onInput = null, this.onRender = null, this.onRefresh = null, this.onResize = null, this.onDestroy = null, this.onAction = null, this.onToolbar = null, this.onError = null, this.msgRefresh = "Loading...", this.msgSaving = "Saving...", this.msgServerError = "Server error", this.ALL_TYPES = ["text", "textarea", "email", "pass", "password", "int", "float", "money", "currency", "percent", "hex", "alphanumeric", "color", "date", "time", "datetime", "toggle", "checkbox", "radio", "check", "checks", "list", "combo", "enum", "file", "select", "map", "array", "div", "custom", "html", "empty"], this.LIST_TYPES = ["select", "radio", "check", "checks", "list", "combo", "enum"], this.W2FIELD_TYPES = ["int", "float", "money", "currency", "percent", "hex", "alphanumeric", "color", "date", "time", "datetime", "list", "combo", "enum", "file"], w2utils.extend(this, e);
    var t, i, s = e.record, l = e.original, r = e.fields, a = e.toolbar;
    let n = e.tabs;
    if (Object.assign(this, { record: {}, original: null, fields: [], tabs: {}, toolbar: {}, handlers: [] }), r && (e = function l2(r2) {
      let a2 = [];
      let n2 = [];
      if (w2utils.isPlainObject(r2)) {
        let o2 = function(t2) {
          let i2 = ["html"];
          return null == t2.html && (t2.html = {}), Object.keys(t2).forEach((e3) => {
            -1 == i2.indexOf(e3) && -1 != ["label", "attr", "style", "text", "span", "page", "column", "anchor", "group", "groupStyle", "groupTitleStyle", "groupCollapsible"].indexOf(e3) && (t2.html[e3] = t2[e3], delete t2[e3]);
          }), t2;
        }, h = function(t2, i2) {
          let s2 = ["style", "html"];
          Object.keys(t2).forEach((e3) => {
            -1 == s2.indexOf(e3) && -1 != ["span", "column", "attr", "text", "label"].indexOf(e3) && t2[e3] && !i2.html[e3] && (i2.html[e3] = t2[e3]);
          });
        };
        let e2 = r2;
        r2 = [], Object.keys(e2).forEach((i2) => {
          let s2 = e2[i2];
          if ("group" == s2.type) {
            if (s2.text = i2, w2utils.isPlainObject(s2.fields)) {
              let i3 = s2.fields;
              s2.fields = [], Object.keys(i3).forEach((e3) => {
                let t2 = i3[e3];
                t2.field = e3, s2.fields.push(o2(t2));
              });
            }
            r2.push(s2);
          } else if ("tab" == s2.type) {
            let e3 = { id: i2, text: i2 }, t2 = (s2.style && (e3.style = s2.style), n2.push(e3), l2(s2.fields).fields);
            t2.forEach((e4) => {
              e4.html = e4.html || {}, e4.html.page = n2.length - 1, h(s2, e4);
            }), r2.push(...t2);
          } else
            s2.field = i2, r2.push(o2(s2));
        });
      }
      r2.forEach((s2) => {
        if ("group" == s2.type) {
          let i2 = { group: s2.text || "", groupStyle: s2.style || "", groupTitleStyle: s2.titleStyle || "", groupCollapsible: true === s2.collapsible };
          Array.isArray(s2.fields) && s2.fields.forEach((e2) => {
            let t2 = w2utils.clone(e2);
            null == t2.html && (t2.html = {}), w2utils.extend(t2.html, i2), Array("span", "column", "attr", "label", "page").forEach((e3) => {
              null == t2.html[e3] && null != s2[e3] && (t2.html[e3] = s2[e3]);
            }), null == t2.field && null != t2.name && (console.log("NOTICE: form field.name property is deprecated, please use field.field. Field ->", s2), t2.field = t2.name), a2.push(t2);
          });
        } else {
          let e2 = w2utils.clone(s2);
          null == e2.field && null != e2.name && (console.log("NOTICE: form field.name property is deprecated, please use field.field. Field ->", s2), e2.field = e2.name), a2.push(e2);
        }
      });
      return { fields: a2, tabs: n2 };
    }(r), this.fields = e.fields, !n) && 0 < e.tabs.length && (n = e.tabs), Array.isArray(n)) {
      w2utils.extend(this.tabs, { tabs: [] });
      for (let e2 = 0; e2 < n.length; e2++) {
        var o = n[e2];
        "object" == typeof o ? (this.tabs.tabs.push(o), true === o.active && (this.tabs.active = o.id)) : this.tabs.tabs.push({ id: o, text: o });
      }
    } else
      w2utils.extend(this.tabs, n);
    for (t in w2utils.extend(this.toolbar, a), s)
      w2utils.isPlainObject(s[t]) ? this.record[t] = w2utils.clone(s[t]) : this.record[t] = s[t];
    for (i in l)
      w2utils.isPlainObject(l[i]) ? this.original[i] = w2utils.clone(l[i]) : this.original[i] = l[i];
    "" !== this.formURL ? fetch(this.formURL).then((e2) => e2.text()).then((e2) => {
      this.formHTML = e2, this.isGenerated = true, this.box && this.render(this.box);
    }) : this.formURL || this.formHTML ? this.formHTML && (this.isGenerated = true) : (this.formHTML = this.generateHTML(), this.isGenerated = true), "string" == typeof this.box && (this.box = query(this.box).get(0)), this.box && this.render(this.box);
  }
  get(t, i) {
    if (0 === arguments.length) {
      var s = [];
      for (let e = 0; e < this.fields.length; e++)
        null != this.fields[e].field && s.push(this.fields[e].field);
      return s;
    }
    for (let e = 0; e < this.fields.length; e++)
      if (this.fields[e].field == t)
        return true === i ? e : this.fields[e];
    return null;
  }
  set(t, i) {
    for (let e = 0; e < this.fields.length; e++)
      if (this.fields[e].field == t)
        return w2utils.extend(this.fields[e], i), this.refresh(t), true;
    return false;
  }
  getValue(t, i) {
    if (this.nestedFields) {
      let e = void 0;
      try {
        var s = true === i ? this.original : this.record;
        e = String(t).split(".").reduce((e2, t2) => e2[t2], s);
      } catch (e2) {
      }
      return e;
    }
    return this.record[t];
  }
  setValue(e, l) {
    if (("" === l || null == l || Array.isArray(l) && 0 === l.length || w2utils.isPlainObject(l) && 0 == Object.keys(l).length) && (l = null), !this.nestedFields)
      return this.record[e] = l, true;
    try {
      let s = this.record;
      return String(e).split(".").map((e2, t, i) => {
        i.length - 1 !== t ? s = s[e2] || (s[e2] = {}, s[e2]) : s[e2] = l;
      }), true;
    } catch (e2) {
      return false;
    }
  }
  getFieldValue(e) {
    var _a;
    let s = this.get(e);
    if (null != s) {
      var l = s.el;
      let t = this.getValue(e);
      e = this.getValue(e, true);
      let i = l.value;
      ["int", "float", "percent", "money", "currency"].includes(s.type) && (i = s.w2field.clean(i)), ["radio"].includes(s.type) && (r = query(l).closest("div").find("input:checked").get(0), i = r ? s.options.items[query(r).data("index")].id : null), ["toggle", "checkbox"].includes(s.type) && (i = l.checked), -1 !== ["check", "checks"].indexOf(s.type) && (i = [], 0 < (r = query(l).closest("div").find("input:checked")).length && r.each((e2) => {
        e2 = s.options.items[query(e2).data("index")];
        i.push(e2.id);
      }), Array.isArray(t) || (t = []));
      var r = (_a = l._w2field) == null ? void 0 : _a.selected;
      if (["list", "enum", "file"].includes(s.type) && r) {
        var a = r, n = t;
        if (Array.isArray(a)) {
          i = [];
          for (let e2 = 0; e2 < a.length; e2++)
            i[e2] = w2utils.clone(a[e2]);
        }
        if (Array.isArray(n)) {
          t = [];
          for (let e2 = 0; e2 < n.length; e2++)
            t[e2] = w2utils.clone(n[e2]);
        }
        w2utils.isPlainObject(a) && (i = w2utils.clone(a)), w2utils.isPlainObject(n) && (t = w2utils.clone(n));
      }
      return ["map", "array"].includes(s.type) && (i = "map" == s.type ? {} : [], s.$el.parent().find(".w2ui-map-field").each((e2) => {
        var t2 = query(e2).find(".w2ui-map.key").val(), e2 = query(e2).find(".w2ui-map.value").val();
        "map" == s.type ? i[t2] = e2 : i.push(e2);
      })), { current: i, previous: t, original: e };
    }
  }
  setFieldValue(e, r) {
    var _a;
    let a = this.get(e);
    if (null != a) {
      var s = a.el;
      switch (a.type) {
        case "toggle":
        case "checkbox":
          s.checked = !!r;
          break;
        case "radio": {
          r = (r == null ? void 0 : r.id) ?? r;
          let i2 = query(s).closest("div").find("input");
          a.options.items.forEach((e2, t2) => {
            e2.id === r && i2.filter(`[data-index="${t2}"]`).prop("checked", true);
          });
          break;
        }
        case "check":
        case "checks": {
          r = (r = Array.isArray(r) ? r : null != r ? [r] : []).map((e2) => (e2 == null ? void 0 : e2.id) ?? e2);
          let i2 = query(s).closest("div").find("input");
          a.options.items.forEach((e2, t2) => {
            i2.filter(`[data-index="${t2}"]`).prop("checked", !!r.includes(e2.id));
          });
          break;
        }
        case "list":
        case "combo":
          let t = r;
          null == (t == null ? void 0 : t.id) && Array.isArray((_a = a.options) == null ? void 0 : _a.items) && a.options.items.forEach((e2) => {
            e2.id === r && (t = e2);
          }), t != r && this.setValue(a.name, t), "list" == a.type ? (a.w2field.selected = t, a.w2field.refresh()) : a.el.value = (t == null ? void 0 : t.text) ?? r;
          break;
        case "enum":
        case "file": {
          let s2 = [...r = Array.isArray(r) ? r : null != r ? [r] : []], l = false;
          s2.forEach((t2, i2) => {
            null == (t2 == null ? void 0 : t2.id) && Array.isArray(a.options.items) && a.options.items.forEach((e2) => {
              e2.id == t2 && (s2[i2] = e2, l = true);
            });
          }), l && this.setValue(a.name, s2), a.w2field.selected = s2, a.w2field.refresh();
          break;
        }
        case "map":
        case "array":
          "map" != a.type || null != r && w2utils.isPlainObject(r) || (this.setValue(a.field, {}), r = this.getValue(a.field)), "array" != a.type || null != r && Array.isArray(r) || (this.setValue(a.field, []), r = this.getValue(a.field));
          var i = query(a.el).parent().find(".w2ui-map-container");
          a.el.mapRefresh(r, i);
          break;
        case "div":
        case "custom":
          query(s).html(r);
          break;
        case "html":
        case "empty":
          break;
        default:
          s.value = r ?? "";
      }
    }
  }
  show() {
    var t = [];
    for (let e = 0; e < arguments.length; e++) {
      var i = this.get(arguments[e]);
      i && i.hidden && (i.hidden = false, t.push(i.field));
    }
    return 0 < t.length && this.refresh.apply(this, t), this.updateEmptyGroups(), t;
  }
  hide() {
    var t = [];
    for (let e = 0; e < arguments.length; e++) {
      var i = this.get(arguments[e]);
      i && !i.hidden && (i.hidden = true, t.push(i.field));
    }
    return 0 < t.length && this.refresh.apply(this, t), this.updateEmptyGroups(), t;
  }
  enable() {
    var t = [];
    for (let e = 0; e < arguments.length; e++) {
      var i = this.get(arguments[e]);
      i && i.disabled && (i.disabled = false, t.push(i.field));
    }
    return 0 < t.length && this.refresh.apply(this, t), t;
  }
  disable() {
    var t = [];
    for (let e = 0; e < arguments.length; e++) {
      var i = this.get(arguments[e]);
      i && !i.disabled && (i.disabled = true, t.push(i.field));
    }
    return 0 < t.length && this.refresh.apply(this, t), t;
  }
  updateEmptyGroups() {
    query(this.box).find(".w2ui-group").each((e) => {
      !function(e2) {
        let t = true;
        return e2.each((e3) => {
          "none" != e3.style.display && (t = false);
        }), t;
      }(query(e).find(".w2ui-field")) ? query(e).show() : query(e).hide();
    });
  }
  change() {
    Array.from(arguments).forEach((e) => {
      e = this.get(e);
      e.$el && e.$el.change();
    });
  }
  reload(e) {
    return ("object" != typeof this.url ? this.url : this.url.get) && null != this.recid ? this.request(e) : ("function" == typeof e && e(), new Promise((e2) => {
      e2();
    }));
  }
  clear() {
    0 != arguments.length ? Array.from(arguments).forEach((e) => {
      let s = this.record;
      String(e).split(".").map((e2, t, i) => {
        i.length - 1 !== t ? s = s[e2] : delete s[e2];
      }), this.refresh(e);
    }) : (this.recid = null, this.record = {}, this.original = null, this.refresh(), this.hideErrors());
  }
  error(e) {
    var t = this.trigger("error", { target: this.name, message: e, fetchCtrl: this.last.fetchCtrl, fetchOptions: this.last.fetchOptions });
    true !== t.isCancelled && (setTimeout(() => {
      this.message(e);
    }, 1), t.finish());
  }
  message(e) {
    return w2utils.message({ owner: this, box: this.box, after: ".w2ui-form-header" }, e);
  }
  confirm(e) {
    return w2utils.confirm({ owner: this, box: this.box, after: ".w2ui-form-header" }, e);
  }
  validate(e) {
    var _a;
    null == e && (e = true);
    var t = [];
    for (let e2 = 0; e2 < this.fields.length; e2++) {
      var i, s, l = this.fields[e2];
      switch (null == this.getValue(l.field) && this.setValue(l.field, ""), -1 != ["int", "float", "currency", "money"].indexOf(l.type) && (i = this.getValue(l.field), r = l.options.min, s = l.options.max, null != r && i < r && t.push({ field: l, error: w2utils.lang("Should be more than ${min}", { min: r }) }), null != s) && s < i && t.push({ field: l, error: w2utils.lang("Should be less than ${max}", { max: s }) }), l.type) {
        case "alphanumeric":
          this.getValue(l.field) && !w2utils.isAlphaNumeric(this.getValue(l.field)) && t.push({ field: l, error: w2utils.lang("Not alpha-numeric") });
          break;
        case "int":
          this.getValue(l.field) && !w2utils.isInt(this.getValue(l.field)) && t.push({ field: l, error: w2utils.lang("Not an integer") });
          break;
        case "percent":
        case "float":
          this.getValue(l.field) && !w2utils.isFloat(this.getValue(l.field)) && t.push({ field: l, error: w2utils.lang("Not a float") });
          break;
        case "currency":
        case "money":
          this.getValue(l.field) && !w2utils.isMoney(this.getValue(l.field)) && t.push({ field: l, error: w2utils.lang("Not in money format") });
          break;
        case "color":
        case "hex":
          this.getValue(l.field) && !w2utils.isHex(this.getValue(l.field)) && t.push({ field: l, error: w2utils.lang("Not a hex number") });
          break;
        case "email":
          this.getValue(l.field) && !w2utils.isEmail(this.getValue(l.field)) && t.push({ field: l, error: w2utils.lang("Not a valid email") });
          break;
        case "checkbox":
          1 == this.getValue(l.field) ? this.setValue(l.field, true) : this.setValue(l.field, false);
          break;
        case "date":
          l.options.format || (l.options.format = w2utils.settings.dateFormat), this.getValue(l.field) && !w2utils.isDate(this.getValue(l.field), l.options.format) && t.push({ field: l, error: w2utils.lang("Not a valid date") + ": " + l.options.format });
      }
      var r = this.getValue(l.field);
      true !== l.hidden && l.required && !["div", "custom", "html", "empty"].includes(l.type) && (null == r || "" === r || Array.isArray(r) && 0 === r.length || w2utils.isPlainObject(r) && 0 == Object.keys(r).length) && t.push({ field: l, error: w2utils.lang("Required field") }), true !== l.hidden && 0 < ((_a = l.options) == null ? void 0 : _a.minLength) && !["enum", "list", "combo"].includes(l.type) && (null == r || r.length < l.options.minLength) && t.push({ field: l, error: w2utils.lang("Field should be at least ${count} characters.", { count: l.options.minLength }) });
    }
    var a = this.trigger("validate", { target: this.name, errors: t });
    if (true !== a.isCancelled)
      return this.last.errors = t, e && this.showErrors(), a.finish(), t;
  }
  showErrors() {
    var e = this.last.errors;
    e.length <= 0 || (this.goto(e[0].field.page), query(e[0].field.$el).parents(".w2ui-field")[0].scrollIntoView({ block: "nearest", inline: "nearest" }), e.forEach((t) => {
      var i = w2utils.extend({ anchorClass: "w2ui-error", class: "w2ui-light", position: "right|left", hideOn: ["input"] }, t.options);
      if (null != t.field) {
        let e2 = t.field.el;
        "radio" === t.field.type ? e2 = query(t.field.el).closest("div").get(0) : ["enum", "file"].includes(t.field.type), w2tooltip.show(w2utils.extend({ anchor: e2, name: `${this.name}-${t.field.field}-error`, html: t.error }, i));
      }
    }), query(e[0].field.$el).parents(".w2ui-page").off(".hideErrors").on("scroll.hideErrors", (e2) => {
      this.hideErrors();
    }));
  }
  hideErrors() {
    this.fields.forEach((e) => {
      w2tooltip.hide(`${this.name}-${e.field}-error`);
    });
  }
  getChanges() {
    let e = {};
    return e = null != this.original && "object" == typeof this.original && 0 !== Object.keys(this.record).length ? function e2(t, i, s) {
      if (Array.isArray(t) && Array.isArray(i))
        for (; t.length < i.length; )
          t.push(null);
      for (var l in t)
        null != t[l] && "object" == typeof t[l] ? (s[l] = e2(t[l], i[l] || {}, {}), (!s[l] || 0 == Object.keys(s[l]).length && Object.keys(0 == i[l].length)) && delete s[l]) : (t[l] != i[l] || null == t[l] && null != i[l]) && (s[l] = t[l]);
      return 0 != Object.keys(s).length ? s : null;
    }(this.record, this.original, {}) : e;
  }
  getCleanRecord(e) {
    let s = w2utils.clone(this.record);
    return this.fields.forEach((e2) => {
      if (-1 != ["list", "combo", "enum"].indexOf(e2.type)) {
        var t = { nestedFields: true, record: s };
        let i2 = this.getValue.call(t, e2.field);
        w2utils.isPlainObject(i2) && null != i2.id && this.setValue.call(t, e2.field, i2.id), Array.isArray(i2) && i2.forEach((e3, t2) => {
          w2utils.isPlainObject(e3) && e3.id && (i2[t2] = e3.id);
        });
      }
      var i;
      "map" == e2.type && (t = { nestedFields: true, record: s }, (t = this.getValue.call(t, e2.field))._order) && delete t._order, "file" == e2.type && (t = { nestedFields: true, record: s }, (i = this.getValue.call(t, e2.field) ?? []).forEach((e3) => {
        delete e3.file, delete e3.modified;
      }), this.setValue.call(t, e2.field, i));
    }), true === e && Object.keys(s).forEach((e2) => {
      this.get(e2) || delete s[e2];
    }), s;
  }
  request(e, i) {
    let s = this, l, r;
    var a = new Promise((e2, t) => {
      l = e2, r = t;
    });
    if ("function" == typeof e && (i = e, e = null), null == e && (e = {}), this.url && ("object" != typeof this.url || this.url.get)) {
      var n = { action: "get" }, e = (n.recid = this.recid, n.name = this.name, w2utils.extend(n, this.postData), w2utils.extend(n, e), this.trigger("request", { target: this.name, url: this.url, httpMethod: "GET", postData: n, httpHeaders: this.httpHeaders }));
      if (true !== e.isCancelled) {
        let h = function(e2) {
          var t2;
          "AbortError" !== e2.name && (s.unlock(), true !== (t2 = s.trigger("error", { response: e2, fetchCtrl: s.last.fetchCtrl, fetchOptions: s.last.fetchOptions })).isCancelled) && (e2.status && 200 != e2.status ? s.error(e2.status + ": " + e2.statusText) : (console.log("ERROR: Server request failed.", e2, ". ", "Expected Response:", { error: false, record: { field1: 1, field2: "item" } }, "OR:", { error: true, message: "Error description" }), s.error(String(e2))), t2.finish(), r(e2));
        };
        this.record = {}, this.original = null, this.lock(w2utils.lang(this.msgRefresh));
        let t = e.detail.url;
        if ("object" == typeof t && t.get && (t = t.get), this.last.fetchCtrl)
          try {
            this.last.fetchCtrl.abort();
          } catch (e2) {
          }
        if (0 != Object.keys(this.routeData).length) {
          var o = w2utils.parseRoute(t);
          if (0 < o.keys.length)
            for (let e2 = 0; e2 < o.keys.length; e2++)
              null != this.routeData[o.keys[e2].name] && (t = t.replace(new RegExp(":" + o.keys[e2].name, "g"), this.routeData[o.keys[e2].name]));
        }
        t = new URL(t, location);
        n = w2utils.prepareParams(t, { method: e.detail.httpMethod, headers: e.detail.httpHeaders, body: e.detail.postData }, this.dataType);
        return this.last.fetchCtrl = new AbortController(), n.signal = this.last.fetchCtrl.signal, this.last.fetchOptions = n, fetch(t, n).catch(h).then((e2) => {
          200 != (e2 == null ? void 0 : e2.status) ? e2 && h(e2) : e2.json().catch(h).then((e3) => {
            var t2 = s.trigger("load", { target: s.name, fetchCtrl: this.last.fetchCtrl, fetchOptions: this.last.fetchOptions, data: e3 });
            true !== t2.isCancelled && (null == e3.error && "error" === e3.status && (e3.error = true), e3.record || Object.assign(e3, { record: w2utils.clone(e3) }), true === e3.error ? s.error(w2utils.lang(e3.message ?? this.msgServerError)) : s.record = w2utils.clone(e3.record), s.unlock(), t2.finish(), s.refresh(), s.setFocus(), "function" == typeof i && i(e3), l(e3));
          });
        }), e.finish(), a;
      }
    }
  }
  submit(e, t) {
    return this.save(e, t);
  }
  save(e, i) {
    let s = this, l, r;
    var a = new Promise((e2, t) => {
      l = e2, r = t;
    }), n = ("function" == typeof e && (i = e, e = null), s.validate(true));
    if (0 === n.length)
      if (null == e && (e = {}), !s.url || "object" == typeof s.url && !s.url.save)
        console.log("ERROR: Form cannot be saved because no url is defined.");
      else {
        s.lock(w2utils.lang(s.msgSaving) + ' <span id="' + s.name + '_progress"></span>');
        n = { action: "save" }, e = (n.recid = s.recid, n.name = s.name, w2utils.extend(n, s.postData), w2utils.extend(n, e), n.record = w2utils.clone(s.record), s.trigger("submit", { target: s.name, url: s.url, httpMethod: this.method ?? "POST", postData: n, httpHeaders: s.httpHeaders }));
        if (true !== e.isCancelled) {
          let h = function(e2) {
            var t2;
            "AbortError" !== (e2 == null ? void 0 : e2.name) && (s.unlock(), true !== (t2 = s.trigger("error", { response: e2, fetchCtrl: s.last.fetchCtrl, fetchOptions: s.last.fetchOptions })).isCancelled) && (e2.status && 200 != e2.status ? s.error(e2.status + ": " + e2.statusText) : (console.log("ERROR: Server request failed.", e2, ". ", "Expected Response:", { error: false, record: { field1: 1, field2: "item" } }, "OR:", { error: true, message: "Error description" }), s.error(String(e2))), t2.finish(), r());
          };
          let t = e.detail.url;
          if ("object" == typeof t && t.save && (t = t.save), s.last.fetchCtrl && s.last.fetchCtrl.abort(), 0 < Object.keys(s.routeData).length) {
            var o = w2utils.parseRoute(t);
            if (0 < o.keys.length)
              for (let e2 = 0; e2 < o.keys.length; e2++)
                null != s.routeData[o.keys[e2].name] && (t = t.replace(new RegExp(":" + o.keys[e2].name, "g"), s.routeData[o.keys[e2].name]));
          }
          t = new URL(t, location);
          n = w2utils.prepareParams(t, { method: e.detail.httpMethod, headers: e.detail.httpHeaders, body: e.detail.postData }, this.dataType);
          return this.last.fetchCtrl = new AbortController(), n.signal = this.last.fetchCtrl.signal, this.last.fetchOptions = n, fetch(t, n).catch(h).then((e2) => {
            s.unlock(), 200 != (e2 == null ? void 0 : e2.status) ? h(e2 ?? {}) : e2.json().catch(h).then((e3) => {
              var t2 = s.trigger("save", { target: s.name, fetchCtrl: this.last.fetchCtrl, fetchOptions: this.last.fetchOptions, data: e3 });
              true !== t2.isCancelled && (true === e3.error ? s.error(w2utils.lang(e3.message ?? this.msgServerError)) : s.original = null, t2.finish(), s.refresh(), "function" == typeof i && i(e3), l(e3));
            });
          }), e.finish(), a;
        }
      }
  }
  lock(e, t) {
    var i = Array.from(arguments);
    i.unshift(this.box), w2utils.lock(...i);
  }
  unlock(e) {
    var t = this.box;
    w2utils.unlock(t, e);
  }
  lockPage(e, t, i) {
    e = query(this.box).find(".page-" + e);
    return !!e.length && (w2utils.lock(e, t, i), true);
  }
  unlockPage(e, t) {
    e = query(this.box).find(".page-" + e);
    return !!e.length && (w2utils.unlock(e, t), true);
  }
  goto(e) {
    this.page !== e && (null != e && (this.page = e), true === query(this.box).data("autoSize") && (query(this.box).get(0).clientHeight = 0), this.refresh());
  }
  generateHTML() {
    let s = [], t = "", l, r, a, n;
    for (let e2 = 0; e2 < this.fields.length; e2++) {
      a = "";
      var o = ' tabindex="' + (n = this.tabindexBase + e2 + 1) + '"', h = this.fields[e2];
      null == h.html && (h.html = {}), null == h.options && (h.options = {}), null != h.html.caption && null == h.html.label && (console.log("NOTICE: form field.html.caption property is deprecated, please use field.html.label. Field ->", h), h.html.label = h.html.caption), null == h.html.label && (h.html.label = h.field), h.html = w2utils.extend({ label: "", span: 6, attr: "", text: "", style: "", page: 0, column: 0 }, h.html), null == l && (l = h.html.page), null == r && (r = h.html.column);
      let i2 = `<input id="${h.field}" name="${h.field}" class="w2ui-input" type="text" ${h.html.attr + o}>`;
      switch (h.type) {
        case "pass":
        case "password":
          i2 = i2.replace('type="text"', 'type="password"');
          break;
        case "checkbox":
          i2 = `
                        <label class="w2ui-box-label">
                            <input id="${h.field}" name="${h.field}" class="w2ui-input" type="checkbox" ${h.html.attr + o}>
                            <span>${h.html.label}</span>
                        </label>`;
          break;
        case "check":
        case "checks": {
          null == h.options.items && null != h.html.items && (h.options.items = h.html.items);
          let t2 = h.options.items;
          i2 = "", 0 < (t2 = Array.isArray(t2) ? t2 : []).length && (t2 = w2utils.normMenu.call(this, t2, h));
          for (let e3 = 0; e3 < t2.length; e3++)
            i2 += `
                            <label class="w2ui-box-label">
                                <input id="${h.field + e3}" name="${h.field}" class="w2ui-input" type="checkbox"
                                    ${h.html.attr + o} data-value="${t2[e3].id}" data-index="${e3}">
                                <span>&#160;${t2[e3].text}</span>
                            </label>
                            <br>`;
          break;
        }
        case "radio": {
          i2 = "", null == h.options.items && null != h.html.items && (h.options.items = h.html.items);
          let t2 = h.options.items;
          0 < (t2 = Array.isArray(t2) ? t2 : []).length && (t2 = w2utils.normMenu.call(this, t2, h));
          for (let e3 = 0; e3 < t2.length; e3++)
            i2 += `
                            <label class="w2ui-box-label">
                                <input id="${h.field + e3}" name="${h.field}" class="w2ui-input" type="radio"
                                    ${h.html.attr + (0 === e3 ? o : "")}
                                    data-value="${t2[e3].id}" data-index="${e3}">
                                <span>&#160;${t2[e3].text}</span>
                            </label>
                            <br>`;
          break;
        }
        case "select": {
          i2 = `<select id="${h.field}" name="${h.field}" class="w2ui-input" ${h.html.attr + o}>`, null == h.options.items && null != h.html.items && (h.options.items = h.html.items);
          let t2 = h.options.items;
          0 < (t2 = Array.isArray(t2) ? t2 : []).length && (t2 = w2utils.normMenu.call(this, t2, h));
          for (let e3 = 0; e3 < t2.length; e3++)
            i2 += `<option value="${t2[e3].id}">${t2[e3].text}</option>`;
          i2 += "</select>";
          break;
        }
        case "textarea":
          i2 = `<textarea id="${h.field}" name="${h.field}" class="w2ui-input" ${h.html.attr + o}></textarea>`;
          break;
        case "toggle":
          i2 = `<input id="${h.field}" name="${h.field}" class="w2ui-input w2ui-toggle" type="checkbox" ${h.html.attr + o}>
                            <div><div></div></div>`;
          break;
        case "map":
        case "array":
          h.html.key = h.html.key || {}, h.html.value = h.html.value || {}, h.html.tabindex_str = o, i2 = '<span style="float: right">' + (h.html.text || "") + '</span><input id="' + h.field + '" name="' + h.field + '" type="hidden" ' + h.html.attr + o + '><div class="w2ui-map-container"></div>';
          break;
        case "div":
        case "custom":
          i2 = '<div id="' + h.field + '" name="' + h.field + '" ' + h.html.attr + o + ' class="w2ui-input">' + (h && h.html && h.html.html ? h.html.html : "") + "</div>";
          break;
        case "html":
        case "empty":
          i2 = h && h.html ? (h.html.html || "") + (h.html.text || "") : "";
      }
      if ("" !== t && (l != h.html.page || r != h.html.column || h.html.group && t != h.html.group) && (s[l][r] += "\n   </div>\n  </div>", t = ""), h.html.group && t != h.html.group) {
        let e3 = "";
        h.html.groupCollapsible && (e3 = '<span class="w2ui-icon-collapse" style="width: 15px; display: inline-block; position: relative; top: -2px;"></span>'), a += '\n <div class="w2ui-group">\n   <div class="w2ui-group-title w2ui-eaction" style="' + (h.html.groupTitleStyle || "") + "; " + ("" != e3 ? "cursor: pointer; user-select: none" : "") + '"' + ("" != e3 ? 'data-group="' + w2utils.base64encode(h.html.group) + '"' : "") + ("" != e3 ? 'data-click="toggleGroup|' + h.html.group + '"' : "") + ">" + e3 + w2utils.lang(h.html.group) + '</div>\n   <div class="w2ui-group-fields" style="' + (h.html.groupStyle || "") + '">', t = h.html.group;
      }
      if (null == h.html.anchor) {
        let e3 = null != h.html.span ? "w2ui-span" + h.html.span : "", t2 = "<label" + ("none" == (e3 = -1 == h.html.span ? "w2ui-span-none" : e3) ? ' style="display: none"' : "") + ">" + w2utils.lang("checkbox" != h.type ? h.html.label : h.html.text) + "</label>";
        h.html.label || (t2 = ""), a += '\n      <div class="w2ui-field ' + e3 + '" style="' + (h.hidden ? "display: none;" : "") + h.html.style + '">\n         ' + t2 + ("empty" === h.type ? i2 : "\n         <div>" + i2 + ("array" != h.type && "map" != h.type ? w2utils.lang("checkbox" != h.type ? h.html.text : "") : "") + "</div>") + "\n      </div>";
      } else
        s[h.html.page].anchors = s[h.html.page].anchors || {}, s[h.html.page].anchors[h.html.anchor] = '<div class="w2ui-field w2ui-field-inline" style="' + (h.hidden ? "display: none;" : "") + h.html.style + '">' + ("empty" === h.type ? i2 : "<div>" + w2utils.lang("checkbox" != h.type ? h.html.label : h.html.text, true) + i2 + w2utils.lang("checkbox" != h.type ? h.html.text : "") + "</div>") + "</div>";
      null == s[h.html.page] && (s[h.html.page] = {}), null == s[h.html.page][h.html.column] && (s[h.html.page][h.html.column] = ""), s[h.html.page][h.html.column] += a, l = h.html.page, r = h.html.column;
    }
    if ("" !== t && (s[l][r] += "\n   </div>\n  </div>"), this.tabs.tabs)
      for (let e2 = 0; e2 < this.tabs.tabs.length; e2++)
        null == s[e2] && (s[e2] = []);
    let e = "";
    if (0 < Object.keys(this.actions).length) {
      for (var i in e += '\n<div class="w2ui-buttons">', n = this.tabindexBase + this.fields.length + 1, this.actions) {
        var d = this.actions[i], u = { text: "", style: "", class: "" };
        w2utils.isPlainObject(d) ? (null == d.text && null != d.caption && (console.log("NOTICE: form action.caption property is deprecated, please use action.text. Action ->", d), d.text = d.caption), d.text && (u.text = d.text), d.style && (u.style = d.style), d.class && (u.class = d.class)) : (u.text = i, -1 !== ["save", "update", "create"].indexOf(i.toLowerCase()) ? u.class = "w2ui-btn-blue" : u.class = ""), e += '\n    <button name="' + i + '" class="w2ui-btn ' + u.class + '" style="' + u.style + '" tabindex="' + n + '">' + w2utils.lang(u.text) + "</button>", n++;
      }
      e += "\n</div>";
    }
    a = "";
    for (let i2 = 0; i2 < s.length; i2++) {
      if (a += '<div class="w2ui-page page-' + i2 + '" style="' + (0 !== i2 ? "display: none;" : "") + this.pageStyle + '">', !s[i2])
        return console.log(`ERROR: Page ${i2} does not exist`), false;
      s[i2].before && (a += s[i2].before), a += '<div class="w2ui-column-container">', Object.keys(s[i2]).sort().forEach((e2, t2) => {
        e2 == parseInt(e2) && (a += '<div class="w2ui-column col-' + e2 + '">' + (s[i2][e2] || "") + "\n</div>");
      }), a += "\n</div>", s[i2].after && (a += s[i2].after), a += "\n</div>", s[i2].anchors && Object.keys(s[i2].anchors).forEach((e2, t2) => {
        a = a.replace(e2, s[i2].anchors[e2]);
      });
    }
    return a += e;
  }
  toggleGroup(e, t) {
    var i, e = query(this.box).find('.w2ui-group-title[data-group="' + w2utils.base64encode(e) + '"]');
    0 !== e.length && (i = query(e.prop("nextElementSibling")), (t = void 0 === t ? "none" == i.css("display") : t) ? (i.show(), e.find("span").addClass("w2ui-icon-collapse").removeClass("w2ui-icon-expand")) : (i.hide(), e.find("span").addClass("w2ui-icon-expand").removeClass("w2ui-icon-collapse")));
  }
  action(e, t) {
    var i = this.actions[e];
    let s = i;
    w2utils.isPlainObject(i) && i.onClick && (s = i.onClick);
    e = this.trigger("action", { target: e, action: i, originalEvent: t });
    true !== e.isCancelled && ("function" == typeof s && s.call(this, t), e.finish());
  }
  resize() {
    let o = this;
    var e = this.trigger("resize", { target: this.name });
    if (true !== e.isCancelled) {
      let u = function() {
        var _a, _b, _c, _d, _e, _f;
        var e2 = "" !== o.header ? w2utils.getSize(s, "height") : 0, t2 = Array.isArray((_a = o.toolbar) == null ? void 0 : _a.items) && 0 < ((_c = (_b = o.toolbar) == null ? void 0 : _b.items) == null ? void 0 : _c.length) ? w2utils.getSize(l, "height") : 0, i2 = Array.isArray((_d = o.tabs) == null ? void 0 : _d.tabs) && 0 < ((_f = (_e = o.tabs) == null ? void 0 : _e.tabs) == null ? void 0 : _f.length) ? w2utils.getSize(r, "height") : 0;
        return l.css({ top: e2 + "px" }), r.css({ top: e2 + t2 + "px" }), a.css({ top: e2 + t2 + i2 + "px", bottom: (0 < n.length ? w2utils.getSize(n, "height") : 0) + "px" }), { headerHeight: e2, tbHeight: t2, tabsHeight: i2 };
      };
      let s = query(this.box).find(":scope > div .w2ui-form-header"), l = query(this.box).find(":scope > div .w2ui-form-toolbar"), r = query(this.box).find(":scope > div .w2ui-form-tabs"), a = query(this.box).find(":scope > div .w2ui-page");
      var t = query(this.box).find(":scope > div .w2ui-page.page-" + this.page + " > div");
      let n = query(this.box).find(":scope > div .w2ui-buttons");
      var { headerHeight: i, tbHeight: h, tabsHeight: d } = u();
      this.autosize && (0 !== query(this.box).get(0).clientHeight && "yes" != query(this.box).data("autosize") || (query(this.box).css({ height: i + h + d + 15 + (0 < a.length ? w2utils.getSize(t, "height") : 0) + (0 < n.length ? w2utils.getSize(n, "height") : 0) + "px" }), query(this.box).data("autosize", "yes")), u()), e.finish();
    }
  }
  refresh() {
    var e = Date.now();
    let c = this;
    if (this.box && this.isGenerated && query(this.box).html()) {
      var t = this.trigger("refresh", { target: this.name, page: this.page, field: arguments[0], fields: arguments });
      if (true !== t.isCancelled) {
        let i = Array.from(this.fields.keys());
        0 < arguments.length ? i = Array.from(arguments).map((e2, t2) => ("string" != typeof e2 && console.log("ERROR: Arguments in refresh functions should be field names"), this.get(e2, true))).filter((e2, t2) => null != e2) : (query(this.box).find("input, textarea, select").each((e2) => {
          var t2 = null != query(e2).attr("name") ? query(e2).attr("name") : query(e2).attr("id"), i2 = this.get(t2);
          if (i2) {
            var s2 = query(e2).closest(".w2ui-page");
            if (0 < s2.length) {
              for (let e3 = 0; e3 < 100; e3++)
                if (s2.hasClass("page-" + e3)) {
                  i2.page = e3;
                  break;
                }
            }
          }
        }), query(this.box).find(".w2ui-page").hide(), query(this.box).find(".w2ui-page.page-" + this.page).show(), query(this.box).find(".w2ui-form-header").html(w2utils.lang(this.header)), "object" == typeof this.tabs && Array.isArray(this.tabs.tabs) && 0 < this.tabs.tabs.length ? (query(this.box).find("#form_" + this.name + "_tabs").show(), this.tabs.active = this.tabs.tabs[this.page].id, this.tabs.refresh()) : query(this.box).find("#form_" + this.name + "_tabs").hide(), "object" == typeof this.toolbar && Array.isArray(this.toolbar.items) && 0 < this.toolbar.items.length ? (query(this.box).find("#form_" + this.name + "_toolbar").show(), this.toolbar.refresh()) : query(this.box).find("#form_" + this.name + "_toolbar").hide());
        for (let t2 = 0; t2 < i.length; t2++) {
          let s2 = this.fields[i[t2]], e2 = (null == s2.name && null != s2.field && (s2.name = s2.field), null == s2.field && null != s2.name && (s2.field = s2.name), s2.$el = query(this.box).find(`[name='${String(s2.name).replace(/\\/g, "\\\\")}']`), s2.el = s2.$el.get(0), s2.el && (s2.el.id = s2.name), s2.w2field && s2.w2field.reset(), s2.$el.off(".w2form").on("change.w2form", function(e3) {
            var _a, _b;
            var t3 = c.getFieldValue(s2.field), i2 = (["enum", "file"].includes(s2.type) && (i2 = (_b = (_a = s2.el._w2field) == null ? void 0 : _a.helpers) == null ? void 0 : _b.multi, query(i2).removeClass("w2ui-error")), null != this._previous && (t3.previous = this._previous, delete this._previous), c.trigger("change", { target: this.name, field: this.name, value: t3, originalEvent: e3 }));
            true !== i2.isCancelled && (c.setValue(this.name, t3.current), i2.finish());
          }).on("input.w2form", function(e3) {
            null == c.original && (0 < Object.keys(c.record).length ? c.original = w2utils.clone(c.record) : c.original = {});
            var t3 = c.getFieldValue(s2.field), e3 = (null == this._previous && (this._previous = t3.previous), c.trigger("input", { target: c.name, value: t3, originalEvent: e3 }));
            true !== e3.isCancelled && (c.setValue(this.name, t3.current), e3.finish());
          }), s2.required ? s2.$el.closest(".w2ui-field").addClass("w2ui-required") : s2.$el.closest(".w2ui-field").removeClass("w2ui-required"), null != s2.disabled && (s2.disabled ? (null == s2.$el.data("tabIndex") && s2.$el.data("tabIndex", s2.$el.prop("tabIndex")), s2.$el.prop("readOnly", true).prop("disabled", true).prop("tabIndex", -1).closest(".w2ui-field").addClass("w2ui-disabled")) : s2.$el.prop("readOnly", false).prop("disabled", false).prop("tabIndex", s2.$el.data("tabIndex") ?? s2.$el.prop("tabIndex") ?? 0).closest(".w2ui-field").removeClass("w2ui-disabled")), s2.el);
          e2 = e2 || query(this.box).find("#" + s2.field), s2.hidden ? query(e2).closest(".w2ui-field").hide() : query(e2).closest(".w2ui-field").show();
        }
        query(this.box).find("button, input[type=button]").each((e2) => {
          query(e2).off("click").on("click", function(e3) {
            let t2 = this.value;
            this.id && (t2 = this.id), this.name && (t2 = this.name), c.action(t2, e3);
          });
        });
        for (let e2 = 0; e2 < i.length; e2++) {
          var s = this.fields[i[e2]];
          if (s.el) {
            if (s.$el.hasClass("w2ui-input") || s.$el.addClass("w2ui-input"), s.type = String(s.type).toLowerCase(), s.options || (s.options = {}), this.LIST_TYPES.includes(s.type) && (null == (l = s.options.items) && (s.options.items = []), s.options.items = w2utils.normMenu.call(this, l, s)), "select" == s.type) {
              var l = s.options.items;
              let t2 = "";
              l.forEach((e3) => {
                t2 += `<option value="${e3.id}">${e3.text}</option>`;
              }), s.$el.html(t2);
            }
            this.W2FIELD_TYPES.includes(s.type) && (s.w2field = s.w2field ?? new w2field(w2utils.extend({}, s.options, { type: s.type })), s.w2field.render(s.el)), ["map", "array"].includes(s.type) && !function(d) {
              let u;
              d.el.mapAdd = function(e3, t2, i2) {
                var s2 = (e3.disabled ? " readOnly " : "") + (e3.html.tabindex_str || ""), i2 = `
                            <div class="w2ui-map-field" style="margin-bottom: 5px" data-index="${i2}">
                            ${"map" == e3.type ? `<input type="text" ${e3.html.key.attr + s2} class="w2ui-input w2ui-map key">
                                    ${e3.html.key.text || ""}
                                ` : ""}
                            <input type="text" ${e3.html.value.attr + s2} class="w2ui-input w2ui-map value">
                                ${e3.html.value.text || ""}
                            </div>`;
                t2.append(i2);
              }, d.el.mapRefresh = function(l2, r) {
                var _a;
                let a, n, o;
                var h;
                "map" == d.type && (null == (l2 = w2utils.isPlainObject(l2) ? l2 : {})._order && (l2._order = Object.keys(l2)), a = l2._order), "array" == d.type && (Array.isArray(l2) || (l2 = []), a = l2.map((e4, t3) => t3));
                for (let e4 = r.find(".w2ui-map-field").length - 1; e4 >= a.length; e4--)
                  r.find(`div[data-index='${e4}']`).remove();
                for (let s2 = 0; s2 < a.length; s2++) {
                  let t3 = a[s2], e4 = r.find(`div[data-index='${s2}']`), i2 = (0 == e4.length && (d.el.mapAdd(d, r, s2), e4 = r.find(`div[data-index='${s2}']`)), e4.attr("data-key", t3), n = e4.find(".w2ui-map.key"), o = e4.find(".w2ui-map.value"), l2[t3]);
                  "array" == d.type && 0 < (h = l2.filter((e5) => e5.key == t3)).length && (i2 = h[0].value), n.val(t3), o.val(i2), true !== d.disabled && false !== d.disabled || (n.prop("readOnly", !!d.disabled), o.prop("readOnly", !!d.disabled));
                }
                var e3 = a.length, t2 = r.find(`div[data-index='${e3}']`), e3 = (0 !== t2.length || n && "" == n.val() && "" == o.val() || n && (true === n.prop("readOnly") || true === n.prop("disabled")) || d.el.mapAdd(d, r, e3), true !== d.disabled && false !== d.disabled || (t2.find(".key").prop("readOnly", !!d.disabled), t2.find(".value").prop("readOnly", !!d.disabled)), (_a = query(d.el).get(0)) == null ? void 0 : _a.nextSibling);
                query(e3).find("input.w2ui-map").off(".mapChange").on("keyup.mapChange", function(e4) {
                  var t3 = query(e4.target).closest(".w2ui-map-field"), i2 = t3.get(0).nextElementSibling, t3 = t3.get(0).previousElementSibling, s2 = (13 == e4.keyCode && ((s2 = u ?? i2) instanceof HTMLElement && 0 < (s2 = query(s2).find("input")).length && s2.get(0).focus(), u = void 0), query(e4.target).hasClass("key") ? "key" : "value");
                  38 == e4.keyCode && t3 && (query(t3).find("input." + s2).get(0).select(), e4.preventDefault()), 40 == e4.keyCode && i2 && (query(i2).find("input." + s2).get(0).select(), e4.preventDefault());
                }).on("keydown.mapChange", function(e4) {
                  38 != e4.keyCode && 40 != e4.keyCode || e4.preventDefault();
                }).on("input.mapChange", function(e4) {
                  var e4 = query(e4.target).closest("div"), t3 = e4.data("index"), i2 = e4.get(0).nextElementSibling;
                  if ("" == e4.find("input").val() || i2) {
                    if ("" == e4.find("input").val() && i2) {
                      let t4 = true;
                      query(i2).find("input").each((e5) => {
                        "" != e5.value && (t4 = false);
                      }), t4 && query(i2).remove();
                    }
                  } else
                    d.el.mapAdd(d, r, parseInt(t3) + 1);
                }).on("change.mapChange", function(e4) {
                  null == c.original && (0 < Object.keys(c.record).length ? c.original = w2utils.clone(c.record) : c.original = {});
                  let { current: t3, previous: i2, original: s2 } = c.getFieldValue(d.field);
                  var l3 = query(e4.target).closest(".w2ui-map-container"), l3 = ("map" == d.type && (t3._order = []), l3.find(".w2ui-map.key").each((e5) => {
                    t3._order.push(e5.value);
                  }), c.trigger("change", { target: d.field, field: d.field, originalEvent: e4, value: { current: t3, previous: i2, original: s2 } }));
                  true !== l3.isCancelled && ("map" == d.type && (t3._order = t3._order.filter((e5) => "" !== e5), delete t3[""]), "array" == d.type && (t3 = t3.filter((e5) => "" !== e5)), "" == query(e4.target).parent().find("input").val() && (u = e4.target), c.setValue(d.field, t3), d.el.mapRefresh(t3, r), l3.finish());
                });
              };
            }(s), this.setFieldValue(s.field, this.getValue(s.name));
          }
        }
        return t.finish(), this.resize(), Date.now() - e;
      }
    }
  }
  render(e) {
    var t = Date.now();
    let i = this;
    "string" == typeof e && (e = query(e).get(0));
    var s = this.trigger("render", { target: this.name, box: e ?? this.box });
    if (true !== s.isCancelled && (null != e && (0 < query(this.box).find("#form_" + this.name + "_form").length && query(this.box).removeAttr("name").removeClass("w2ui-reset w2ui-form").html(""), this.box = e), this.isGenerated || this.formHTML) && this.box) {
      e = '<div class="w2ui-form-box">' + ("" !== this.header ? '<div class="w2ui-form-header">' + w2utils.lang(this.header) + "</div>" : "") + '    <div id="form_' + this.name + '_toolbar" class="w2ui-form-toolbar" style="display: none"></div>    <div id="form_' + this.name + '_tabs" class="w2ui-form-tabs" style="display: none"></div>' + this.formHTML + "</div>", e = (query(this.box).attr("name", this.name).addClass("w2ui-reset w2ui-form").html(e), 0 < query(this.box).length && (query(this.box)[0].style.cssText += this.style), w2utils.bindEvents(query(this.box).find(".w2ui-eaction"), this), "function" != typeof this.toolbar.render && (this.toolbar = new w2toolbar(w2utils.extend({}, this.toolbar, { name: this.name + "_toolbar", owner: this })), this.toolbar.on("click", function(e2) {
        e2 = i.trigger("toolbar", { target: e2.target, originalEvent: e2 });
        true !== e2.isCancelled && e2.finish();
      })), "object" == typeof this.toolbar && "function" == typeof this.toolbar.render && this.toolbar.render(query(this.box).find("#form_" + this.name + "_toolbar")[0]), "function" != typeof this.tabs.render && (this.tabs = new w2tabs(w2utils.extend({}, this.tabs, { name: this.name + "_tabs", owner: this, active: this.tabs.active })), this.tabs.on("click", function(e2) {
        i.goto(this.get(e2.target, true));
      })), "object" == typeof this.tabs && "function" == typeof this.tabs.render && (this.tabs.render(query(this.box).find("#form_" + this.name + "_tabs")[0]), this.tabs.active) && this.tabs.click(this.tabs.active), s.finish(), this.resize(), "object" != typeof this.url ? this.url : this.url.get);
      if (e && null != this.recid ? this.request().catch((e2) => this.refresh()) : this.refresh(), this.last.observeResize = new ResizeObserver(() => {
        this.resize();
      }), this.last.observeResize.observe(this.box), -1 != this.focus) {
        let e2 = 0, t2 = () => {
          0 < query(i.box).find("input, select, textarea").length ? i.setFocus() : ++e2 < 20 && setTimeout(t2, 50);
        };
        t2();
      }
      return Date.now() - t;
    }
  }
  setFocus(e) {
    void 0 === e && (e = this.focus);
    let t;
    if (w2utils.isInt(e)) {
      if (e < 0)
        return;
      for (var i = query(this.box).find("div:not(.w2ui-field-helper) > input, select, textarea, div > label:nth-child(1) > [type=radio]").filter(":not(.file-input)"); null == i[e].offsetParent && i.length >= e; )
        e++;
      i[e] && (t = query(i[e]));
    } else
      "string" == typeof e && (t = query(this.box).find(`[name='${e}']`));
    return 0 < t.length && t.get(0).focus(), t;
  }
  destroy() {
    var _a;
    var e = this.trigger("destroy", { target: this.name });
    true !== e.isCancelled && ("object" == typeof this.toolbar && this.toolbar.destroy && this.toolbar.destroy(), "object" == typeof this.tabs && this.tabs.destroy && this.tabs.destroy(), 0 < query(this.box).find("#form_" + this.name + "_tabs").length && query(this.box).removeAttr("name").removeClass("w2ui-reset w2ui-form").html(""), (_a = this.last.observeResize) == null ? void 0 : _a.disconnect(), delete w2ui[this.name], e.finish());
  }
};
var w2field = class extends w2base {
  constructor(e, t) {
    super(), "string" == typeof e && null == t && (t = { type: e }), "object" == typeof e && null == t && (t = w2utils.clone(e)), "string" == typeof e && "object" == typeof t && (t.type = e), t.type = String(t.type).toLowerCase(), this.el = t.el ?? null, this.selected = null, this.helpers = {}, this.type = t.type ?? "text", this.options = w2utils.clone(t), this.onClick = t.onClick ?? null, this.onAdd = t.onAdd ?? null, this.onNew = t.onNew ?? null, this.onRemove = t.onRemove ?? null, this.onMouseEnter = t.onMouseEnter ?? null, this.onMouseLeave = t.onMouseLeave ?? null, this.onScroll = t.onScroll ?? null, this.tmp = {}, delete this.options.type, delete this.options.onClick, delete this.options.onMouseEnter, delete this.options.onMouseLeave, delete this.options.onScroll, this.el && this.render(this.el);
  }
  render(e) {
    e instanceof HTMLElement ? (e._w2field ? e._w2field.reset() : e._w2field = this, this.el = e, this.init()) : console.log("ERROR: Cannot init w2field on empty subject");
  }
  init() {
    let t = this.options, e;
    if (["INPUT", "TEXTAREA"].includes(this.el.tagName.toUpperCase())) {
      switch (this.type) {
        case "text":
        case "int":
        case "float":
        case "money":
        case "currency":
        case "percent":
        case "alphanumeric":
        case "bin":
        case "hex":
          e = { min: null, max: null, step: 1, autoFormat: true, autoCorrect: true, currencyPrefix: w2utils.settings.currencyPrefix, currencySuffix: w2utils.settings.currencySuffix, currencyPrecision: w2utils.settings.currencyPrecision, decimalSymbol: w2utils.settings.decimalSymbol, groupSymbol: w2utils.settings.groupSymbol, arrow: false, keyboard: true, precision: null, prefix: "", suffix: "" }, this.options = w2utils.extend({}, e, t), (t = this.options).numberRE = new RegExp("[" + t.groupSymbol + "]", "g"), t.moneyRE = new RegExp("[" + t.currencyPrefix + t.currencySuffix + t.groupSymbol + "]", "g"), t.percentRE = new RegExp("[" + t.groupSymbol + "%]", "g"), ["text", "alphanumeric", "hex", "bin"].includes(this.type) && (t.arrow = false, t.keyboard = false);
          break;
        case "color":
          e = { prefix: "#", suffix: `<div style="width: ${parseInt(getComputedStyle(this.el)["font-size"]) || 12}px">&#160;</div>`, arrow: false, advanced: null, transparent: true }, this.options = w2utils.extend({}, e, t), t = this.options;
          break;
        case "date":
          e = { format: w2utils.settings.dateFormat, keyboard: true, autoCorrect: true, start: null, end: null, blockDates: [], blockWeekdays: [], colored: {}, btnNow: true }, this.options = w2utils.extend({ type: "date" }, e, t), t = this.options, null == query(this.el).attr("placeholder") && query(this.el).attr("placeholder", t.format);
          break;
        case "time":
          e = { format: w2utils.settings.timeFormat, keyboard: true, autoCorrect: true, start: null, end: null, btnNow: true, noMinutes: false }, this.options = w2utils.extend({ type: "time" }, e, t), t = this.options, null == query(this.el).attr("placeholder") && query(this.el).attr("placeholder", t.format);
          break;
        case "datetime":
          e = { format: w2utils.settings.dateFormat + "|" + w2utils.settings.timeFormat, keyboard: true, autoCorrect: true, start: null, end: null, startTime: null, endTime: null, blockDates: [], blockWeekdays: [], colored: {}, btnNow: true, noMinutes: false }, this.options = w2utils.extend({ type: "datetime" }, e, t), t = this.options, null == query(this.el).attr("placeholder") && query(this.el).attr("placeholder", t.placeholder || t.format);
          break;
        case "list":
        case "combo":
          e = { items: [], selected: {}, url: null, recId: null, recText: null, method: null, debounce: 250, postData: {}, minLength: 1, cacheMax: 250, maxDropHeight: 350, maxDropWidth: null, minDropWidth: null, match: "begins", icon: null, iconStyle: "", align: "both", altRows: true, renderDrop: null, compare: null, filter: true, hideSelected: false, prefix: "", suffix: "", msgNoItems: "No matches", msgSearch: "Type to search...", openOnFocus: false, markSearch: false, onSearch: null, onRequest: null, onLoad: null, onError: null }, "function" == typeof t.items && (t._items_fun = t.items), t.items = w2utils.normMenu.call(this, t.items), "list" === this.type && (query(this.el).addClass("w2ui-select"), !w2utils.isPlainObject(t.selected)) && Array.isArray(t.items) && t.items.forEach((e2) => {
            e2 && e2.id === t.selected && (t.selected = w2utils.clone(e2));
          }), t = w2utils.extend({}, e, t), this.options = t, w2utils.isPlainObject(t.selected) || (t.selected = {}), this.selected = t.selected, query(this.el).attr("autocapitalize", "off").attr("autocomplete", "off").attr("autocorrect", "off").attr("spellcheck", "false"), null != t.selected.text && query(this.el).val(t.selected.text);
          break;
        case "enum":
          e = { items: [], selected: [], max: 0, url: null, recId: null, recText: null, debounce: 250, method: null, postData: {}, minLength: 1, cacheMax: 250, maxItemWidth: 250, maxDropHeight: 350, maxDropWidth: null, match: "contains", align: "", altRows: true, openOnFocus: false, markSearch: false, renderDrop: null, renderItem: null, compare: null, filter: true, hideSelected: true, style: "", msgNoItems: "No matches", msgSearch: "Type to search...", onSearch: null, onRequest: null, onLoad: null, onError: null, onClick: null, onAdd: null, onNew: null, onRemove: null, onMouseEnter: null, onMouseLeave: null, onScroll: null }, "function" == typeof (t = w2utils.extend({}, e, t, { suffix: "" })).items && (t._items_fun = t.items), t.items = w2utils.normMenu.call(this, t.items), t.selected = w2utils.normMenu.call(this, t.selected), this.options = t, Array.isArray(t.selected) || (t.selected = []), this.selected = t.selected;
          break;
        case "file":
          e = { selected: [], max: 0, maxSize: 0, maxFileSize: 0, maxItemWidth: 250, maxDropHeight: 350, maxDropWidth: null, readContent: true, silent: true, align: "both", altRows: true, renderItem: null, style: "", onClick: null, onAdd: null, onRemove: null, onMouseEnter: null, onMouseLeave: null }, t = w2utils.extend({}, e, t), this.options = t, Array.isArray(t.selected) || (t.selected = []), this.selected = t.selected, null == query(this.el).attr("placeholder") && query(this.el).attr("placeholder", w2utils.lang("Attach files by dragging and dropping or Click to Select"));
      }
      query(this.el).css("box-sizing", "border-box").addClass("w2field w2ui-input").off(".w2field").on("change.w2field", (e2) => {
        this.change(e2);
      }).on("click.w2field", (e2) => {
        this.click(e2);
      }).on("focus.w2field", (e2) => {
        this.focus(e2);
      }).on("blur.w2field", (e2) => {
        "list" !== this.type && this.blur(e2);
      }).on("keydown.w2field", (e2) => {
        this.keyDown(e2);
      }).on("keyup.w2field", (e2) => {
        this.keyUp(e2);
      }), this.addPrefix(), this.addSuffix(), this.addSearch(), this.addMultiSearch(), this.change(new Event("change"));
    } else
      console.log("ERROR: w2field could only be applied to INPUT or TEXTAREA.", this.el);
  }
  get() {
    let e;
    return e = -1 !== ["list", "enum", "file"].indexOf(this.type) ? this.selected : query(this.el).val();
  }
  set(e, t) {
    -1 !== ["list", "enum", "file"].indexOf(this.type) ? ("list" !== this.type && t ? (Array.isArray(this.selected) || (this.selected = []), this.selected.push(e), (t = w2menu.get(this.el.id + "_menu")) && (t.options.selected = this.selected)) : (null == e && (e = []), t = "enum" !== this.type || Array.isArray(e) ? e : [e], this.selected = t), query(this.el).trigger("input").trigger("change"), this.refresh()) : query(this.el).val(e);
  }
  setIndex(e, t) {
    if (-1 !== ["list", "enum"].indexOf(this.type)) {
      var i = this.options.items;
      if (i && i[e])
        return "list" == this.type && (this.selected = i[e]), "enum" == this.type && (t || (this.selected = []), this.selected.push(i[e])), (t = w2menu.get(this.el.id + "_menu")) && (t.options.selected = this.selected), query(this.el).trigger("input").trigger("change"), this.refresh(), true;
    }
    return false;
  }
  refresh() {
    var _a, _b;
    let s = this.options;
    var e = Date.now(), t = getComputedStyle(this.el);
    if ("list" == this.type) {
      if (query(this.el).parent().css("white-space", "nowrap"), this.helpers.prefix && this.helpers.prefix.hide(), !this.helpers.search)
        return;
      null == this.selected && s.icon ? s.prefix = `
                    <span class="w2ui-icon ${s.icon} "style="cursor: pointer; font-size: 14px;
                        display: inline-block; margin-top: -1px; color: #7F98AD; ${s.iconStyle}">
                    </span>` : s.prefix = "", this.addPrefix();
      let e2 = query(this.helpers.search_focus);
      var i = query(e2[0].previousElementSibling);
      e2.css({ outline: "none" }), "" === e2.val() ? (e2.css("opacity", 0), i.css("opacity", 0), ((_a = this.selected) == null ? void 0 : _a.id) ? (a = this.selected.text, r = this.findItemIndex(s.items, this.selected.id), null != a && query(this.el).val(w2utils.lang(a)).data({ selected: a, selectedIndex: r[0] })) : (this.el.value = "", query(this.el).removeData("selected selectedIndex"))) : (e2.css("opacity", 1), i.css("opacity", 1), query(this.el).val(""), setTimeout(() => {
        this.helpers.prefix && this.helpers.prefix.hide(), s.icon ? (e2.css("margin-left", "17px"), query(this.helpers.search).find(".w2ui-icon-search").addClass("show-search")) : (e2.css("margin-left", "0px"), query(this.helpers.search).find(".w2ui-icon-search").removeClass("show-search"));
      }, 1)), query(this.el).prop("readOnly") || query(this.el).prop("disabled") ? setTimeout(() => {
        this.helpers.prefix && query(this.helpers.prefix).css("opacity", "0.6"), this.helpers.suffix && query(this.helpers.suffix).css("opacity", "0.6");
      }, 1) : setTimeout(() => {
        this.helpers.prefix && query(this.helpers.prefix).css("opacity", "1"), this.helpers.suffix && query(this.helpers.suffix).css("opacity", "1");
      }, 1);
    }
    let l = this.helpers.multi;
    if (["enum", "file"].includes(this.type) && l) {
      let i2 = "";
      Array.isArray(this.selected) && this.selected.forEach((e2, t2) => {
        null != e2 && (i2 += `
                        <div class="li-item" index="${t2}" style="max-width: ${parseInt(s.maxItemWidth)}px; ${e2.style || ""}">
                        ${"function" == typeof s.renderItem ? s.renderItem(e2, t2, `<div class="w2ui-list-remove" index="${t2}">&#160;&#160;</div>`) : `
                               ${e2.icon ? `<span class="w2ui-icon ${e2.icon}"></span>` : ""}
                               <div class="w2ui-list-remove" index="${t2}">&#160;&#160;</div>
                               ${("enum" === this.type ? e2.text : e2.name) ?? e2.id ?? e2}
                               ${e2.size ? `<span class="file-size"> - ${w2utils.formatSize(e2.size)}</span>` : ""}
                            `}
                        </div>`);
      });
      var r, a = l.find(".w2ui-multi-items");
      s.style && l.attr("style", l.attr("style") + ";" + s.style), query(this.el).css("z-index", "-1"), query(this.el).prop("readOnly") || query(this.el).prop("disabled") ? setTimeout(() => {
        l[0].scrollTop = 0, l.addClass("w2ui-readonly").find(".li-item").css("opacity", "0.9").parent().find(".li-search").hide().find("input").prop("readOnly", true).closest(".w2ui-multi-items").find(".w2ui-list-remove").hide();
      }, 1) : setTimeout(() => {
        l.removeClass("w2ui-readonly").find(".li-item").css("opacity", "1").parent().find(".li-search").show().find("input").prop("readOnly", false).closest(".w2ui-multi-items").find(".w2ui-list-remove").show();
      }, 1), 0 < ((_b = this.selected) == null ? void 0 : _b.length) && query(this.el).attr("placeholder", ""), l.find(".w2ui-enum-placeholder").remove(), a.find(".li-item").remove(), "" !== i2 ? a.prepend(i2) : null != query(this.el).attr("placeholder") && "" === l.find("input").val() && (r = w2utils.stripSpaces(`
                    padding-top: ${t["padding-top"]};
                    padding-left: ${t["padding-left"]};
                    box-sizing: ${t["box-sizing"]};
                    line-height: ${t["line-height"]};
                    font-size: ${t["font-size"]};
                    font-family: ${t["font-family"]};
                `), l.prepend(`<div class="w2ui-enum-placeholder" style="${r}">${query(this.el).attr("placeholder")}</div>`)), l.off(".w2item").on("scroll.w2item", (e2) => {
        e2 = this.trigger("scroll", { target: this.el, originalEvent: e2 });
        true !== e2.isCancelled && (w2tooltip.hide(this.el.id + "_preview"), e2.finish());
      }).find(".li-item").on("click.w2item", (e2) => {
        var i3 = query(e2.target).closest(".li-item"), s2 = i3.attr("index"), l2 = this.selected[s2];
        if (!query(i3).hasClass("li-search")) {
          e2.stopPropagation();
          let t2;
          if (query(e2.target).hasClass("w2ui-list-remove"))
            query(this.el).prop("readOnly") || query(this.el).prop("disabled") || true !== (t2 = this.trigger("remove", { target: this.el, originalEvent: e2, item: l2 })).isCancelled && (this.selected.splice(s2, 1), query(this.el).trigger("input").trigger("change"), query(e2.target).remove());
          else if (true !== (t2 = this.trigger("click", { target: this.el, originalEvent: e2.originalEvent, item: l2 })).isCancelled) {
            let e3 = l2.tooltip;
            if ("file" === this.type && (/image/i.test(l2.type) && (e3 = `
                                    <div class="w2ui-file-preview">
                                        <img src="${l2.content ? "data:" + l2.type + ";base64," + l2.content : ""}"
                                            style="max-width: 300px">
                                    </div>`), e3 += `
                                <div class="w2ui-file-info">
                                    <div class="file-caption">${w2utils.lang("Name")}:</div>
                                    <div class="file-value">${l2.name}</div>
                                    <div class="file-caption">${w2utils.lang("Size")}:</div>
                                    <div class="file-value">${w2utils.formatSize(l2.size)}</div>
                                    <div class="file-caption">${w2utils.lang("Type")}:</div>
                                    <div class="file-value file-type">${l2.type}</div>
                                    <div class="file-caption">${w2utils.lang("Modified")}:</div>
                                    <div class="file-value">${w2utils.date(l2.modified)}</div>
                                </div>`), e3) {
              let t3 = this.el.id + "_preview";
              w2tooltip.show({ name: t3, anchor: i3.get(0), html: e3, hideOn: ["doc-click"], class: "" }).show((e4) => {
                query(`#w2overlay-${t3} img`).on("load", function(e5) {
                  var t4 = this.clientWidth, i4 = this.clientHeight;
                  t4 < 300 & i4 < 300 || (i4 <= t4 && 300 < t4 && query(this).css("width", "300px"), t4 < i4 && 300 < i4 && query(this).css("height", "300px"));
                }).on("error", function(e5) {
                  this.style.display = "none";
                });
              });
            }
            t2.finish();
          }
        }
      }).on("mouseenter.w2item", (e2) => {
        var t2 = query(e2.target).closest(".li-item");
        query(t2).hasClass("li-search") || (t2 = this.selected[query(e2.target).attr("index")], true !== (e2 = this.trigger("mouseEnter", { target: this.el, originalEvent: e2, item: t2 })).isCancelled && e2.finish());
      }).on("mouseleave.w2item", (e2) => {
        var t2 = query(e2.target).closest(".li-item");
        query(t2).hasClass("li-search") || (t2 = this.selected[query(e2.target).attr("index")], true !== (e2 = this.trigger("mouseLeave", { target: this.el, originalEvent: e2, item: t2 })).isCancelled && e2.finish());
      }), "enum" === this.type ? this.helpers.multi.find("input").css({ width: "15px" }) : this.helpers.multi.find(".li-search").hide(), this.resize();
    }
    return Date.now() - e;
  }
  resize() {
    var e = this.el.clientWidth, t = getComputedStyle(this.el), i = this.helpers.search, s = this.helpers.multi, l = this.helpers.suffix, r = this.helpers.prefix, i = (i && query(i).css("width", e), s && query(s).css("width", e - parseInt(t["margin-left"], 10) - parseInt(t["margin-right"], 10)), l && this.addSuffix(), r && this.addPrefix(), this.helpers.multi);
    if (["enum", "file"].includes(this.type) && i) {
      query(this.el).css("height", "auto");
      let e2 = query(i).find(":scope div.w2ui-multi-items").get(0).clientHeight + 5;
      (e2 = (e2 = e2 < 20 ? 20 : e2) > this.tmp["max-height"] ? this.tmp["max-height"] : e2) < this.tmp["min-height"] && (e2 = this.tmp["min-height"]);
      s = w2utils.getSize(this.el, "height") - 2;
      s > e2 && (e2 = s), query(i).css({ height: e2 + "px", overflow: e2 == this.tmp["max-height"] ? "auto" : "hidden" }), query(i).css("height", e2 + "px"), query(this.el).css({ height: e2 + "px" });
    }
    this.tmp.current_width = e;
  }
  reset() {
    null != this.tmp && (query(this.el).css("height", "auto"), Array("padding-left", "padding-right", "background-color", "border-color").forEach((e) => {
      this.tmp && null != this.tmp["old-" + e] && (query(this.el).css(e, this.tmp["old-" + e]), delete this.tmp["old-" + e]);
    }), clearInterval(this.tmp.sizeTimer)), query(this.el).val(this.clean(query(this.el).val())).removeClass("w2field").removeData("selected selectedIndex").off(".w2field"), Object.keys(this.helpers).forEach((e) => {
      query(this.helpers[e]).remove();
    }), this.helpers = {};
  }
  clean(e) {
    var t;
    return e = "number" != typeof e && (t = this.options, e = String(e).trim(), ["int", "float", "money", "currency", "percent"].includes(this.type)) ? "" !== (e = "string" == typeof e ? (e = t.autoFormat && (["money", "currency"].includes(this.type) && (e = String(e).replace(t.moneyRE, "")), "percent" === this.type && (e = String(e).replace(t.percentRE, "")), ["int", "float"].includes(this.type)) ? String(e).replace(t.numberRE, "") : e).replace(/\s+/g, "").replace(new RegExp(t.groupSymbol, "g"), "").replace(t.decimalSymbol, ".") : e) && w2utils.isFloat(e) ? Number(e) : "" : e;
  }
  format(e) {
    var t = this.options;
    if (t.autoFormat && "" !== e) {
      switch (this.type) {
        case "money":
        case "currency":
          "" !== (e = w2utils.formatNumber(e, t.currencyPrecision, true)) && (e = t.currencyPrefix + e + t.currencySuffix);
          break;
        case "percent":
          "" !== (e = w2utils.formatNumber(e, t.precision, true)) && (e += "%");
          break;
        case "float":
          e = w2utils.formatNumber(e, t.precision, true);
          break;
        case "int":
          e = w2utils.formatNumber(e, 0, true);
      }
      var i = parseInt(1e3).toLocaleString(w2utils.settings.locale, { useGrouping: true }).slice(1, 2);
      i !== this.options.groupSymbol && (e = e.replaceAll(i, this.options.groupSymbol));
    }
    return e;
  }
  change(e) {
    if (-1 !== ["int", "float", "money", "currency", "percent"].indexOf(this.type)) {
      var t = query(this.el).val(), i = this.format(this.clean(query(this.el).val()));
      if ("" !== t && t != i)
        return query(this.el).val(i), e.stopPropagation(), e.preventDefault(), false;
    }
    if ("color" === this.type) {
      let e2 = query(this.el).val();
      "rgb" !== e2.substr(0, 3).toLowerCase() && (e2 = "#" + e2, 8 !== (t = query(this.el).val().length)) && 6 !== t && 3 !== t && (e2 = "");
      i = query(this.el).get(0).nextElementSibling;
      query(i).find("div").css("background-color", e2), query(this.el).hasClass("has-focus") && this.updateOverlay();
    }
    if (-1 !== ["list", "enum", "file"].indexOf(this.type) && this.refresh(), -1 !== ["date", "time", "datetime"].indexOf(this.type)) {
      let e2 = parseInt(this.el.value);
      w2utils.isInt(this.el.value) && 3e3 < e2 && ("time" === this.type && (e2 = w2utils.formatTime(new Date(e2), this.options.format)), "date" === this.type && (e2 = w2utils.formatDate(new Date(e2), this.options.format)), "datetime" === this.type && (e2 = w2utils.formatDateTime(new Date(e2), this.options.format)), query(this.el).val(e2).trigger("input").trigger("change"));
    }
  }
  click(e) {
    ["list", "combo", "enum"].includes(this.type) && (query(this.el).hasClass("has-focus") || this.focus(e), "combo" == this.type && this.updateOverlay(), "list" == this.type) && (this.updateOverlay(), e.stopPropagation()), ["date", "time", "datetime", "color"].includes(this.type) && this.updateOverlay();
  }
  focus(e) {
    if ("list" == this.type && document.activeElement == this.el)
      this.helpers.search_focus.focus();
    else {
      if (-1 !== ["color", "date", "time", "datetime"].indexOf(this.type)) {
        if (query(this.el).prop("readOnly") || query(this.el).prop("disabled"))
          return;
        this.updateOverlay();
      }
      if (-1 !== ["list", "combo", "enum"].indexOf(this.type)) {
        if (query(this.el).prop("readOnly") || query(this.el).prop("disabled"))
          return void query(this.el).addClass("has-focus");
        "function" == typeof this.options._items_fun && (this.options.items = w2utils.normMenu.call(this, this.options._items_fun)), this.helpers.search && ((t = this.helpers.search_focus).value = "", t.select()), "enum" == this.type && (t = query(this.el.previousElementSibling).find(".li-search input").get(0), document.activeElement !== t) && t.focus(), this.resize(), false === e.showMenu || false === this.options.openOnFocus && !query(this.el).hasClass("has-focus") || setTimeout(() => {
          this.updateOverlay();
        }, 100);
      }
      var t;
      "file" == this.type && (t = query(this.el).get(0).previousElementSibling, query(t).addClass("has-focus")), query(this.el).addClass("has-focus");
    }
  }
  blur(e) {
    var _a;
    var i, s = query(this.el).val().trim();
    if (query(this.el).removeClass("has-focus"), ["int", "float", "money", "currency", "percent"].includes(this.type) && "" !== s) {
      let e2 = s, t = "";
      this.isStrValid(s) ? (i = this.clean(s), null != this.options.min && i < this.options.min && (e2 = this.options.min, t = "Should be >= " + this.options.min), null != this.options.max && i > this.options.max && (e2 = this.options.max, t = "Should be <= " + this.options.max)) : e2 = "", this.options.autoCorrect && (query(this.el).val(e2).trigger("input").trigger("change"), t) && (w2tooltip.show({ name: this.el.id + "_error", anchor: this.el, html: t }), setTimeout(() => {
        w2tooltip.hide(this.el.id + "_error");
      }, 3e3));
    }
    ["date", "time", "datetime"].includes(this.type) && this.options.autoCorrect && "" !== s && (i = "date" == this.type ? w2utils.isDate : "time" == this.type ? w2utils.isTime : w2utils.isDateTime, w2date.inRange(this.el.value, this.options) && i.bind(w2utils)(this.el.value, this.options.format) || query(this.el).val("").trigger("input").trigger("change")), "enum" === this.type && query(this.helpers.multi).find("input").val("").css("width", "15px"), "file" == this.type && (s = this.el.previousElementSibling, query(s).removeClass("has-focus")), "list" === this.type && (this.el.value = ((_a = this.selected) == null ? void 0 : _a.text) ?? "");
  }
  keyDown(t, i) {
    var e, s = this.options, i = t.keyCode || i && i.keyCode;
    let l = false, r, a, n, o, h, d;
    if (["int", "float", "money", "currency", "percent", "hex", "bin", "color", "alphanumeric"].includes(this.type) && !(t.metaKey || t.ctrlKey || t.altKey || this.isStrValid(t.key ?? "1", true) || [9, 8, 13, 27, 37, 38, 39, 40, 46].includes(t.keyCode)))
      return t.preventDefault(), t.stopPropagation ? t.stopPropagation() : t.cancelBubble = true, false;
    if (["int", "float", "money", "currency", "percent"].includes(this.type)) {
      if (!s.keyboard || query(this.el).prop("readOnly") || query(this.el).prop("disabled"))
        return;
      switch (r = parseFloat(query(this.el).val().replace(s.moneyRE, "")) || 0, a = s.step, (t.ctrlKey || t.metaKey) && (a = 10 * s.step), i) {
        case 38:
          t.shiftKey || (h = r + a <= s.max || null == s.max ? Number((r + a).toFixed(12)) : s.max, query(this.el).val(h).trigger("input").trigger("change"), l = true);
          break;
        case 40:
          t.shiftKey || (h = r - a >= s.min || null == s.min ? Number((r - a).toFixed(12)) : s.min, query(this.el).val(h).trigger("input").trigger("change"), l = true);
      }
      l && (t.preventDefault(), this.moveCaret2end());
    }
    if (["date", "datetime"].includes(this.type)) {
      if (!s.keyboard || query(this.el).prop("readOnly") || query(this.el).prop("disabled"))
        return;
      var u = ("date" == this.type ? w2utils.isDate : w2utils.isDateTime).bind(w2utils), c = ("date" == this.type ? w2utils.formatDate : w2utils.formatDateTime).bind(w2utils);
      switch (n = 864e5, a = 1, (t.ctrlKey || t.metaKey) && (a = 10), (o = u(query(this.el).val(), s.format, true)) || (o = /* @__PURE__ */ new Date(), n = 0), i) {
        case 38:
          t.shiftKey || (10 == a ? o.setMonth(o.getMonth() + 1) : o.setTime(o.getTime() + n), d = c(o.getTime(), s.format), query(this.el).val(d).trigger("input").trigger("change"), l = true);
          break;
        case 40:
          t.shiftKey || (10 == a ? o.setMonth(o.getMonth() - 1) : o.setTime(o.getTime() - n), d = c(o.getTime(), s.format), query(this.el).val(d).trigger("input").trigger("change"), l = true);
      }
      l && (t.preventDefault(), this.moveCaret2end(), this.updateOverlay());
    }
    if ("time" === this.type) {
      if (!s.keyboard || query(this.el).prop("readOnly") || query(this.el).prop("disabled"))
        return;
      a = t.ctrlKey || t.metaKey ? 60 : 1, r = query(this.el).val();
      let e2 = w2date.str2min(r) || w2date.str2min((/* @__PURE__ */ new Date()).getHours() + ":" + ((/* @__PURE__ */ new Date()).getMinutes() - 1));
      switch (i) {
        case 38:
          t.shiftKey || (e2 += a, l = true);
          break;
        case 40:
          t.shiftKey || (e2 -= a, l = true);
      }
      l && (t.preventDefault(), query(this.el).val(w2date.min2str(e2)).trigger("input").trigger("change"), this.moveCaret2end());
    }
    if (["list", "enum"].includes(this.type))
      switch (i) {
        case 8:
        case 46:
          "list" == this.type ? "" == query(this.helpers.search_focus).val() && (this.selected = null, w2menu.hide(this.el.id + "_menu"), query(this.el).val("").trigger("input").trigger("change")) : "" == query(this.helpers.multi).find("input").val() && (w2menu.hide(this.el.id + "_menu"), this.selected.pop(), (e = w2menu.get(this.el.id + "_menu")) && (e.options.selected = this.selected), this.refresh());
          break;
        case 9:
        case 16:
          break;
        case 27:
          w2menu.hide(this.el.id + "_menu"), this.refresh();
      }
  }
  keyUp(t) {
    var _a, _b;
    if ("list" == this.type) {
      let e2 = query(this.helpers.search_focus);
      "" !== e2.val() ? query(this.el).attr("placeholder", "") : query(this.el).attr("placeholder", this.tmp.pholder), 13 == t.keyCode && setTimeout(() => {
        e2.val(""), w2menu.hide(this.el.id + "_menu"), this.refresh();
      }, 1), [38, 40].includes(t.keyCode) && !this.tmp.overlay.overlay.displayed && this.updateOverlay(), this.refresh();
    }
    var e, i;
    "combo" == this.type && this.updateOverlay(), "enum" == this.type && (e = this.helpers.multi.find("input"), i = getComputedStyle(e.get(0)), i = w2utils.getStrWidth(e.val(), `font-family: ${i["font-family"]}; font-size: ${i["font-size"]};`), e.css({ width: i + 15 + "px" }), this.resize(), [38, 40].includes(t.keyCode)) && !((_b = (_a = this.tmp.overlay) == null ? void 0 : _a.overlay) == null ? void 0 : _b.displayed) && this.updateOverlay();
  }
  findItemIndex(e, i, s) {
    let l = [];
    var t;
    return s = s || [], ["list", "combo", "enum"].includes(this.type) && this.options.url && (t = w2menu.get(this.el.id + "_menu")) && (e = t.options.items, this.options.items = e), e.forEach((e2, t2) => {
      e2.id === i && (l = s.concat([t2]), this.options.index = [t2]), 0 == l.length && e2.items && 0 < e2.items.length && (s.push(t2), l = this.findItemIndex(e2.items, i, s), s.pop());
    }), l;
  }
  updateOverlay(e) {
    let l = this.options;
    if ("color" === this.type) {
      if (query(this.el).prop("readOnly") || query(this.el).prop("disabled"))
        return;
      w2color.show(w2utils.extend({ name: this.el.id + "_color", anchor: this.el, transparent: l.transparent, advanced: l.advanced, color: this.el.value, liveUpdate: true }, this.options)).select((e2) => {
        e2 = e2.detail.color;
        query(this.el).val(e2).trigger("input").trigger("change");
      }).liveUpdate((e2) => {
        e2 = e2.detail.color;
        query(this.helpers.suffix).find(":scope > div").css("background-color", "#" + e2);
      });
    }
    if (["list", "combo", "enum"].includes(this.type)) {
      var t;
      this.el;
      let s = this.el;
      "enum" === this.type && (t = this.helpers.multi.get(0), s = query(t).find("input").get(0)), "list" === this.type && (t = this.selected, w2utils.isPlainObject(t) && 0 < Object.keys(t).length && 0 < (t = this.findItemIndex(l.items, t.id)).length && (l.index = t), s = this.helpers.search_focus), !query(this.el).hasClass("has-focus") || this.el.readOnly || this.el.disabled || (t = w2utils.extend({}, l, { name: this.el.id + "_menu", anchor: s, selected: this.selected, search: false, render: l.renderDrop, anchorClass: "", offsetY: 5, maxHeight: l.maxDropHeight, maxWidth: l.maxDropWidth, minWidth: l.minDropWidth }), this.tmp.overlay = w2menu.show(t).select((e2) => {
        var _a;
        var t2, i;
        ["list", "combo"].includes(this.type) ? (this.selected = e2.detail.item, query(s).val(""), query(this.el).val(this.selected.text).trigger("input").trigger("change"), this.focus({ showMenu: false })) : (i = this.selected, (t2 = (_a = e2.detail) == null ? void 0 : _a.item) && true !== (e2 = this.trigger("add", { target: this.el, item: t2, originalEvent: e2 })).isCancelled && (i.length >= l.max && 0 < l.max && i.pop(), delete t2.hidden, i.push(t2), query(this.el).trigger("input").trigger("change"), query(this.helpers.multi).find("input").val(""), (i = w2menu.get(this.el.id + "_menu")) && (i.options.selected = this.selected), e2.finish()));
      }));
    }
    !["date", "time", "datetime"].includes(this.type) || query(this.el).prop("readOnly") || query(this.el).prop("disabled") || w2date.show(w2utils.extend({ name: this.el.id + "_date", anchor: this.el, value: this.el.value }, this.options)).select((e2) => {
      e2 = e2.detail.date;
      null != e2 && query(this.el).val(e2).trigger("input").trigger("change");
    });
  }
  isStrValid(e, t) {
    let i = true;
    switch (this.type) {
      case "int":
        i = !(!t || !["-", this.options.groupSymbol].includes(e)) || w2utils.isInt(e.replace(this.options.numberRE, ""));
        break;
      case "percent":
        e = e.replace(/%/g, "");
      case "float":
        i = !(!t || !["-", "", this.options.decimalSymbol, this.options.groupSymbol].includes(e)) || w2utils.isFloat(e.replace(this.options.numberRE, ""));
        break;
      case "money":
      case "currency":
        i = !(!t || !["-", this.options.decimalSymbol, this.options.groupSymbol, this.options.currencyPrefix, this.options.currencySuffix].includes(e)) || w2utils.isFloat(e.replace(this.options.moneyRE, ""));
        break;
      case "bin":
        i = w2utils.isBin(e);
        break;
      case "color":
      case "hex":
        i = w2utils.isHex(e);
        break;
      case "alphanumeric":
        i = w2utils.isAlphaNumeric(e);
    }
    return i;
  }
  addPrefix() {
    var e, t;
    this.options.prefix && (t = getComputedStyle(this.el), null == this.tmp["old-padding-left"] && (this.tmp["old-padding-left"] = t["padding-left"]), this.helpers.prefix && query(this.helpers.prefix).remove(), query(this.el).before(`<div class="w2ui-field-helper">${this.options.prefix}</div>`), e = query(this.el).get(0).previousElementSibling, query(e).css({ color: t.color, "font-family": t["font-family"], "font-size": t["font-size"], height: this.el.clientHeight + "px", "padding-top": t["padding-top"], "padding-bottom": t["padding-bottom"], "padding-left": this.tmp["old-padding-left"], "padding-right": 0, "margin-top": parseInt(t["margin-top"], 10) + 2 + "px", "margin-bottom": parseInt(t["margin-bottom"], 10) + 1 + "px", "margin-left": t["margin-left"], "margin-right": 0, "z-index": 1 }), query(this.el).css("padding-left", e.clientWidth + "px !important"), this.helpers.prefix = e);
  }
  addSuffix() {
    if (this.options.suffix || this.options.arrow) {
      let e, t = this;
      var i = getComputedStyle(this.el), s = (null == this.tmp["old-padding-right"] && (this.tmp["old-padding-right"] = i["padding-right"]), parseInt(i["padding-right"] || 0));
      this.options.arrow && (this.helpers.arrow && query(this.helpers.arrow).remove(), query(this.el).after('<div class="w2ui-field-helper" style="border: 1px solid transparent">&#160;    <div class="w2ui-field-up" type="up">        <div class="arrow-up" type="up"></div>    </div>    <div class="w2ui-field-down" type="down">        <div class="arrow-down" type="down"></div>    </div></div>'), e = query(this.el).get(0).nextElementSibling, query(e).css({ color: i.color, "font-family": i["font-family"], "font-size": i["font-size"], height: this.el.clientHeight + "px", padding: 0, "margin-top": parseInt(i["margin-top"], 10) + 1 + "px", "margin-bottom": 0, "border-left": "1px solid silver", width: "16px", transform: "translateX(-100%)" }).on("mousedown", function(e2) {
        query(e2.target).hasClass("arrow-up") && t.keyDown(e2, { keyCode: 38 }), query(e2.target).hasClass("arrow-down") && t.keyDown(e2, { keyCode: 40 });
      }), s += e.clientWidth, query(this.el).css("padding-right", s + "px !important"), this.helpers.arrow = e), "" !== this.options.suffix && (this.helpers.suffix && query(this.helpers.suffix).remove(), query(this.el).after(`<div class="w2ui-field-helper">${this.options.suffix}</div>`), e = query(this.el).get(0).nextElementSibling, query(e).css({ color: i.color, "font-family": i["font-family"], "font-size": i["font-size"], height: this.el.clientHeight + "px", "padding-top": i["padding-top"], "padding-bottom": i["padding-bottom"], "padding-left": 0, "padding-right": i["padding-right"], "margin-top": parseInt(i["margin-top"], 10) + 2 + "px", "margin-bottom": parseInt(i["margin-bottom"], 10) + 1 + "px", transform: "translateX(-100%)" }), query(this.el).css("padding-right", e.clientWidth + "px !important"), this.helpers.suffix = e);
    }
  }
  addSearch() {
    if ("list" === this.type) {
      this.helpers.search && query(this.helpers.search).remove();
      let e = parseInt(query(this.el).attr("tabIndex")), t = (isNaN(e) || -1 === e || (this.tmp["old-tabIndex"] = e), null != (e = this.tmp["old-tabIndex"] ? this.tmp["old-tabIndex"] : e) && !isNaN(e) || (e = 0), "");
      var i = `
            <div class="w2ui-field-helper">
                <span class="w2ui-icon w2ui-icon-search"></span>
                <input ${t = null != query(this.el).attr("id") ? 'id="' + query(this.el).attr("id") + '_search"' : t} type="text" tabIndex="${e}" autocapitalize="off" autocomplete="off" autocorrect="off" spellcheck="false"/>
            </div>`, i = (query(this.el).attr("tabindex", -1).before(i), query(this.el).get(0).previousElementSibling), s = (this.helpers.search = i, this.helpers.search_focus = query(i).find("input").get(0), getComputedStyle(this.el));
      query(i).css({ width: this.el.clientWidth + "px", "margin-top": s["margin-top"], "margin-left": s["margin-left"], "margin-bottom": s["margin-bottom"], "margin-right": s["margin-right"] }).find("input").css({ cursor: "default", width: "100%", opacity: 1, padding: s.padding, margin: s.margin, border: "1px solid transparent", "background-color": "transparent" }), query(i).find("input").off(".helper").on("focus.helper", (e2) => {
        query(e2.target).val(""), this.tmp.pholder = query(this.el).attr("placeholder") ?? "", this.focus(e2), e2.stopPropagation();
      }).on("blur.helper", (e2) => {
        query(e2.target).val(""), null != this.tmp.pholder && query(this.el).attr("placeholder", this.tmp.pholder), this.blur(e2), e2.stopPropagation();
      }).on("keydown.helper", (e2) => {
        this.keyDown(e2);
      }).on("keyup.helper", (e2) => {
        this.keyUp(e2);
      }), query(i).on("click", (e2) => {
        query(e2.target).find("input").focus();
      });
    }
  }
  addMultiSearch() {
    if (["enum", "file"].includes(this.type)) {
      query(this.helpers.multi).remove();
      let e = "";
      var l, r, a = getComputedStyle(this.el), n = w2utils.stripSpaces(`
            margin-top: 0px;
            margin-bottom: 0px;
            margin-left: ${a["margin-left"]};
            margin-right: ${a["margin-right"]};
            width: ${w2utils.getSize(this.el, "width") - parseInt(a["margin-left"], 10) - parseInt(a["margin-right"], 10)}px;
        `);
      null == this.tmp["min-height"] && (l = this.tmp["min-height"] = parseInt(("none" != a["min-height"] ? a["min-height"] : 0) || 0), r = parseInt(a.height), this.tmp["min-height"] = Math.max(l, r)), null == this.tmp["max-height"] && "none" != a["max-height"] && (this.tmp["max-height"] = parseInt(a["max-height"]));
      let t = "", i = (null != query(this.el).attr("id") && (t = `id="${query(this.el).attr("id")}_search"`), parseInt(query(this.el).attr("tabIndex"))), s = (isNaN(i) || -1 === i || (this.tmp["old-tabIndex"] = i), null != (i = this.tmp["old-tabIndex"] ? this.tmp["old-tabIndex"] : i) && !isNaN(i) || (i = 0), "enum" === this.type && (e = `
            <div class="w2ui-field-helper w2ui-list" style="${n}">
                <div class="w2ui-multi-items">
                    <div class="li-search">
                        <input ${t} type="text" autocapitalize="off" autocomplete="off" autocorrect="off" spellcheck="false"
                            tabindex="${i}"
                            ${query(this.el).prop("readOnly") ? "readonly" : ""}
                            ${query(this.el).prop("disabled") ? "disabled" : ""}>
                    </div>
                </div>
            </div>`), "file" === this.type && (e = `
            <div class="w2ui-field-helper w2ui-list" style="${n}">
                <div class="w2ui-multi-file">
                    <input name="attachment" class="file-input" type="file" tabindex="-1"'
                        style="width: 100%; height: 100%; opacity: 0" title=""
                        ${1 !== this.options.max ? "multiple" : ""}
                        ${query(this.el).prop("readOnly") || query(this.el).prop("disabled") ? "disabled" : ""}
                        ${query(this.el).attr("accept") ? ' accept="' + query(this.el).attr("accept") + '"' : ""}>
                </div>
                <div class="w2ui-multi-items">
                    <div class="li-search" style="display: none">
                        <input ${t} type="text" autocapitalize="off" autocomplete="off" autocorrect="off" spellcheck="false"
                            tabindex="${i}"
                            ${query(this.el).prop("readOnly") ? "readonly" : ""}
                            ${query(this.el).prop("disabled") ? "disabled" : ""}>
                    </div>
                </div>
            </div>`), this.tmp["old-background-color"] = a["background-color"], this.tmp["old-border-color"] = a["border-color"], query(this.el).before(e).css({ "border-color": "transparent", "background-color": "transparent" }), query(this.el.previousElementSibling));
      this.helpers.multi = s, query(this.el).attr("tabindex", -1), s.on("click", (e2) => {
        this.focus(e2);
      }), s.find("input:not(.file-input)").on("click", (e2) => {
        this.click(e2);
      }).on("focus", (e2) => {
        this.focus(e2);
      }).on("blur", (e2) => {
        this.blur(e2);
      }).on("keydown", (e2) => {
        this.keyDown(e2);
      }).on("keyup", (e2) => {
        this.keyUp(e2);
      }), "file" === this.type && s.find("input.file-input").off(".drag").on("click.drag", (e2) => {
        e2.stopPropagation(), query(this.el).prop("readOnly") || query(this.el).prop("disabled") || this.focus(e2);
      }).on("dragenter.drag", (e2) => {
        query(this.el).prop("readOnly") || query(this.el).prop("disabled") || s.addClass("w2ui-file-dragover");
      }).on("dragleave.drag", (e2) => {
        query(this.el).prop("readOnly") || query(this.el).prop("disabled") || s.removeClass("w2ui-file-dragover");
      }).on("drop.drag", (e2) => {
        query(this.el).prop("readOnly") || query(this.el).prop("disabled") || (s.removeClass("w2ui-file-dragover"), Array.from(e2.dataTransfer.files).forEach((e3) => {
          this.addFile(e3);
        }), this.focus(e2), e2.preventDefault(), e2.stopPropagation());
      }).on("dragover.drag", (e2) => {
        e2.preventDefault(), e2.stopPropagation();
      }).on("change.drag", (e2) => {
        void 0 !== e2.target.files && Array.from(e2.target.files).forEach((e3) => {
          this.addFile(e3);
        }), this.focus(e2);
      }), this.refresh();
    }
  }
  addFile(t) {
    var e = this.options, s = this.selected;
    let l = { name: t.name, type: t.type, modified: t.lastModifiedDate, size: t.size, content: null, file: t }, i = 0, r = 0, a = [], n = (Array.isArray(s) && s.forEach((e2) => {
      e2.name == t.name && e2.size == t.size && a.push(w2utils.lang('The file "${name}" (${size}) is already added.', { name: t.name, size: w2utils.formatSize(t.size) })), i += e2.size, r++;
    }), 0 !== e.maxFileSize && l.size > e.maxFileSize && a.push(w2utils.lang("Maximum file size is ${size}", { size: w2utils.formatSize(e.maxFileSize) })), 0 !== e.maxSize && i + l.size > e.maxSize && a.push(w2utils.lang("Maximum total size is ${size}", { size: w2utils.formatSize(e.maxSize) })), 0 !== e.max && r >= e.max && a.push(w2utils.lang("Maximum number of files is ${count}", { count: e.max })), this.trigger("add", { target: this.el, file: l, total: r, totalSize: i, errors: a }));
    if (true !== n.isCancelled)
      if (true !== e.silent && 0 < a.length)
        w2tooltip.show({ anchor: this.el, html: "Errors: " + a.join("<br>") }), console.log("ERRORS (while adding files): ", a);
      else if (s.push(l), "undefined" != typeof FileReader && true === e.readContent) {
        s = new FileReader();
        let i2 = this;
        s.onload = function(e2) {
          var e2 = e2.target.result, t2 = e2.indexOf(",");
          l.content = e2.substr(t2 + 1), i2.refresh(), query(i2.el).trigger("input").trigger("change"), n.finish();
        }, s.readAsDataURL(t);
      } else
        this.refresh(), query(this.el).trigger("input").trigger("change"), n.finish();
  }
  moveCaret2end() {
    setTimeout(() => {
      this.el.setSelectionRange(this.el.value.length, this.el.value.length);
    }, 0);
  }
};
export {
  Dialog,
  Tooltip,
  query,
  w2alert,
  w2base,
  w2color,
  w2confirm,
  w2date,
  w2event,
  w2field,
  w2form,
  w2grid,
  w2layout,
  w2locale,
  w2menu,
  w2popup,
  w2prompt,
  w2sidebar,
  w2tabs,
  w2toolbar,
  w2tooltip,
  w2ui,
  w2utils
};
//# sourceMappingURL=w2ui.js.map
